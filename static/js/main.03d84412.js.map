{"version":3,"file":"static/js/main.03d84412.js","mappings":"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","sources":["../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../pdfjs-dist/build/pdf/webpack/universalModuleDefinition","../pdfjs-dist/build/pdf/src/display/display_utils.js","../pdfjs-dist/build/pdf/node_modules/@babel/runtime/regenerator/index.js","../pdfjs-dist/build/pdf/node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","../pdfjs-dist/build/pdf/src/shared/util.js","../pdfjs-dist/build/pdf/src/shared/compatibility.js","../pdfjs-dist/build/pdf/src/shared/is_node.js","../pdfjs-dist/build/pdf/node_modules/core-js/es/global-this.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.global-this.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/export.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/global.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-get-own-property-descriptor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/descriptors.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/fails.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/function-call.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-property-is-enumerable.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/create-property-descriptor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-indexed-object.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/indexed-object.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/function-uncurry-this.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/classof-raw.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/require-object-coercible.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-property-key.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-primitive.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-object.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-callable.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-symbol.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/get-built-in.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-is-prototype-of.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/use-symbol-as-uid.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/native-symbol.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-v8-version.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-user-agent.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/get-method.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/a-callable.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/try-to-string.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/ordinary-to-primitive.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/well-known-symbol.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/shared.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-pure.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/shared-store.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/set-global.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/has-own-property.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-object.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/uid.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/ie8-dom-define.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/document-create-element.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/create-non-enumerable-property.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-define-property.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/an-object.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/redefine.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/inspect-source.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/internal-state.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/native-weak-map.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/shared-key.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/hidden-keys.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/function-name.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/copy-constructor-properties.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/own-keys.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-get-own-property-names.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-keys-internal.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/array-includes.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-absolute-index.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-integer-or-infinity.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/length-of-array-like.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-length.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/enum-bug-keys.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-get-own-property-symbols.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-forced.js","../pdfjs-dist/build/pdf/node_modules/dommatrix/dist/dommatrix.js","../pdfjs-dist/build/pdf/node_modules/core-js/es/object/from-entries.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.array.iterator.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/add-to-unscopables.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-create.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-define-properties.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-keys.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/html.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/iterators.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/define-iterator.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/create-iterator-constructor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/iterators-core.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-get-prototype-of.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/correct-prototype-getter.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/set-to-string-tag.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-set-prototype-of.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/a-possible-prototype.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.object.from-entries.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/iterate.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/function-bind-context.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-array-iterator-method.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/get-iterator.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/get-iterator-method.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/classof.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-string-tag-support.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/iterator-close.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/create-property.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/path.js","../pdfjs-dist/build/pdf/node_modules/core-js/es/promise/index.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.aggregate-error.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/clear-error-stack.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/array-slice-simple.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/install-error-cause.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/normalize-string-argument.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/to-string.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/error-stack-installable.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.object.to-string.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/object-to-string.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.promise.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/native-promise-constructor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/redefine-all.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/set-species.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/an-instance.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/check-correctness-of-iteration.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/species-constructor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/a-constructor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/is-constructor.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/task.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/function-apply.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/array-slice.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-is-ios.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-is-node.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/microtask.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-is-ios-pebble.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-is-webos-webkit.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/promise-resolve.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/new-promise-capability.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/host-report-errors.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/perform.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/engine-is-browser.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.promise.all-settled.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.promise.any.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.promise.finally.js","../pdfjs-dist/build/pdf/node_modules/core-js/modules/es.string.iterator.js","../pdfjs-dist/build/pdf/node_modules/core-js/internals/string-multibyte.js","../pdfjs-dist/build/pdf/node_modules/web-streams-polyfill/dist/ponyfill.js","../pdfjs-dist/build/pdf/src/display/base_factory.js","../pdfjs-dist/build/pdf/src/display/api.js","../pdfjs-dist/build/pdf/src/display/font_loader.js","../pdfjs-dist/build/pdf/src/display/node_utils.js","../pdfjs-dist/build/pdf/src/display/annotation_storage.js","../pdfjs-dist/build/pdf/src/display/canvas.js","../pdfjs-dist/build/pdf/src/display/pattern_helper.js","../pdfjs-dist/build/pdf/src/display/worker_options.js","../pdfjs-dist/build/pdf/src/shared/message_handler.js","../pdfjs-dist/build/pdf/src/display/metadata.js","../pdfjs-dist/build/pdf/src/display/optional_content_config.js","../pdfjs-dist/build/pdf/src/display/transport_stream.js","../pdfjs-dist/build/pdf/src/display/xfa_text.js","../pdfjs-dist/build/pdf/src/display/annotation_layer.js","../pdfjs-dist/build/pdf/src/shared/scripting_utils.js","../pdfjs-dist/build/pdf/src/display/xfa_layer.js","../pdfjs-dist/build/pdf/src/display/text_layer.js","../pdfjs-dist/build/pdf/src/display/svg.js","../pdfjs-dist/build/pdf/src/display/node_stream.js","../pdfjs-dist/build/pdf/src/display/network_utils.js","../pdfjs-dist/build/pdf/src/display/content_disposition.js","../pdfjs-dist/build/pdf/src/display/network.js","../pdfjs-dist/build/pdf/src/display/fetch_stream.js","../pdfjs-dist/build/pdf/webpack/bootstrap","../pdfjs-dist/build/pdf/webpack/runtime/node module decorator","../pdfjs-dist/build/pdf/src/pdf.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/make-event-props/dist/esm/index.js","../node_modules/make-cancellable-promise/dist/esm/index.js","../node_modules/merge-class-names/dist/esm/index.js","../node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../node_modules/tiny-warning/dist/tiny-warning.esm.js","../node_modules/react-pdf/dist/esm/DocumentContext.js","../node_modules/react-pdf/dist/esm/Message.js","../node_modules/react-pdf/dist/esm/LinkService.js","../node_modules/react-pdf/dist/esm/PasswordResponses.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/react-pdf/dist/esm/shared/utils.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/react-pdf/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-pdf/dist/esm/shared/propTypes.js","../node_modules/react-pdf/dist/esm/Document.js","../node_modules/react-pdf/dist/esm/OutlineContext.js","../node_modules/react-pdf/dist/esm/Ref.js","../node_modules/react-pdf/dist/esm/OutlineItem.js","../node_modules/react-pdf/dist/esm/Outline.js","../node_modules/merge-refs/dist/esm/index.js","../node_modules/react-pdf/dist/esm/PageContext.js","../node_modules/react-pdf/dist/esm/Page/PageCanvas.js","../node_modules/react-pdf/dist/esm/Page/PageSVG.js","../node_modules/react-pdf/dist/esm/Page/TextLayerItem.js","../node_modules/react-pdf/dist/esm/Page/TextLayer.js","../node_modules/react-pdf/dist/esm/Page/AnnotationLayer.js","../node_modules/react-pdf/dist/esm/Page.js","../node_modules/react-pdf/dist/esm/entry.js","../node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js","../node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js","../node_modules/@use-gesture/core/dist/use-gesture-core.esm.js","../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js","component/PDF.js","App.js","reportWebVitals.js","index.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  isString,\n  removeNullCharacters,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\n\nconst DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nconst PixelsPerInch = {\n  CSS: 96.0,\n  PDF: 72.0,\n\n  /** @type {number} */\n  get PDF_TO_CSS_UNITS() {\n    return shadow(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n  },\n};\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type) {\n    super(msg, \"RenderingCancelledException\");\n    this.type = type;\n  }\n}\n\nconst LinkTarget = {\n  NONE: 0, // Default value.\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4,\n};\n\n/**\n * @typedef ExternalLinkParameters\n * @typedef {Object} ExternalLinkParameters\n * @property {string} url - An absolute URL.\n * @property {LinkTarget} [target] - The link target. The default value is\n *   `LinkTarget.NONE`.\n * @property {string} [rel] - The link relationship. The default value is\n *   `DEFAULT_LINK_REL`.\n * @property {boolean} [enabled] - Whether the link should be enabled. The\n *   default value is true.\n */\n\n/**\n * Adds various attributes (href, title, target, rel) to hyperlinks.\n * @param {HTMLAnchorElement} link - The link element.\n * @param {ExternalLinkParameters} params\n */\nfunction addLinkAttributes(link, { url, target, rel, enabled = true } = {}) {\n  assert(\n    url && typeof url === \"string\",\n    'addLinkAttributes: A valid \"url\" parameter must provided.'\n  );\n\n  const urlNullRemoved = removeNullCharacters(url);\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = `Disabled: ${urlNullRemoved}`;\n    link.onclick = () => {\n      return false;\n    };\n  }\n\n  let targetStr = \"\"; // LinkTarget.NONE\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n  link.target = targetStr;\n\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @returns {string}\n */\nfunction getFilenameFromUrl(url) {\n  const anchor = url.indexOf(\"#\");\n  const query = url.indexOf(\"?\");\n  const end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length\n  );\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const time of this.times) {\n      const name = time.name;\n      if (name.length > longest) {\n        longest = name.length;\n      }\n    }\n    for (const time of this.times) {\n      const duration = time.end - time.start;\n      outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || !isString(input)) {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    if (!pdfDateStringRegex) {\n      pdfDateStringRegex = new RegExp(\n        \"^D:\" + // Prefix (required)\n          \"(\\\\d{4})\" + // Year (required)\n          \"(\\\\d{2})?\" + // Month (optional)\n          \"(\\\\d{2})?\" + // Day (optional)\n          \"(\\\\d{2})?\" + // Hour (optional)\n          \"(\\\\d{2})?\" + // Minute (optional)\n          \"(\\\\d{2})?\" + // Second (optional)\n          \"([Z|+|-])?\" + // Universal time relation (optional)\n          \"(\\\\d{2})?\" + // Offset hour (optional)\n          \"'?\" + // Splitting apostrophe (optional)\n          \"(\\\\d{2})?\" + // Offset minute (optional)\n          \"'?\" // Trailing apostrophe (optional)\n      );\n    }\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nexport {\n  addLinkAttributes,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  StatTimer,\n};\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1STANDARD: \"TYPE1STANDARD\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  /** @deprecated unused */\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  signatures: \"signatures\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontBuildPath: \"errorFontBuildPath\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n  errorContentSubStream: \"errorContentSubStream\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots && dots.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch (ex) {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      prop in obj,\n      `shadow: Property \"${prop && prop.toString()}\" not found in object.`\n    );\n  }\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nconst NullCharactersRegExp = /\\x00+/g;\nconst InvisibleCharactersRegExp = /[\\x01-\\x1F]/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str, replaceInvisible = false) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  if (replaceInvisible) {\n    str = str.replace(InvisibleCharactersRegExp, \" \");\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n\n  // From https://github.com/adobe-webplatform/Snap.svg/blob/b365287722a72526000ac4bfcf0ce4cac2faa015/src/path.js#L852\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n    const tvalues = [],\n      bounds = [[], []];\n    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n    for (let i = 0; i < 2; ++i) {\n      if (i === 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) {\n        continue;\n      }\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    let j = tvalues.length,\n      mt;\n    const jlen = j;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      bounds[0][j] =\n        mt * mt * mt * x0 +\n        3 * mt * mt * t * x1 +\n        3 * mt * t * t * x2 +\n        t * t * t * x3;\n      bounds[1][j] =\n        mt * mt * mt * y0 +\n        3 * mt * mt * t * y1 +\n        3 * mt * t * t * y2 +\n        t * t * t * y3;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n\n    return [\n      Math.min(...bounds[0]),\n      Math.min(...bounds[1]),\n      Math.max(...bounds[0]),\n      Math.max(...bounds[1]),\n    ];\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(\n      String.fromCharCode((char >> 8) & 0xff),\n      String.fromCharCode(char & 0xff)\n    );\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationMode,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for `globalThis` in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1, Node.js<12.0.0\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    globalThis.DOMMatrix = require(\"dommatrix/dist/dommatrix.js\");\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1, Node.js<12.0.0\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13, Node.js<12.9.0\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"CHROME\")) {\n      // Slightly reduce the size of the Chromium-extension, given\n      // that `ReadableStream` has been supported since Chrome 43.\n      return;\n    }\n    if (globalThis.ReadableStream || !isNodeJS) {\n      return;\n    }\n    globalThis.ReadableStream =\n      require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","require('../modules/es.global-this');\n\nmodule.exports = require('../internals/global');\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\n\n// `globalThis` object\n// https://tc39.es/ecma262/#sec-globalthis\n$({ global: true }, {\n  globalThis: global\n});\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n  options.name        - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n","var DESCRIPTORS = require('../internals/descriptors');\nvar call = require('../internals/function-call');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar hasOwn = require('../internals/has-own-property');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n","var fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var call = Function.prototype.call;\n\nmodule.exports = call.bind ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n","'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar Object = global.Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split(it, '') : Object(it);\n} : Object;\n","var FunctionPrototype = Function.prototype;\nvar bind = FunctionPrototype.bind;\nvar call = FunctionPrototype.call;\nvar callBind = bind && bind.bind(call);\n\nmodule.exports = bind ? function (fn) {\n  return fn && callBind(call, fn);\n} : function (fn) {\n  return fn && function () {\n    return call.apply(fn, arguments);\n  };\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n","var global = require('../internals/global');\n\nvar TypeError = global.TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n","var global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TypeError = global.TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n","var isCallable = require('../internals/is-callable');\n\nmodule.exports = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n","// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nmodule.exports = function (argument) {\n  return typeof argument == 'function';\n};\n","var global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Object = global.Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));\n};\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (argument) {\n  return isCallable(argument) ? argument : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n","/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/engine-v8-version');\nvar fails = require('../internals/fails');\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol();\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar Deno = global.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var aCallable = require('../internals/a-callable');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return func == null ? undefined : aCallable(func);\n};\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar TypeError = global.TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw TypeError(tryToString(argument) + ' is not a function');\n};\n","var global = require('../internals/global');\n\nvar String = global.String;\n\nmodule.exports = function (argument) {\n  try {\n    return String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n","var global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar TypeError = global.TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar symbolFor = Symbol && Symbol['for'];\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\n    var description = 'Symbol.' + name;\n    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {\n      WellKnownSymbolsStore[name] = Symbol[name];\n    } else if (USE_SYMBOL_AS_UID && symbolFor) {\n      WellKnownSymbolsStore[name] = symbolFor(description);\n    } else {\n      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);\n    }\n  } return WellKnownSymbolsStore[name];\n};\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.19.3',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\n});\n","module.exports = false;\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var global = require('../internals/global');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(global, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n","var global = require('../internals/global');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar Object = global.Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar TypeError = global.TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar String = global.String;\nvar TypeError = global.TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw TypeError(String(argument) + ' is not an object');\n};\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar setGlobal = require('../internals/set-global');\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\nvar CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  var name = options && options.name !== undefined ? options.name : key;\n  var state;\n  if (isCallable(value)) {\n    if (String(name).slice(0, 7) === 'Symbol(') {\n      name = '[' + String(name).replace(/^Symbol\\(([^)]*)\\)/, '$1') + ']';\n    }\n    if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n      createNonEnumerableProperty(value, 'name', name);\n    }\n    state = enforceInternalState(value);\n    if (!state.source) {\n      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');\n    }\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return isCallable(this) && getInternalState(this).source || inspectSource(this);\n});\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = global.TypeError;\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  var wmget = uncurryThis(store.get);\n  var wmhas = uncurryThis(store.has);\n  var wmset = uncurryThis(store.set);\n  set = function (it, metadata) {\n    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    wmset(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","module.exports = {};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n","var hasOwn = require('../internals/has-own-property');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n","var getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- safe\n  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);\n};\n","var toLength = require('../internals/to-length');\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n","var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n","var fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","/*!\n* DOMMatrix v0.0.24 (https://thednp.github.io/DOMMatrix/)\n* Copyright 2021 © thednp\n* Licensed under MIT (https://github.com/thednp/DOMMatrix/blob/master/LICENSE)\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CSSMatrix = factory());\n})(this, (function () { 'use strict';\n\n  // DOMMatrix Static methods\n  // * `fromFloat64Array` and `fromFloat32Array are not implemented;\n  // * `fromArray` is a more simple implementation, should also accept Float[32/64]Array;\n  // * `fromMatrix` load values from another CSSMatrix/DOMMatrix instance or JSON object;\n  // * `fromString` parses and loads values from any valid CSS transform string (TransformList).\n\n  /**\n   * Creates a new mutable `CSSMatrix` instance given an array of 16/6 floating point values.\n   * This static method invalidates arrays that contain non-number elements.\n   *\n   * If the array has six values, the result is a 2D matrix; if the array has 16 values,\n   * the result is a 3D matrix. Otherwise, a TypeError exception is thrown.\n   *\n   * @param {number[]} array an `Array` to feed values from.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function fromArray(array) {\n    var m = new CSSMatrix();\n    var a = Array.from(array);\n\n    if (!a.every(function (n) { return !Number.isNaN(n); })) {\n      throw TypeError((\"CSSMatrix: \\\"\" + array + \"\\\" must only have numbers.\"));\n    }\n    if (a.length === 16) {\n      var m11 = a[0];\n      var m12 = a[1];\n      var m13 = a[2];\n      var m14 = a[3];\n      var m21 = a[4];\n      var m22 = a[5];\n      var m23 = a[6];\n      var m24 = a[7];\n      var m31 = a[8];\n      var m32 = a[9];\n      var m33 = a[10];\n      var m34 = a[11];\n      var m41 = a[12];\n      var m42 = a[13];\n      var m43 = a[14];\n      var m44 = a[15];\n\n      m.m11 = m11;\n      m.a = m11;\n\n      m.m21 = m21;\n      m.c = m21;\n\n      m.m31 = m31;\n\n      m.m41 = m41;\n      m.e = m41;\n\n      m.m12 = m12;\n      m.b = m12;\n\n      m.m22 = m22;\n      m.d = m22;\n\n      m.m32 = m32;\n\n      m.m42 = m42;\n      m.f = m42;\n\n      m.m13 = m13;\n      m.m23 = m23;\n      m.m33 = m33;\n      m.m43 = m43;\n      m.m14 = m14;\n      m.m24 = m24;\n      m.m34 = m34;\n      m.m44 = m44;\n    } else if (a.length === 6) {\n      var M11 = a[0];\n      var M12 = a[1];\n      var M21 = a[2];\n      var M22 = a[3];\n      var M41 = a[4];\n      var M42 = a[5];\n\n      m.m11 = M11;\n      m.a = M11;\n\n      m.m12 = M12;\n      m.b = M12;\n\n      m.m21 = M21;\n      m.c = M21;\n\n      m.m22 = M22;\n      m.d = M22;\n\n      m.m41 = M41;\n      m.e = M41;\n\n      m.m42 = M42;\n      m.f = M42;\n    } else {\n      throw new TypeError('CSSMatrix: expecting an Array of 6/16 values.');\n    }\n    return m;\n  }\n\n  /**\n   * Creates a new mutable `CSSMatrix` instance given an existing matrix or a\n   * `DOMMatrix` instance which provides the values for its properties.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSMatrix.JSONMatrix} m the source matrix to feed values from.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function fromMatrix(m) {\n    var keys = Object.keys(new CSSMatrix());\n    if (typeof m === 'object' && keys.every(function (k) { return k in m; })) {\n      return fromArray(\n        [m.m11, m.m12, m.m13, m.m14,\n          m.m21, m.m22, m.m23, m.m24,\n          m.m31, m.m32, m.m33, m.m34,\n          m.m41, m.m42, m.m43, m.m44]\n      );\n    }\n    throw TypeError((\"CSSMatrix: \\\"\" + m + \"\\\" is not a DOMMatrix / CSSMatrix / JSON compatible object.\"));\n  }\n\n  /**\n   * Creates a new mutable `CSSMatrix` given any valid CSS transform string,\n   * or what we call `TransformList`:\n   *\n   * * `matrix(a, b, c, d, e, f)` - valid matrix() transform function\n   * * `matrix3d(m11, m12, m13, ...m44)` - valid matrix3d() transform function\n   * * `translate(tx, ty) rotateX(alpha)` - any valid transform function(s)\n   *\n   * @copyright thednp © 2021\n   *\n   * @param {string} source valid CSS transform string syntax.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function fromString(source) {\n    if (typeof source !== 'string') {\n      throw TypeError((\"CSSMatrix: \\\"\" + source + \"\\\" is not a string.\"));\n    }\n    var str = String(source).replace(/\\s/g, '');\n    var m = new CSSMatrix();\n    var invalidStringError = \"CSSMatrix: invalid transform string \\\"\" + source + \"\\\"\";\n\n    // const px = ['perspective'];\n    // const length = ['translate', 'translate3d', 'translateX', 'translateY', 'translateZ'];\n    // const deg = ['rotate', 'rotate3d', 'rotateX', 'rotateY', 'rotateZ', 'skew', 'skewX', 'skewY'];\n    // const abs = ['scale', 'scale3d', 'matrix', 'matrix3d'];\n    // const transformFunctions = px.concat(length, deg, abs);\n\n    str.split(')').filter(function (f) { return f; }).forEach(function (tf) {\n      var ref = tf.split('(');\n      var prop = ref[0];\n      var value = ref[1];\n\n      // invalidate empty string\n      if (!value) { throw TypeError(invalidStringError); }\n\n      var components = value.split(',')\n        .map(function (n) { return (n.includes('rad') ? parseFloat(n) * (180 / Math.PI) : parseFloat(n)); });\n\n      var x = components[0];\n      var y = components[1];\n      var z = components[2];\n      var a = components[3];\n      var xyz = [x, y, z];\n      var xyza = [x, y, z, a];\n\n      // single number value expected\n      if (prop === 'perspective' && x && [y, z].every(function (n) { return n === undefined; })) {\n        m.m34 = -1 / x;\n      // 6/16 number values expected\n      } else if (prop.includes('matrix') && [6, 16].includes(components.length)\n        && components.every(function (n) { return !Number.isNaN(+n); })) {\n        var values = components.map(function (n) { return (Math.abs(n) < 1e-6 ? 0 : n); });\n        m = m.multiply(fromArray(values));\n      // 3 values expected\n      } else if (prop === 'translate3d' && xyz.every(function (n) { return !Number.isNaN(+n); })) {\n        m = m.translate(x, y, z);\n      // single/double number value(s) expected\n      } else if (prop === 'translate' && x && z === undefined) {\n        m = m.translate(x, y || 0, 0);\n      // all 4 values expected\n      } else if (prop === 'rotate3d' && xyza.every(function (n) { return !Number.isNaN(+n); }) && a) {\n        m = m.rotateAxisAngle(x, y, z, a);\n      // single value expected\n      } else if (prop === 'rotate' && x && [y, z].every(function (n) { return n === undefined; })) {\n        m = m.rotate(0, 0, x);\n      // 4 values expected\n      } else if (prop === 'scale3d' && xyz.every(function (n) { return !Number.isNaN(+n); }) && xyz.some(function (n) { return n !== 1; })) {\n        m = m.scale(x, y, z);\n      // single value expected\n      } else if (prop === 'scale' && !Number.isNaN(x) && x !== 1 && z === undefined) {\n        var nosy = Number.isNaN(+y);\n        var sy = nosy ? x : y;\n        m = m.scale(x, sy, 1);\n      // single/double value expected\n      } else if (prop === 'skew' && x && z === undefined) {\n        m = m.skewX(x);\n        m = y ? m.skewY(y) : m;\n      } else if (/[XYZ]/.test(prop) && x && [y, z].every(function (n) { return n === undefined; }) // a single value expected\n        && ['translate', 'rotate', 'scale', 'skew'].some(function (p) { return prop.includes(p); })) {\n        if (['skewX', 'skewY'].includes(prop)) {\n          // @ts-ignore unfortunately\n          m = m[prop](x);\n        } else {\n          var fn = prop.replace(/[XYZ]/, '');\n          var axis = prop.replace(fn, '');\n          var idx = ['X', 'Y', 'Z'].indexOf(axis);\n          var axeValues = [\n            idx === 0 ? x : 0,\n            idx === 1 ? x : 0,\n            idx === 2 ? x : 0];\n          // @ts-ignore unfortunately\n          m = m[fn].apply(m, axeValues);\n        }\n      } else {\n        throw TypeError(invalidStringError);\n      }\n    });\n\n    return m;\n  }\n\n  // Transform Functions\n  // https://www.w3.org/TR/css-transforms-1/#transform-functions\n\n  /**\n   * Creates a new `CSSMatrix` for the translation matrix and returns it.\n   * This method is equivalent to the CSS `translate3d()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d\n   *\n   * @param {number} x the `x-axis` position.\n   * @param {number} y the `y-axis` position.\n   * @param {number} z the `z-axis` position.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Translate(x, y, z) {\n    var m = new CSSMatrix();\n    m.m41 = x;\n    m.e = x;\n    m.m42 = y;\n    m.f = y;\n    m.m43 = z;\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the rotation matrix and returns it.\n   *\n   * http://en.wikipedia.org/wiki/Rotation_matrix\n   *\n   * @param {number} rx the `x-axis` rotation.\n   * @param {number} ry the `y-axis` rotation.\n   * @param {number} rz the `z-axis` rotation.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Rotate(rx, ry, rz) {\n    var m = new CSSMatrix();\n    var degToRad = Math.PI / 180;\n    var radX = rx * degToRad;\n    var radY = ry * degToRad;\n    var radZ = rz * degToRad;\n\n    // minus sin() because of right-handed system\n    var cosx = Math.cos(radX);\n    var sinx = -Math.sin(radX);\n    var cosy = Math.cos(radY);\n    var siny = -Math.sin(radY);\n    var cosz = Math.cos(radZ);\n    var sinz = -Math.sin(radZ);\n\n    var m11 = cosy * cosz;\n    var m12 = -cosy * sinz;\n\n    m.m11 = m11;\n    m.a = m11;\n\n    m.m12 = m12;\n    m.b = m12;\n\n    m.m13 = siny;\n\n    var m21 = sinx * siny * cosz + cosx * sinz;\n    m.m21 = m21;\n    m.c = m21;\n\n    var m22 = cosx * cosz - sinx * siny * sinz;\n    m.m22 = m22;\n    m.d = m22;\n\n    m.m23 = -sinx * cosy;\n\n    m.m31 = sinx * sinz - cosx * siny * cosz;\n    m.m32 = sinx * cosz + cosx * siny * sinz;\n    m.m33 = cosx * cosy;\n\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the rotation matrix and returns it.\n   * This method is equivalent to the CSS `rotate3d()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\n   *\n   * @param {number} x the `x-axis` vector length.\n   * @param {number} y the `y-axis` vector length.\n   * @param {number} z the `z-axis` vector length.\n   * @param {number} alpha the value in degrees of the rotation.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function RotateAxisAngle(x, y, z, alpha) {\n    var m = new CSSMatrix();\n    var angle = alpha * (Math.PI / 360);\n    var sinA = Math.sin(angle);\n    var cosA = Math.cos(angle);\n    var sinA2 = sinA * sinA;\n    var length = Math.sqrt(x * x + y * y + z * z);\n    var X = x;\n    var Y = y;\n    var Z = z;\n\n    if (length === 0) {\n      // bad vector length, use something reasonable\n      X = 0;\n      Y = 0;\n      Z = 1;\n    } else {\n      X /= length;\n      Y /= length;\n      Z /= length;\n    }\n\n    var x2 = X * X;\n    var y2 = Y * Y;\n    var z2 = Z * Z;\n\n    var m11 = 1 - 2 * (y2 + z2) * sinA2;\n    m.m11 = m11;\n    m.a = m11;\n\n    var m12 = 2 * (X * Y * sinA2 + Z * sinA * cosA);\n    m.m12 = m12;\n    m.b = m12;\n\n    m.m13 = 2 * (X * Z * sinA2 - Y * sinA * cosA);\n\n    var m21 = 2 * (Y * X * sinA2 - Z * sinA * cosA);\n    m.m21 = m21;\n    m.c = m21;\n\n    var m22 = 1 - 2 * (z2 + x2) * sinA2;\n    m.m22 = m22;\n    m.d = m22;\n\n    m.m23 = 2 * (Y * Z * sinA2 + X * sinA * cosA);\n    m.m31 = 2 * (Z * X * sinA2 + Y * sinA * cosA);\n    m.m32 = 2 * (Z * Y * sinA2 - X * sinA * cosA);\n    m.m33 = 1 - 2 * (x2 + y2) * sinA2;\n\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the scale matrix and returns it.\n   * This method is equivalent to the CSS `scale3d()` function, except it doesn't\n   * accept {x, y, z} transform origin parameters.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d\n   *\n   * @param {number} x the `x-axis` scale.\n   * @param {number} y the `y-axis` scale.\n   * @param {number} z the `z-axis` scale.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Scale(x, y, z) {\n    var m = new CSSMatrix();\n    m.m11 = x;\n    m.a = x;\n\n    m.m22 = y;\n    m.d = y;\n\n    m.m33 = z;\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the shear of the `x-axis` rotation matrix and\n   * returns it. This method is equivalent to the CSS `skewX()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewX\n   *\n   * @param {number} angle the angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function SkewX(angle) {\n    var m = new CSSMatrix();\n    var radA = (angle * Math.PI) / 180;\n    var t = Math.tan(radA);\n    m.m21 = t;\n    m.c = t;\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` for the shear of the `y-axis` rotation matrix and\n   * returns it. This method is equivalent to the CSS `skewY()` function.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewY\n   *\n   * @param {number} angle the angle in degrees.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function SkewY(angle) {\n    var m = new CSSMatrix();\n    var radA = (angle * Math.PI) / 180;\n    var t = Math.tan(radA);\n    m.m12 = t;\n    m.b = t;\n    return m;\n  }\n\n  /**\n   * Creates a new `CSSMatrix` resulted from the multiplication of two matrixes\n   * and returns it. Both matrixes are not changed.\n   *\n   * @param {CSSMatrix} m1 the first matrix.\n   * @param {CSSMatrix} m2 the second matrix.\n   * @return {CSSMatrix} the resulted matrix.\n   */\n  function Multiply(m1, m2) {\n    var m11 = m2.m11 * m1.m11 + m2.m12 * m1.m21 + m2.m13 * m1.m31 + m2.m14 * m1.m41;\n    var m12 = m2.m11 * m1.m12 + m2.m12 * m1.m22 + m2.m13 * m1.m32 + m2.m14 * m1.m42;\n    var m13 = m2.m11 * m1.m13 + m2.m12 * m1.m23 + m2.m13 * m1.m33 + m2.m14 * m1.m43;\n    var m14 = m2.m11 * m1.m14 + m2.m12 * m1.m24 + m2.m13 * m1.m34 + m2.m14 * m1.m44;\n\n    var m21 = m2.m21 * m1.m11 + m2.m22 * m1.m21 + m2.m23 * m1.m31 + m2.m24 * m1.m41;\n    var m22 = m2.m21 * m1.m12 + m2.m22 * m1.m22 + m2.m23 * m1.m32 + m2.m24 * m1.m42;\n    var m23 = m2.m21 * m1.m13 + m2.m22 * m1.m23 + m2.m23 * m1.m33 + m2.m24 * m1.m43;\n    var m24 = m2.m21 * m1.m14 + m2.m22 * m1.m24 + m2.m23 * m1.m34 + m2.m24 * m1.m44;\n\n    var m31 = m2.m31 * m1.m11 + m2.m32 * m1.m21 + m2.m33 * m1.m31 + m2.m34 * m1.m41;\n    var m32 = m2.m31 * m1.m12 + m2.m32 * m1.m22 + m2.m33 * m1.m32 + m2.m34 * m1.m42;\n    var m33 = m2.m31 * m1.m13 + m2.m32 * m1.m23 + m2.m33 * m1.m33 + m2.m34 * m1.m43;\n    var m34 = m2.m31 * m1.m14 + m2.m32 * m1.m24 + m2.m33 * m1.m34 + m2.m34 * m1.m44;\n\n    var m41 = m2.m41 * m1.m11 + m2.m42 * m1.m21 + m2.m43 * m1.m31 + m2.m44 * m1.m41;\n    var m42 = m2.m41 * m1.m12 + m2.m42 * m1.m22 + m2.m43 * m1.m32 + m2.m44 * m1.m42;\n    var m43 = m2.m41 * m1.m13 + m2.m42 * m1.m23 + m2.m43 * m1.m33 + m2.m44 * m1.m43;\n    var m44 = m2.m41 * m1.m14 + m2.m42 * m1.m24 + m2.m43 * m1.m34 + m2.m44 * m1.m44;\n\n    return fromArray(\n      [m11, m12, m13, m14,\n        m21, m22, m23, m24,\n        m31, m32, m33, m34,\n        m41, m42, m43, m44]\n    );\n  }\n\n  /**\n   * Creates and returns a new `DOMMatrix` compatible instance\n   * with equivalent instance.\n   * @class CSSMatrix\n   *\n   * @author thednp <https://github.com/thednp/DOMMatrix/>\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix\n   */\n\n  var CSSMatrix = function CSSMatrix() {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var m = this;\n    // array 6\n    m.a = 1; m.b = 0;\n    m.c = 0; m.d = 1;\n    m.e = 0; m.f = 0;\n    // array 16\n    m.m11 = 1; m.m12 = 0; m.m13 = 0; m.m14 = 0;\n    m.m21 = 0; m.m22 = 1; m.m23 = 0; m.m24 = 0;\n    m.m31 = 0; m.m32 = 0; m.m33 = 1; m.m34 = 0;\n    m.m41 = 0; m.m42 = 0; m.m43 = 0; m.m44 = 1;\n\n    if (args && args.length) {\n      var ARGS = [16, 6].some(function (l) { return l === args.length; }) ? args : args[0];\n\n      return m.setMatrixValue(ARGS);\n    }\n    return m;\n  };\n\n  var prototypeAccessors = { isIdentity: { configurable: true },is2D: { configurable: true } };\n\n  /**\n   * Sets a new `Boolean` flag value for `this.isIdentity` matrix property.\n   *\n   * @param {boolean} value sets a new flag for this property\n   */\n  prototypeAccessors.isIdentity.set = function (value) {\n    this.isIdentity = value;\n  };\n\n  /**\n   * A `Boolean` whose value is `true` if the matrix is the identity matrix. The identity\n   * matrix is one in which every value is 0 except those on the main diagonal from top-left\n   * to bottom-right corner (in other words, where the offsets in each direction are equal).\n   *\n   * @return {boolean} the current property value\n   */\n  prototypeAccessors.isIdentity.get = function () {\n    var m = this;\n    return (m.m11 === 1 && m.m12 === 0 && m.m13 === 0 && m.m14 === 0\n            && m.m21 === 0 && m.m22 === 1 && m.m23 === 0 && m.m24 === 0\n            && m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0\n            && m.m41 === 0 && m.m42 === 0 && m.m43 === 0 && m.m44 === 1);\n  };\n\n  /**\n   * A `Boolean` flag whose value is `true` if the matrix was initialized as a 2D matrix\n   * and `false` if the matrix is 3D.\n   *\n   * @return {boolean} the current property value\n   */\n  prototypeAccessors.is2D.get = function () {\n    var m = this;\n    return (m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m43 === 0 && m.m44 === 1);\n  };\n\n  /**\n   * Sets a new `Boolean` flag value for `this.is2D` matrix property.\n   *\n   * @param {boolean} value sets a new flag for this property\n   */\n  prototypeAccessors.is2D.set = function (value) {\n    this.is2D = value;\n  };\n\n  /**\n   * The `setMatrixValue` method replaces the existing matrix with one computed\n   * in the browser. EG: `matrix(1,0.25,-0.25,1,0,0)`\n   *\n   * The method accepts any *Array* values, the result of\n   * `DOMMatrix` instance method `toFloat64Array()` / `toFloat32Array()` calls\n   *or `CSSMatrix` instance method `toArray()`.\n   *\n   * This method expects valid *matrix()* / *matrix3d()* string values, as well\n   * as other transform functions like *translateX(10px)*.\n   *\n   * @param {string | number[] | CSSMatrix | DOMMatrix} source\n   * @return {CSSMatrix} the matrix instance\n   */\n  CSSMatrix.prototype.setMatrixValue = function setMatrixValue (source) {\n    var m = this;\n\n    // [Arguments list | Array] come here\n    if ([Array, Float64Array, Float32Array].some(function (a) { return source instanceof a; })) {\n      return fromArray(source);\n    }\n    // CSS transform string source - TransformList\n    if (typeof source === 'string' && source.length && source !== 'none') {\n      return fromString(source);\n    }\n    // new CSSMatrix(CSSMatrix | DOMMatrix | JSON)\n    if (typeof source === 'object') {\n      return fromMatrix(source);\n    }\n    return m;\n  };\n\n  /**\n   * Returns an *Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` property.\n   *\n   * @return {number[]} an *Array* representation of the matrix\n   */\n  CSSMatrix.prototype.toArray = function toArray () {\n    var m = this;\n    var pow = (Math.pow( 10, 6 ));\n    var result;\n\n    if (m.is2D) {\n      result = [m.a, m.b, m.c, m.d, m.e, m.f];\n    } else {\n      result = [m.m11, m.m12, m.m13, m.m14,\n        m.m21, m.m22, m.m23, m.m24,\n        m.m31, m.m32, m.m33, m.m34,\n        m.m41, m.m42, m.m43, m.m44];\n    }\n    // clean up the numbers\n    // eslint-disable-next-line -- no-bitwise\n    return result.map(function (n) { return (Math.abs(n) < 1e-6 ? 0 : ((n * pow) >> 0) / pow); });\n  };\n\n  /**\n   * Creates and returns a string representation of the matrix in `CSS` matrix syntax,\n   * using the appropriate `CSS` matrix notation.\n   *\n   * matrix3d *matrix3d(m11, m12, m13, m14, m21, ...)*\n   * matrix *matrix(a, b, c, d, e, f)*\n   *\n   * @return {string} a string representation of the matrix\n   */\n  CSSMatrix.prototype.toString = function toString () {\n    var m = this;\n    var values = m.toArray();\n    var type = m.is2D ? 'matrix' : 'matrix3d';\n    return (type + \"(\" + values + \")\");\n  };\n\n  /**\n   * Returns a JSON representation of the `CSSMatrix` instance, a standard *Object*\n   * that includes `{a,b,c,d,e,f}` and `{m11,m12,m13,..m44}` properties as well\n   * as the `is2D` & `isIdentity` properties.\n   *\n   * The result can also be used as a second parameter for the `fromMatrix` static method\n   * to load values into another matrix instance.\n   *\n   * @return {CSSMatrix.JSONMatrix} an *Object* with all matrix values.\n   */\n  CSSMatrix.prototype.toJSON = function toJSON () {\n    var m = this;\n    var is2D = m.is2D;\n      var isIdentity = m.isIdentity;\n    return Object.assign({}, m, {is2D: is2D, isIdentity: isIdentity});\n  };\n\n  /**\n   * The Multiply method returns a new CSSMatrix which is the result of this\n   * matrix multiplied by the passed matrix, with the passed matrix to the right.\n   * This matrix is not modified.\n   *\n   * @param {CSSMatrix | DOMMatrix | CSSMatrix.JSONMatrix} m2 CSSMatrix\n   * @return {CSSMatrix} The resulted matrix.\n   */\n  CSSMatrix.prototype.multiply = function multiply (m2) {\n    return Multiply(this, m2);\n  };\n\n  /**\n   * The translate method returns a new matrix which is this matrix post\n   * multiplied by a translation matrix containing the passed values. If the z\n   * component is undefined, a 0 value is used in its place. This matrix is not\n   * modified.\n   *\n   * @param {number} x X component of the translation value.\n   * @param {number=} y Y component of the translation value.\n   * @param {number=} z Z component of the translation value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.translate = function translate (x, y, z) {\n    var X = x;\n    var Y = y;\n    var Z = z;\n    if (Z === undefined) { Z = 0; }\n    if (Y === undefined) { Y = 0; }\n    return Multiply(this, Translate(X, Y, Z));\n  };\n\n  /**\n   * The scale method returns a new matrix which is this matrix post multiplied by\n   * a scale matrix containing the passed values. If the z component is undefined,\n   * a 1 value is used in its place. If the y component is undefined, the x\n   * component value is used in its place. This matrix is not modified.\n   *\n   * @param {number} x The X component of the scale value.\n   * @param {number=} y The Y component of the scale value.\n   * @param {number=} z The Z component of the scale value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.scale = function scale (x, y, z) {\n    var X = x;\n    var Y = y;\n    var Z = z;\n    if (Y === undefined) { Y = x; }\n    if (Z === undefined) { Z = 1; } // Z must be 1 if undefined\n\n    return Multiply(this, Scale(X, Y, Z));\n  };\n\n  /**\n   * The rotate method returns a new matrix which is this matrix post multiplied\n   * by each of 3 rotation matrices about the major axes, first X, then Y, then Z.\n   * If the y and z components are undefined, the x value is used to rotate the\n   * object about the z axis, as though the vector (0,0,x) were passed. All\n   * rotation values are in degrees. This matrix is not modified.\n   *\n   * @param {number} rx The X component of the rotation, or Z if Y and Z are null.\n   * @param {number=} ry The (optional) Y component of the rotation value.\n   * @param {number=} rz The (optional) Z component of the rotation value.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.rotate = function rotate (rx, ry, rz) {\n    var RX = rx;\n    var RY = ry;\n    var RZ = rz;\n    if (RY === undefined) { RY = 0; }\n    if (RZ === undefined) { RZ = RX; RX = 0; }\n    return Multiply(this, Rotate(RX, RY, RZ));\n  };\n\n  /**\n   * The rotateAxisAngle method returns a new matrix which is this matrix post\n   * multiplied by a rotation matrix with the given axis and `angle`. The right-hand\n   * rule is used to determine the direction of rotation. All rotation values are\n   * in degrees. This matrix is not modified.\n   *\n   * @param {number} x The X component of the axis vector.\n   * @param {number} y The Y component of the axis vector.\n   * @param {number} z The Z component of the axis vector.\n   * @param {number} angle The angle of rotation about the axis vector, in degrees.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.rotateAxisAngle = function rotateAxisAngle (x, y, z, angle) {\n    if ([x, y, z, angle].some(function (n) { return Number.isNaN(n); })) {\n      throw new TypeError('CSSMatrix: expecting 4 values');\n    }\n    return Multiply(this, RotateAxisAngle(x, y, z, angle));\n  };\n\n  /**\n   * Specifies a skew transformation along the `x-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param {number} angle The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.skewX = function skewX (angle) {\n    return Multiply(this, SkewX(angle));\n  };\n\n  /**\n   * Specifies a skew transformation along the `y-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param {number} angle The angle amount in degrees to skew.\n   * @return {CSSMatrix} The resulted matrix\n   */\n  CSSMatrix.prototype.skewY = function skewY (angle) {\n    return Multiply(this, SkewY(angle));\n  };\n\n  /**\n   * Transforms a specified point using the matrix, returning a new\n   * Tuple *Object* comprising of the transformed point.\n   * Neither the matrix nor the original point are altered.\n   *\n   * The method is equivalent with `transformPoint()` method\n   * of the `DOMMatrix` constructor.\n   *\n   * @copyright thednp © 2021\n   *\n   * @param {CSSMatrix.PointTuple | DOMPoint} v Tuple or DOMPoint\n   * @return {CSSMatrix.PointTuple} the resulting Tuple\n   */\n  CSSMatrix.prototype.transformPoint = function transformPoint (v) {\n    var M = this;\n    var m = Translate(v.x, v.y, v.z);\n\n    m.m44 = v.w || 1;\n    m = M.multiply(m);\n\n    return {\n      x: m.m41,\n      y: m.m42,\n      z: m.m43,\n      w: m.m44,\n    };\n  };\n\n  /**\n   * Transforms a specified vector using the matrix, returning a new\n   * {x,y,z,w} Tuple *Object* comprising the transformed vector.\n   * Neither the matrix nor the original vector are altered.\n   *\n   * @param {CSSMatrix.PointTuple} t Tuple with `{x,y,z,w}` components\n   * @return {CSSMatrix.PointTuple} the resulting Tuple\n   */\n  CSSMatrix.prototype.transform = function transform (t) {\n    var m = this;\n    var x = m.m11 * t.x + m.m12 * t.y + m.m13 * t.z + m.m14 * t.w;\n    var y = m.m21 * t.x + m.m22 * t.y + m.m23 * t.z + m.m24 * t.w;\n    var z = m.m31 * t.x + m.m32 * t.y + m.m33 * t.z + m.m34 * t.w;\n    var w = m.m41 * t.x + m.m42 * t.y + m.m43 * t.z + m.m44 * t.w;\n\n    return {\n      x: x / w,\n      y: y / w,\n      z: z / w,\n      w: w,\n    };\n  };\n\n  Object.defineProperties( CSSMatrix.prototype, prototypeAccessors );\n\n  // Add Transform Functions to CSSMatrix object\n  // without creating a TypeScript namespace.\n  Object.assign(CSSMatrix, {\n    Translate: Translate,\n    Rotate: Rotate,\n    RotateAxisAngle: RotateAxisAngle,\n    Scale: Scale,\n    SkewX: SkewX,\n    SkewY: SkewY,\n    Multiply: Multiply,\n    fromArray: fromArray,\n    fromMatrix: fromMatrix,\n    fromString: fromString,\n  });\n\n  var version = \"0.0.24\";\n\n  // @ts-ignore\n\n  /**\n   * A global namespace for library version.\n   * @type {string}\n   */\n  var Version = version;\n\n  Object.assign(CSSMatrix, { Version: Version });\n\n  return CSSMatrix;\n\n}));\n","require('../../modules/es.array.iterator');\nrequire('../../modules/es.object.from-entries');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.fromEntries;\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar create = require('../internals/object-create');\nvar definePropertyModule = require('../internals/object-define-property');\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n","/* global ActiveXObject -- old IE, WSH */\nvar anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var props = toIndexedObject(Properties);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);\n  return O;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","module.exports = {};\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar IS_PURE = require('../internals/is-pure');\nvar FunctionName = require('../internals/function-name');\nvar isCallable = require('../internals/is-callable');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {\n          redefine(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {\n      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);\n    } else {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });\n  }\n  Iterators[NAME] = defaultIterator;\n\n  return methods;\n};\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar create = require('../internals/object-create');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype[ITERATOR].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\nelse if (IS_PURE) IteratorPrototype = create(IteratorPrototype);\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable(IteratorPrototype[ITERATOR])) {\n  redefine(IteratorPrototype, ITERATOR, function () {\n    return this;\n  });\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","var global = require('../internals/global');\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar Object = global.Object;\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof Object ? ObjectPrototype : null;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","var defineProperty = require('../internals/object-define-property').f;\nvar hasOwn = require('../internals/has-own-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC) {\n  if (it && !hasOwn(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n","/* eslint-disable no-proto -- safe */\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar String = global.String;\nvar TypeError = global.TypeError;\n\nmodule.exports = function (argument) {\n  if (typeof argument == 'object' || isCallable(argument)) return argument;\n  throw TypeError(\"Can't set \" + String(argument) + ' as a prototype');\n};\n","var $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar createProperty = require('../internals/create-property');\n\n// `Object.fromEntries` method\n// https://github.com/tc39/proposal-object-from-entries\n$({ target: 'Object', stat: true }, {\n  fromEntries: function fromEntries(iterable) {\n    var obj = {};\n    iterate(iterable, function (k, v) {\n      createProperty(obj, k, v);\n    }, { AS_ENTRIES: true });\n    return obj;\n  }\n});\n","var global = require('../internals/global');\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar iteratorClose = require('../internals/iterator-close');\n\nvar TypeError = global.TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nmodule.exports = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator(iterable, iterFn);\n  }\n\n  next = iterator.next;\n  while (!(step = call(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : bind ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n","var global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar TypeError = global.TypeError;\n\nmodule.exports = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;\n  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));\n  throw TypeError(tryToString(argument) + ' is not iterable');\n};\n","var classof = require('../internals/classof');\nvar getMethod = require('../internals/get-method');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return getMethod(it, ITERATOR)\n    || getMethod(it, '@@iterator')\n    || Iterators[classof(it)];\n};\n","var global = require('../internals/global');\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar Object = global.Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","var call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar getMethod = require('../internals/get-method');\n\nmodule.exports = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject(iterator);\n  try {\n    innerResult = getMethod(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject(innerResult);\n  return value;\n};\n","'use strict';\nvar toPropertyKey = require('../internals/to-property-key');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPropertyKey(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","var global = require('../internals/global');\n\nmodule.exports = global;\n","require('../../modules/es.aggregate-error');\nrequire('../../modules/es.array.iterator');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.any');\nrequire('../../modules/es.promise.finally');\nrequire('../../modules/es.string.iterator');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar create = require('../internals/object-create');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar clearErrorStack = require('../internals/clear-error-stack');\nvar installErrorCause = require('../internals/install-error-cause');\nvar iterate = require('../internals/iterate');\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar ERROR_STACK_INSTALLABLE = require('../internals/error-stack-installable');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar Error = global.Error;\nvar push = [].push;\n\nvar $AggregateError = function AggregateError(errors, message /* , options */) {\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);\n  var that;\n  if (setPrototypeOf) {\n    that = setPrototypeOf(new Error(undefined), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);\n  } else {\n    that = isInstance ? this : create(AggregateErrorPrototype);\n    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');\n  }\n  createNonEnumerableProperty(that, 'message', normalizeStringArgument(message, ''));\n  if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));\n  installErrorCause(that, options);\n  var errorsArray = [];\n  iterate(errors, push, { that: errorsArray });\n  createNonEnumerableProperty(that, 'errors', errorsArray);\n  return that;\n};\n\nif (setPrototypeOf) setPrototypeOf($AggregateError, Error);\nelse copyConstructorProperties($AggregateError, Error);\n\nvar AggregateErrorPrototype = $AggregateError.prototype = create(Error.prototype, {\n  constructor: createPropertyDescriptor(1, $AggregateError),\n  message: createPropertyDescriptor(1, ''),\n  name: createPropertyDescriptor(1, 'AggregateError')\n});\n\n// `AggregateError` constructor\n// https://tc39.es/ecma262/#sec-aggregate-error-constructor\n$({ global: true }, {\n  AggregateError: $AggregateError\n});\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar arraySlice = require('../internals/array-slice-simple');\n\nvar replace = uncurryThis(''.replace);\nvar split = uncurryThis(''.split);\nvar join = uncurryThis([].join);\n\nvar TEST = (function (arg) { return String(Error(arg).stack); })('zxcasd');\nvar V8_OR_CHAKRA_STACK_ENTRY = /\\n\\s*at [^:]*:[^\\n]*/;\nvar IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);\nvar IS_FIREFOX_OR_SAFARI_STACK = /@[^\\n]*\\n/.test(TEST) && !/zxcasd/.test(TEST);\n\nmodule.exports = function (stack, dropEntries) {\n  if (typeof stack != 'string') return stack;\n  if (IS_V8_OR_CHAKRA_STACK) {\n    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');\n  } else if (IS_FIREFOX_OR_SAFARI_STACK) {\n    return join(arraySlice(split(stack, '\\n'), dropEntries), '\\n');\n  } return stack;\n};\n","var global = require('../internals/global');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar createProperty = require('../internals/create-property');\n\nvar Array = global.Array;\nvar max = Math.max;\n\nmodule.exports = function (O, start, end) {\n  var length = lengthOfArrayLike(O);\n  var k = toAbsoluteIndex(start, length);\n  var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n  var result = Array(max(fin - k, 0));\n  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);\n  result.length = n;\n  return result;\n};\n","var isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\n// `InstallErrorCause` abstract operation\n// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause\nmodule.exports = function (O, options) {\n  if (isObject(options) && 'cause' in options) {\n    createNonEnumerableProperty(O, 'cause', options.cause);\n  }\n};\n","var toString = require('../internals/to-string');\n\nmodule.exports = function (argument, $default) {\n  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);\n};\n","var global = require('../internals/global');\nvar classof = require('../internals/classof');\n\nvar String = global.String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\n  return String(argument);\n};\n","var fails = require('../internals/fails');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = !fails(function () {\n  var error = Error('a');\n  if (!('stack' in error)) return true;\n  // eslint-disable-next-line es/no-object-defineproperty -- safe\n  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));\n  return error.stack !== 7;\n});\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar redefine = require('../internals/redefine');\nvar toString = require('../internals/object-to-string');\n\n// `Object.prototype.toString` method\n// https://tc39.es/ecma262/#sec-object.prototype.tostring\nif (!TO_STRING_TAG_SUPPORT) {\n  redefine(Object.prototype, 'toString', toString, { unsafe: true });\n}\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar call = require('../internals/function-call');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar anInstance = require('../internals/an-instance');\nvar inspectSource = require('../internals/inspect-source');\nvar iterate = require('../internals/iterate');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar promiseResolve = require('../internals/promise-resolve');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar InternalStateModule = require('../internals/internal-state');\nvar isForced = require('../internals/is-forced');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_BROWSER = require('../internals/engine-is-browser');\nvar IS_NODE = require('../internals/engine-is-node');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\n\nvar getInternalState = InternalStateModule.getterFor(PROMISE);\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar NativePromisePrototype = NativePromise && NativePromise.prototype;\nvar PromiseConstructor = NativePromise;\nvar PromisePrototype = NativePromisePrototype;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\n\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar NATIVE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar SUBCLASSING = false;\n\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\nvar FORCED = isForced(PROMISE, function () {\n  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);\n  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);\n  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n  // We can't detect it synchronously, so just check versions\n  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;\n  // We need Promise#finally in the pure version for preventing prototype pollution\n  if (IS_PURE && !PromisePrototype['finally']) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = new PromiseConstructor(function (resolve) { resolve(1); });\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES] = FakePromise;\n  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;\n  if (!SUBCLASSING) return true;\n  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;\n});\n\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });\n});\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && isCallable(then = it.then) ? then : false;\n};\n\nvar notify = function (state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  var chain = state.reactions;\n  microtask(function () {\n    var value = state.value;\n    var ok = state.state == FULFILLED;\n    var index = 0;\n    // variable length - can't use forEach\n    while (chain.length > index) {\n      var reaction = chain[index++];\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (state.rejection === UNHANDLED) onHandleUnhandled(state);\n            state.rejection = HANDLED;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // can throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            call(then, result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (error) {\n        if (domain && !exited) domain.exit();\n        reject(error);\n      }\n    }\n    state.reactions = [];\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (state) {\n  call(task, global, function () {\n    var promise = state.facade;\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (state) {\n  call(task, global, function () {\n    var promise = state.facade;\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, state, unwrap) {\n  return function (value) {\n    fn(state, value, unwrap);\n  };\n};\n\nvar internalReject = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(state, true);\n};\n\nvar internalResolve = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (state.facade === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          call(then, value,\n            bind(internalResolve, wrapper, state),\n            bind(internalReject, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(state, false);\n    }\n  } catch (error) {\n    internalReject({ done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromisePrototype);\n    aCallable(executor);\n    call(Internal, this);\n    var state = getInternalState(this);\n    try {\n      executor(bind(internalResolve, state), bind(internalReject, state));\n    } catch (error) {\n      internalReject(state, error);\n    }\n  };\n  PromisePrototype = PromiseConstructor.prototype;\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: [],\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n  Internal.prototype = redefineAll(PromisePrototype, {\n    // `Promise.prototype.then` method\n    // https://tc39.es/ecma262/#sec-promise.prototype.then\n    then: function then(onFulfilled, onRejected) {\n      var state = getInternalPromiseState(this);\n      var reactions = state.reactions;\n      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n      reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;\n      reaction.fail = isCallable(onRejected) && onRejected;\n      reaction.domain = IS_NODE ? process.domain : undefined;\n      state.parent = true;\n      reactions[reactions.length] = reaction;\n      if (state.state != PENDING) notify(state, false);\n      return reaction.promise;\n    },\n    // `Promise.prototype.catch` method\n    // https://tc39.es/ecma262/#sec-promise.prototype.catch\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, state);\n    this.reject = bind(internalReject, state);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {\n    nativeThen = NativePromisePrototype.then;\n\n    if (!SUBCLASSING) {\n      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs\n      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {\n        var that = this;\n        return new PromiseConstructor(function (resolve, reject) {\n          call(nativeThen, that, resolve, reject);\n        }).then(onFulfilled, onRejected);\n      // https://github.com/zloirock/core-js/issues/640\n      }, { unsafe: true });\n\n      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`\n      redefine(NativePromisePrototype, 'catch', PromisePrototype['catch'], { unsafe: true });\n    }\n\n    // make `.constructor === Promise` work for native promise-based APIs\n    try {\n      delete NativePromisePrototype.constructor;\n    } catch (error) { /* empty */ }\n\n    // make `instanceof Promise` work for native promise-based APIs\n    if (setPrototypeOf) {\n      setPrototypeOf(NativePromisePrototype, PromisePrototype);\n    }\n  }\n}\n\n$({ global: true, wrap: true, forced: FORCED }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n\nPromiseWrapper = getBuiltIn(PROMISE);\n\n// statics\n$({ target: PROMISE, stat: true, forced: FORCED }, {\n  // `Promise.reject` method\n  // https://tc39.es/ecma262/#sec-promise.reject\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    call(capability.reject, undefined, r);\n    return capability.promise;\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {\n  // `Promise.resolve` method\n  // https://tc39.es/ecma262/#sec-promise.resolve\n  resolve: function resolve(x) {\n    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {\n  // `Promise.all` method\n  // https://tc39.es/ecma262/#sec-promise.all\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call($promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  },\n  // `Promise.race` method\n  // https://tc39.es/ecma262/#sec-promise.race\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable(C.resolve);\n      iterate(iterable, function (promise) {\n        call($promiseResolve, C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","var global = require('../internals/global');\n\nmodule.exports = global.Promise;\n","var redefine = require('../internals/redefine');\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) redefine(target, key, src[key], options);\n  return target;\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar definePropertyModule = require('../internals/object-define-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule.f;\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineProperty(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n","var global = require('../internals/global');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar TypeError = global.TypeError;\n\nmodule.exports = function (it, Prototype) {\n  if (isPrototypeOf(Prototype, it)) return it;\n  throw TypeError('Incorrect invocation');\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n","var anObject = require('../internals/an-object');\nvar aConstructor = require('../internals/a-constructor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);\n};\n","var global = require('../internals/global');\nvar isConstructor = require('../internals/is-constructor');\nvar tryToString = require('../internals/try-to-string');\n\nvar TypeError = global.TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nmodule.exports = function (argument) {\n  if (isConstructor(argument)) return argument;\n  throw TypeError(tryToString(argument) + ' is not a constructor');\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar classof = require('../internals/classof');\nvar getBuiltIn = require('../internals/get-built-in');\nvar inspectSource = require('../internals/inspect-source');\n\nvar noop = function () { /* empty */ };\nvar empty = [];\nvar construct = getBuiltIn('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec = uncurryThis(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.exec(noop);\n\nvar isConstructorModern = function (argument) {\n  if (!isCallable(argument)) return false;\n  try {\n    construct(noop, empty, argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function (argument) {\n  if (!isCallable(argument)) return false;\n  switch (classof(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n    // we can't check .prototype since constructors produced by .bind haven't it\n  } return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));\n};\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nmodule.exports = !construct || fails(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n","var global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar bind = require('../internals/function-bind-context');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar fails = require('../internals/fails');\nvar html = require('../internals/html');\nvar arraySlice = require('../internals/array-slice');\nvar createElement = require('../internals/document-create-element');\nvar IS_IOS = require('../internals/engine-is-ios');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar Dispatch = global.Dispatch;\nvar Function = global.Function;\nvar MessageChannel = global.MessageChannel;\nvar String = global.String;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar location, defer, channel, port;\n\ntry {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  location = global.location;\n} catch (error) { /* empty */ }\n\nvar run = function (id) {\n  if (hasOwn(queue, id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global.postMessage(String(id), location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(fn) {\n    var args = arraySlice(arguments, 1);\n    queue[++counter] = function () {\n      apply(isCallable(fn) ? fn : Function(fn), undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE) {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    isCallable(global.postMessage) &&\n    !global.importScripts &&\n    location && location.protocol !== 'file:' &&\n    !fails(post)\n  ) {\n    defer = post;\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","var FunctionPrototype = Function.prototype;\nvar apply = FunctionPrototype.apply;\nvar bind = FunctionPrototype.bind;\nvar call = FunctionPrototype.call;\n\n// eslint-disable-next-line es/no-reflect -- safe\nmodule.exports = typeof Reflect == 'object' && Reflect.apply || (bind ? call.bind(apply) : function () {\n  return call.apply(apply, arguments);\n});\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis([].slice);\n","var userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);\n","var classof = require('../internals/classof-raw');\nvar global = require('../internals/global');\n\nmodule.exports = classof(global.process) == 'process';\n","var global = require('../internals/global');\nvar bind = require('../internals/function-bind-context');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar macrotask = require('../internals/task').set;\nvar IS_IOS = require('../internals/engine-is-ios');\nvar IS_IOS_PEBBLE = require('../internals/engine-is-ios-pebble');\nvar IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar document = global.document;\nvar process = global.process;\nvar Promise = global.Promise;\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898\n  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    // workaround of WebKit ~ iOS Safari 10.1 bug\n    promise.constructor = Promise;\n    then = bind(promise.then, promise);\n    notify = function () {\n      then(flush);\n    };\n  // Node.js without promises\n  } else if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    // strange IE + webpack dev server bug - use .bind(global)\n    macrotask = bind(macrotask, global);\n    notify = function () {\n      macrotask(flush);\n    };\n  }\n}\n\nmodule.exports = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify();\n  } last = task;\n};\n","var userAgent = require('../internals/engine-user-agent');\nvar global = require('../internals/global');\n\nmodule.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;\n","var userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /web0s(?!.*chrome)/i.test(userAgent);\n","var anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","'use strict';\nvar aCallable = require('../internals/a-callable');\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aCallable(resolve);\n  this.reject = aCallable(reject);\n};\n\n// `NewPromiseCapability` abstract operation\n// https://tc39.es/ecma262/#sec-newpromisecapability\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","var global = require('../internals/global');\n\nmodule.exports = function (a, b) {\n  var console = global.console;\n  if (console && console.error) {\n    arguments.length == 1 ? console.error(a) : console.error(a, b);\n  }\n};\n","module.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n","module.exports = typeof window == 'object';\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://tc39.es/ecma262/#sec-promise.allsettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (error) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: error };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar aCallable = require('../internals/a-callable');\nvar getBuiltIn = require('../internals/get-built-in');\nvar call = require('../internals/function-call');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\nvar PROMISE_ANY_ERROR = 'No one promise resolved';\n\n// `Promise.any` method\n// https://tc39.es/ecma262/#sec-promise.any\n$({ target: 'Promise', stat: true }, {\n  any: function any(iterable) {\n    var C = this;\n    var AggregateError = getBuiltIn('AggregateError');\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var errors = [];\n      var counter = 0;\n      var remaining = 1;\n      var alreadyResolved = false;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyRejected = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyResolved = true;\n          resolve(value);\n        }, function (error) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyRejected = true;\n          errors[index] = error;\n          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));\n        });\n      });\n      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.es/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = isCallable(onFinally);\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`\nif (!IS_PURE && isCallable(NativePromise)) {\n  var method = getBuiltIn('Promise').prototype['finally'];\n  if (NativePromise.prototype['finally'] !== method) {\n    redefine(NativePromise.prototype, 'finally', method, { unsafe: true });\n  }\n}\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar toString = require('../internals/to-string');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: toString(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringSlice = uncurryThis(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString(requireObjectCoercible($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","/**\n * web-streams-polyfill v3.2.0\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n}(this, (function (exports) { 'use strict';\n\n    /// <reference lib=\"es2015.symbol\" />\n    var SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n        Symbol :\n        function (description) { return \"Symbol(\" + description + \")\"; };\n\n    /// <reference lib=\"dom\" />\n    function noop() {\n        return undefined;\n    }\n    function getGlobals() {\n        if (typeof self !== 'undefined') {\n            return self;\n        }\n        else if (typeof window !== 'undefined') {\n            return window;\n        }\n        else if (typeof global !== 'undefined') {\n            return global;\n        }\n        return undefined;\n    }\n    var globals = getGlobals();\n\n    function typeIsObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    var rethrowAssertionErrorRejection = noop;\n\n    var originalPromise = Promise;\n    var originalPromiseThen = Promise.prototype.then;\n    var originalPromiseResolve = Promise.resolve.bind(originalPromise);\n    var originalPromiseReject = Promise.reject.bind(originalPromise);\n    function newPromise(executor) {\n        return new originalPromise(executor);\n    }\n    function promiseResolvedWith(value) {\n        return originalPromiseResolve(value);\n    }\n    function promiseRejectedWith(reason) {\n        return originalPromiseReject(reason);\n    }\n    function PerformPromiseThen(promise, onFulfilled, onRejected) {\n        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n        // approximation.\n        return originalPromiseThen.call(promise, onFulfilled, onRejected);\n    }\n    function uponPromise(promise, onFulfilled, onRejected) {\n        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n    }\n    function uponFulfillment(promise, onFulfilled) {\n        uponPromise(promise, onFulfilled);\n    }\n    function uponRejection(promise, onRejected) {\n        uponPromise(promise, undefined, onRejected);\n    }\n    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n    }\n    function setPromiseIsHandledToTrue(promise) {\n        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n    }\n    var queueMicrotask = (function () {\n        var globalQueueMicrotask = globals && globals.queueMicrotask;\n        if (typeof globalQueueMicrotask === 'function') {\n            return globalQueueMicrotask;\n        }\n        var resolvedPromise = promiseResolvedWith(undefined);\n        return function (fn) { return PerformPromiseThen(resolvedPromise, fn); };\n    })();\n    function reflectCall(F, V, args) {\n        if (typeof F !== 'function') {\n            throw new TypeError('Argument is not a function');\n        }\n        return Function.prototype.apply.call(F, V, args);\n    }\n    function promiseCall(F, V, args) {\n        try {\n            return promiseResolvedWith(reflectCall(F, V, args));\n        }\n        catch (value) {\n            return promiseRejectedWith(value);\n        }\n    }\n\n    // Original from Chromium\n    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n    var QUEUE_MAX_ARRAY_SIZE = 16384;\n    /**\n     * Simple queue structure.\n     *\n     * Avoids scalability issues with using a packed array directly by using\n     * multiple arrays in a linked list and keeping the array size bounded.\n     */\n    var SimpleQueue = /** @class */ (function () {\n        function SimpleQueue() {\n            this._cursor = 0;\n            this._size = 0;\n            // _front and _back are always defined.\n            this._front = {\n                _elements: [],\n                _next: undefined\n            };\n            this._back = this._front;\n            // The cursor is used to avoid calling Array.shift().\n            // It contains the index of the front element of the array inside the\n            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n            this._cursor = 0;\n            // When there is only one node, size === elements.length - cursor.\n            this._size = 0;\n        }\n        Object.defineProperty(SimpleQueue.prototype, \"length\", {\n            get: function () {\n                return this._size;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        // For exception safety, this method is structured in order:\n        // 1. Read state\n        // 2. Calculate required state mutations\n        // 3. Perform state mutations\n        SimpleQueue.prototype.push = function (element) {\n            var oldBack = this._back;\n            var newBack = oldBack;\n            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                newBack = {\n                    _elements: [],\n                    _next: undefined\n                };\n            }\n            // push() is the mutation most likely to throw an exception, so it\n            // goes first.\n            oldBack._elements.push(element);\n            if (newBack !== oldBack) {\n                this._back = newBack;\n                oldBack._next = newBack;\n            }\n            ++this._size;\n        };\n        // Like push(), shift() follows the read -> calculate -> mutate pattern for\n        // exception safety.\n        SimpleQueue.prototype.shift = function () { // must not be called on an empty queue\n            var oldFront = this._front;\n            var newFront = oldFront;\n            var oldCursor = this._cursor;\n            var newCursor = oldCursor + 1;\n            var elements = oldFront._elements;\n            var element = elements[oldCursor];\n            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                newFront = oldFront._next;\n                newCursor = 0;\n            }\n            // No mutations before this point.\n            --this._size;\n            this._cursor = newCursor;\n            if (oldFront !== newFront) {\n                this._front = newFront;\n            }\n            // Permit shifted element to be garbage collected.\n            elements[oldCursor] = undefined;\n            return element;\n        };\n        // The tricky thing about forEach() is that it can be called\n        // re-entrantly. The queue may be mutated inside the callback. It is easy to\n        // see that push() within the callback has no negative effects since the end\n        // of the queue is checked for on every iteration. If shift() is called\n        // repeatedly within the callback then the next iteration may return an\n        // element that has been removed. In this case the callback will be called\n        // with undefined values until we either \"catch up\" with elements that still\n        // exist or reach the back of the queue.\n        SimpleQueue.prototype.forEach = function (callback) {\n            var i = this._cursor;\n            var node = this._front;\n            var elements = node._elements;\n            while (i !== elements.length || node._next !== undefined) {\n                if (i === elements.length) {\n                    node = node._next;\n                    elements = node._elements;\n                    i = 0;\n                    if (elements.length === 0) {\n                        break;\n                    }\n                }\n                callback(elements[i]);\n                ++i;\n            }\n        };\n        // Return the element that would be returned if shift() was called now,\n        // without modifying the queue.\n        SimpleQueue.prototype.peek = function () { // must not be called on an empty queue\n            var front = this._front;\n            var cursor = this._cursor;\n            return front._elements[cursor];\n        };\n        return SimpleQueue;\n    }());\n\n    function ReadableStreamReaderGenericInitialize(reader, stream) {\n        reader._ownerReadableStream = stream;\n        stream._reader = reader;\n        if (stream._state === 'readable') {\n            defaultReaderClosedPromiseInitialize(reader);\n        }\n        else if (stream._state === 'closed') {\n            defaultReaderClosedPromiseInitializeAsResolved(reader);\n        }\n        else {\n            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n        }\n    }\n    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n    // check.\n    function ReadableStreamReaderGenericCancel(reader, reason) {\n        var stream = reader._ownerReadableStream;\n        return ReadableStreamCancel(stream, reason);\n    }\n    function ReadableStreamReaderGenericRelease(reader) {\n        if (reader._ownerReadableStream._state === 'readable') {\n            defaultReaderClosedPromiseReject(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n        }\n        else {\n            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n        }\n        reader._ownerReadableStream._reader = undefined;\n        reader._ownerReadableStream = undefined;\n    }\n    // Helper functions for the readers.\n    function readerLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released reader');\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderClosedPromiseInitialize(reader) {\n        reader._closedPromise = newPromise(function (resolve, reject) {\n            reader._closedPromise_resolve = resolve;\n            reader._closedPromise_reject = reject;\n        });\n    }\n    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseReject(reader, reason);\n    }\n    function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseResolve(reader);\n    }\n    function defaultReaderClosedPromiseReject(reader, reason) {\n        if (reader._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(reader._closedPromise);\n        reader._closedPromise_reject(reason);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n    function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n    }\n    function defaultReaderClosedPromiseResolve(reader) {\n        if (reader._closedPromise_resolve === undefined) {\n            return;\n        }\n        reader._closedPromise_resolve(undefined);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n\n    var AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n    var ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n    var CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n    var PullSteps = SymbolPolyfill('[[PullSteps]]');\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n    var NumberIsFinite = Number.isFinite || function (x) {\n        return typeof x === 'number' && isFinite(x);\n    };\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n    var MathTrunc = Math.trunc || function (v) {\n        return v < 0 ? Math.ceil(v) : Math.floor(v);\n    };\n\n    // https://heycam.github.io/webidl/#idl-dictionaries\n    function isDictionary(x) {\n        return typeof x === 'object' || typeof x === 'function';\n    }\n    function assertDictionary(obj, context) {\n        if (obj !== undefined && !isDictionary(obj)) {\n            throw new TypeError(context + \" is not an object.\");\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-callback-functions\n    function assertFunction(x, context) {\n        if (typeof x !== 'function') {\n            throw new TypeError(context + \" is not a function.\");\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-object\n    function isObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    function assertObject(x, context) {\n        if (!isObject(x)) {\n            throw new TypeError(context + \" is not an object.\");\n        }\n    }\n    function assertRequiredArgument(x, position, context) {\n        if (x === undefined) {\n            throw new TypeError(\"Parameter \" + position + \" is required in '\" + context + \"'.\");\n        }\n    }\n    function assertRequiredField(x, field, context) {\n        if (x === undefined) {\n            throw new TypeError(field + \" is required in '\" + context + \"'.\");\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-unrestricted-double\n    function convertUnrestrictedDouble(value) {\n        return Number(value);\n    }\n    function censorNegativeZero(x) {\n        return x === 0 ? 0 : x;\n    }\n    function integerPart(x) {\n        return censorNegativeZero(MathTrunc(x));\n    }\n    // https://heycam.github.io/webidl/#idl-unsigned-long-long\n    function convertUnsignedLongLongWithEnforceRange(value, context) {\n        var lowerBound = 0;\n        var upperBound = Number.MAX_SAFE_INTEGER;\n        var x = Number(value);\n        x = censorNegativeZero(x);\n        if (!NumberIsFinite(x)) {\n            throw new TypeError(context + \" is not a finite number\");\n        }\n        x = integerPart(x);\n        if (x < lowerBound || x > upperBound) {\n            throw new TypeError(context + \" is outside the accepted range of \" + lowerBound + \" to \" + upperBound + \", inclusive\");\n        }\n        if (!NumberIsFinite(x) || x === 0) {\n            return 0;\n        }\n        // TODO Use BigInt if supported?\n        // let xBigInt = BigInt(integerPart(x));\n        // xBigInt = BigInt.asUintN(64, xBigInt);\n        // return Number(xBigInt);\n        return x;\n    }\n\n    function assertReadableStream(x, context) {\n        if (!IsReadableStream(x)) {\n            throw new TypeError(context + \" is not a ReadableStream.\");\n        }\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamDefaultReader(stream) {\n        return new ReadableStreamDefaultReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadRequest(stream, readRequest) {\n        stream._reader._readRequests.push(readRequest);\n    }\n    function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n        var reader = stream._reader;\n        var readRequest = reader._readRequests.shift();\n        if (done) {\n            readRequest._closeSteps();\n        }\n        else {\n            readRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadRequests(stream) {\n        return stream._reader._readRequests.length;\n    }\n    function ReadableStreamHasDefaultReader(stream) {\n        var reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamDefaultReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A default reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    var ReadableStreamDefaultReader = /** @class */ (function () {\n        function ReadableStreamDefaultReader(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readRequests = new SimpleQueue();\n        }\n        Object.defineProperty(ReadableStreamDefaultReader.prototype, \"closed\", {\n            /**\n             * Returns a promise that will be fulfilled when the stream becomes closed,\n             * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n             */\n            get: function () {\n                if (!IsReadableStreamDefaultReader(this)) {\n                    return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n                }\n                return this._closedPromise;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        ReadableStreamDefaultReader.prototype.cancel = function (reason) {\n            if (reason === void 0) { reason = undefined; }\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        };\n        /**\n         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n         *\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n         */\n        ReadableStreamDefaultReader.prototype.read = function () {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            var resolvePromise;\n            var rejectPromise;\n            var promise = newPromise(function (resolve, reject) {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            var readRequest = {\n                _chunkSteps: function (chunk) { return resolvePromise({ value: chunk, done: false }); },\n                _closeSteps: function () { return resolvePromise({ value: undefined, done: true }); },\n                _errorSteps: function (e) { return rejectPromise(e); }\n            };\n            ReadableStreamDefaultReaderRead(this, readRequest);\n            return promise;\n        };\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        ReadableStreamDefaultReader.prototype.releaseLock = function () {\n            if (!IsReadableStreamDefaultReader(this)) {\n                throw defaultReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            if (this._readRequests.length > 0) {\n                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n            }\n            ReadableStreamReaderGenericRelease(this);\n        };\n        return ReadableStreamDefaultReader;\n    }());\n    Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamDefaultReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamDefaultReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultReader;\n    }\n    function ReadableStreamDefaultReaderRead(reader, readRequest) {\n        var stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            readRequest._closeSteps();\n        }\n        else if (stream._state === 'errored') {\n            readRequest._errorSteps(stream._storedError);\n        }\n        else {\n            stream._readableStreamController[PullSteps](readRequest);\n        }\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderBrandCheckException(name) {\n        return new TypeError(\"ReadableStreamDefaultReader.prototype.\" + name + \" can only be used on a ReadableStreamDefaultReader\");\n    }\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    var _a;\n    var AsyncIteratorPrototype;\n    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n        // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n        // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n        AsyncIteratorPrototype = (_a = {},\n            // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n            // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n            _a[SymbolPolyfill.asyncIterator] = function () {\n                return this;\n            },\n            _a);\n        Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, { enumerable: false });\n    }\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    var ReadableStreamAsyncIteratorImpl = /** @class */ (function () {\n        function ReadableStreamAsyncIteratorImpl(reader, preventCancel) {\n            this._ongoingPromise = undefined;\n            this._isFinished = false;\n            this._reader = reader;\n            this._preventCancel = preventCancel;\n        }\n        ReadableStreamAsyncIteratorImpl.prototype.next = function () {\n            var _this = this;\n            var nextSteps = function () { return _this._nextSteps(); };\n            this._ongoingPromise = this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n                nextSteps();\n            return this._ongoingPromise;\n        };\n        ReadableStreamAsyncIteratorImpl.prototype.return = function (value) {\n            var _this = this;\n            var returnSteps = function () { return _this._returnSteps(value); };\n            return this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n                returnSteps();\n        };\n        ReadableStreamAsyncIteratorImpl.prototype._nextSteps = function () {\n            var _this = this;\n            if (this._isFinished) {\n                return Promise.resolve({ value: undefined, done: true });\n            }\n            var reader = this._reader;\n            if (reader._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('iterate'));\n            }\n            var resolvePromise;\n            var rejectPromise;\n            var promise = newPromise(function (resolve, reject) {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            var readRequest = {\n                _chunkSteps: function (chunk) {\n                    _this._ongoingPromise = undefined;\n                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                    // FIXME Is this a bug in the specification, or in the test?\n                    queueMicrotask(function () { return resolvePromise({ value: chunk, done: false }); });\n                },\n                _closeSteps: function () {\n                    _this._ongoingPromise = undefined;\n                    _this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    resolvePromise({ value: undefined, done: true });\n                },\n                _errorSteps: function (reason) {\n                    _this._ongoingPromise = undefined;\n                    _this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    rejectPromise(reason);\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promise;\n        };\n        ReadableStreamAsyncIteratorImpl.prototype._returnSteps = function (value) {\n            if (this._isFinished) {\n                return Promise.resolve({ value: value, done: true });\n            }\n            this._isFinished = true;\n            var reader = this._reader;\n            if (reader._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('finish iterating'));\n            }\n            if (!this._preventCancel) {\n                var result = ReadableStreamReaderGenericCancel(reader, value);\n                ReadableStreamReaderGenericRelease(reader);\n                return transformPromiseWith(result, function () { return ({ value: value, done: true }); });\n            }\n            ReadableStreamReaderGenericRelease(reader);\n            return promiseResolvedWith({ value: value, done: true });\n        };\n        return ReadableStreamAsyncIteratorImpl;\n    }());\n    var ReadableStreamAsyncIteratorPrototype = {\n        next: function () {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n            }\n            return this._asyncIteratorImpl.next();\n        },\n        return: function (value) {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n            }\n            return this._asyncIteratorImpl.return(value);\n        }\n    };\n    if (AsyncIteratorPrototype !== undefined) {\n        Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n    }\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n        var reader = AcquireReadableStreamDefaultReader(stream);\n        var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n        iterator._asyncIteratorImpl = impl;\n        return iterator;\n    }\n    function IsReadableStreamAsyncIterator(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n            return false;\n        }\n        try {\n            // noinspection SuspiciousTypeOfGuard\n            return x._asyncIteratorImpl instanceof\n                ReadableStreamAsyncIteratorImpl;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamAsyncIteratorBrandCheckException(name) {\n        return new TypeError(\"ReadableStreamAsyncIterator.\" + name + \" can only be used on a ReadableSteamAsyncIterator\");\n    }\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n    var NumberIsNaN = Number.isNaN || function (x) {\n        // eslint-disable-next-line no-self-compare\n        return x !== x;\n    };\n\n    function CreateArrayFromList(elements) {\n        // We use arrays to represent lists, so this is basically a no-op.\n        // Do a slice though just in case we happen to depend on the unique-ness.\n        return elements.slice();\n    }\n    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n    }\n    // Not implemented correctly\n    function TransferArrayBuffer(O) {\n        return O;\n    }\n    // Not implemented correctly\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    function IsDetachedBuffer(O) {\n        return false;\n    }\n    function ArrayBufferSlice(buffer, begin, end) {\n        // ArrayBuffer.prototype.slice is not available on IE10\n        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n        if (buffer.slice) {\n            return buffer.slice(begin, end);\n        }\n        var length = end - begin;\n        var slice = new ArrayBuffer(length);\n        CopyDataBlockBytes(slice, 0, buffer, begin, length);\n        return slice;\n    }\n\n    function IsNonNegativeNumber(v) {\n        if (typeof v !== 'number') {\n            return false;\n        }\n        if (NumberIsNaN(v)) {\n            return false;\n        }\n        if (v < 0) {\n            return false;\n        }\n        return true;\n    }\n    function CloneAsUint8Array(O) {\n        var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n        return new Uint8Array(buffer);\n    }\n\n    function DequeueValue(container) {\n        var pair = container._queue.shift();\n        container._queueTotalSize -= pair.size;\n        if (container._queueTotalSize < 0) {\n            container._queueTotalSize = 0;\n        }\n        return pair.value;\n    }\n    function EnqueueValueWithSize(container, value, size) {\n        if (!IsNonNegativeNumber(size) || size === Infinity) {\n            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n        }\n        container._queue.push({ value: value, size: size });\n        container._queueTotalSize += size;\n    }\n    function PeekQueueValue(container) {\n        var pair = container._queue.peek();\n        return pair.value;\n    }\n    function ResetQueue(container) {\n        container._queue = new SimpleQueue();\n        container._queueTotalSize = 0;\n    }\n\n    /**\n     * A pull-into request in a {@link ReadableByteStreamController}.\n     *\n     * @public\n     */\n    var ReadableStreamBYOBRequest = /** @class */ (function () {\n        function ReadableStreamBYOBRequest() {\n            throw new TypeError('Illegal constructor');\n        }\n        Object.defineProperty(ReadableStreamBYOBRequest.prototype, \"view\", {\n            /**\n             * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n             */\n            get: function () {\n                if (!IsReadableStreamBYOBRequest(this)) {\n                    throw byobRequestBrandCheckException('view');\n                }\n                return this._view;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        ReadableStreamBYOBRequest.prototype.respond = function (bytesWritten) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respond');\n            }\n            assertRequiredArgument(bytesWritten, 1, 'respond');\n            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(this._view.buffer)) ;\n            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n        };\n        ReadableStreamBYOBRequest.prototype.respondWithNewView = function (view) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respondWithNewView');\n            }\n            assertRequiredArgument(view, 1, 'respondWithNewView');\n            if (!ArrayBuffer.isView(view)) {\n                throw new TypeError('You can only respond with array buffer views');\n            }\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(view.buffer)) ;\n            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n        };\n        return ReadableStreamBYOBRequest;\n    }());\n    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n        respond: { enumerable: true },\n        respondWithNewView: { enumerable: true },\n        view: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamBYOBRequest',\n            configurable: true\n        });\n    }\n    /**\n     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n     *\n     * @public\n     */\n    var ReadableByteStreamController = /** @class */ (function () {\n        function ReadableByteStreamController() {\n            throw new TypeError('Illegal constructor');\n        }\n        Object.defineProperty(ReadableByteStreamController.prototype, \"byobRequest\", {\n            /**\n             * Returns the current BYOB pull request, or `null` if there isn't one.\n             */\n            get: function () {\n                if (!IsReadableByteStreamController(this)) {\n                    throw byteStreamControllerBrandCheckException('byobRequest');\n                }\n                return ReadableByteStreamControllerGetBYOBRequest(this);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(ReadableByteStreamController.prototype, \"desiredSize\", {\n            /**\n             * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n             * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n             */\n            get: function () {\n                if (!IsReadableByteStreamController(this)) {\n                    throw byteStreamControllerBrandCheckException('desiredSize');\n                }\n                return ReadableByteStreamControllerGetDesiredSize(this);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        ReadableByteStreamController.prototype.close = function () {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('close');\n            }\n            if (this._closeRequested) {\n                throw new TypeError('The stream has already been closed; do not close it again!');\n            }\n            var state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be closed\");\n            }\n            ReadableByteStreamControllerClose(this);\n        };\n        ReadableByteStreamController.prototype.enqueue = function (chunk) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('enqueue');\n            }\n            assertRequiredArgument(chunk, 1, 'enqueue');\n            if (!ArrayBuffer.isView(chunk)) {\n                throw new TypeError('chunk must be an array buffer view');\n            }\n            if (chunk.byteLength === 0) {\n                throw new TypeError('chunk must have non-zero byteLength');\n            }\n            if (chunk.buffer.byteLength === 0) {\n                throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n            }\n            if (this._closeRequested) {\n                throw new TypeError('stream is closed or draining');\n            }\n            var state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be enqueued to\");\n            }\n            ReadableByteStreamControllerEnqueue(this, chunk);\n        };\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        ReadableByteStreamController.prototype.error = function (e) {\n            if (e === void 0) { e = undefined; }\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('error');\n            }\n            ReadableByteStreamControllerError(this, e);\n        };\n        /** @internal */\n        ReadableByteStreamController.prototype[CancelSteps] = function (reason) {\n            ReadableByteStreamControllerClearPendingPullIntos(this);\n            ResetQueue(this);\n            var result = this._cancelAlgorithm(reason);\n            ReadableByteStreamControllerClearAlgorithms(this);\n            return result;\n        };\n        /** @internal */\n        ReadableByteStreamController.prototype[PullSteps] = function (readRequest) {\n            var stream = this._controlledReadableByteStream;\n            if (this._queueTotalSize > 0) {\n                var entry = this._queue.shift();\n                this._queueTotalSize -= entry.byteLength;\n                ReadableByteStreamControllerHandleQueueDrain(this);\n                var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n                readRequest._chunkSteps(view);\n                return;\n            }\n            var autoAllocateChunkSize = this._autoAllocateChunkSize;\n            if (autoAllocateChunkSize !== undefined) {\n                var buffer = void 0;\n                try {\n                    buffer = new ArrayBuffer(autoAllocateChunkSize);\n                }\n                catch (bufferE) {\n                    readRequest._errorSteps(bufferE);\n                    return;\n                }\n                var pullIntoDescriptor = {\n                    buffer: buffer,\n                    bufferByteLength: autoAllocateChunkSize,\n                    byteOffset: 0,\n                    byteLength: autoAllocateChunkSize,\n                    bytesFilled: 0,\n                    elementSize: 1,\n                    viewConstructor: Uint8Array,\n                    readerType: 'default'\n                };\n                this._pendingPullIntos.push(pullIntoDescriptor);\n            }\n            ReadableStreamAddReadRequest(stream, readRequest);\n            ReadableByteStreamControllerCallPullIfNeeded(this);\n        };\n        return ReadableByteStreamController;\n    }());\n    Object.defineProperties(ReadableByteStreamController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        byobRequest: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableByteStreamController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableByteStreamController.\n    function IsReadableByteStreamController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n            return false;\n        }\n        return x instanceof ReadableByteStreamController;\n    }\n    function IsReadableStreamBYOBRequest(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBRequest;\n    }\n    function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n        var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        // TODO: Test controller argument\n        var pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, function () {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n        }, function (e) {\n            ReadableByteStreamControllerError(controller, e);\n        });\n    }\n    function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        controller._pendingPullIntos = new SimpleQueue();\n    }\n    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n        var done = false;\n        if (stream._state === 'closed') {\n            done = true;\n        }\n        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        if (pullIntoDescriptor.readerType === 'default') {\n            ReadableStreamFulfillReadRequest(stream, filledView, done);\n        }\n        else {\n            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n        }\n    }\n    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n        var bytesFilled = pullIntoDescriptor.bytesFilled;\n        var elementSize = pullIntoDescriptor.elementSize;\n        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n    }\n    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n        controller._queue.push({ buffer: buffer, byteOffset: byteOffset, byteLength: byteLength });\n        controller._queueTotalSize += byteLength;\n    }\n    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n        var elementSize = pullIntoDescriptor.elementSize;\n        var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n        var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n        var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n        var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n        var totalBytesToCopyRemaining = maxBytesToCopy;\n        var ready = false;\n        if (maxAlignedBytes > currentAlignedBytes) {\n            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n            ready = true;\n        }\n        var queue = controller._queue;\n        while (totalBytesToCopyRemaining > 0) {\n            var headOfQueue = queue.peek();\n            var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n            var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n            if (headOfQueue.byteLength === bytesToCopy) {\n                queue.shift();\n            }\n            else {\n                headOfQueue.byteOffset += bytesToCopy;\n                headOfQueue.byteLength -= bytesToCopy;\n            }\n            controller._queueTotalSize -= bytesToCopy;\n            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n            totalBytesToCopyRemaining -= bytesToCopy;\n        }\n        return ready;\n    }\n    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n        pullIntoDescriptor.bytesFilled += size;\n    }\n    function ReadableByteStreamControllerHandleQueueDrain(controller) {\n        if (controller._queueTotalSize === 0 && controller._closeRequested) {\n            ReadableByteStreamControllerClearAlgorithms(controller);\n            ReadableStreamClose(controller._controlledReadableByteStream);\n        }\n        else {\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n        }\n    }\n    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n        if (controller._byobRequest === null) {\n            return;\n        }\n        controller._byobRequest._associatedReadableByteStreamController = undefined;\n        controller._byobRequest._view = null;\n        controller._byobRequest = null;\n    }\n    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n        while (controller._pendingPullIntos.length > 0) {\n            if (controller._queueTotalSize === 0) {\n                return;\n            }\n            var pullIntoDescriptor = controller._pendingPullIntos.peek();\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n        var stream = controller._controlledReadableByteStream;\n        var elementSize = 1;\n        if (view.constructor !== DataView) {\n            elementSize = view.constructor.BYTES_PER_ELEMENT;\n        }\n        var ctor = view.constructor;\n        // try {\n        var buffer = TransferArrayBuffer(view.buffer);\n        // } catch (e) {\n        //   readIntoRequest._errorSteps(e);\n        //   return;\n        // }\n        var pullIntoDescriptor = {\n            buffer: buffer,\n            bufferByteLength: buffer.byteLength,\n            byteOffset: view.byteOffset,\n            byteLength: view.byteLength,\n            bytesFilled: 0,\n            elementSize: elementSize,\n            viewConstructor: ctor,\n            readerType: 'byob'\n        };\n        if (controller._pendingPullIntos.length > 0) {\n            controller._pendingPullIntos.push(pullIntoDescriptor);\n            // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n            // - No change happens on desiredSize\n            // - The source has already been notified of that there's at least 1 pending read(view)\n            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n            return;\n        }\n        if (stream._state === 'closed') {\n            var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n            readIntoRequest._closeSteps(emptyView);\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                ReadableByteStreamControllerHandleQueueDrain(controller);\n                readIntoRequest._chunkSteps(filledView);\n                return;\n            }\n            if (controller._closeRequested) {\n                var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                readIntoRequest._errorSteps(e);\n                return;\n            }\n        }\n        controller._pendingPullIntos.push(pullIntoDescriptor);\n        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n        var stream = controller._controlledReadableByteStream;\n        if (ReadableStreamHasBYOBReader(stream)) {\n            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n            return;\n        }\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n        if (remainderSize > 0) {\n            var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            var remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n        }\n        pullIntoDescriptor.bytesFilled -= remainderSize;\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    }\n    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n        var firstDescriptor = controller._pendingPullIntos.peek();\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        var state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            ReadableByteStreamControllerRespondInClosedState(controller);\n        }\n        else {\n            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n        var descriptor = controller._pendingPullIntos.shift();\n        return descriptor;\n    }\n    function ReadableByteStreamControllerShouldCallPull(controller) {\n        var stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return false;\n        }\n        if (controller._closeRequested) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n            return true;\n        }\n        var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableByteStreamControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n    }\n    // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n    function ReadableByteStreamControllerClose(controller) {\n        var stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            controller._closeRequested = true;\n            return;\n        }\n        if (controller._pendingPullIntos.length > 0) {\n            var firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (firstPendingPullInto.bytesFilled > 0) {\n                var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                throw e;\n            }\n        }\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamClose(stream);\n    }\n    function ReadableByteStreamControllerEnqueue(controller, chunk) {\n        var stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        var buffer = chunk.buffer;\n        var byteOffset = chunk.byteOffset;\n        var byteLength = chunk.byteLength;\n        var transferredBuffer = TransferArrayBuffer(buffer);\n        if (controller._pendingPullIntos.length > 0) {\n            var firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n        }\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        if (ReadableStreamHasDefaultReader(stream)) {\n            if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            }\n            else {\n                if (controller._pendingPullIntos.length > 0) {\n                    ReadableByteStreamControllerShiftPendingPullInto(controller);\n                }\n                var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                ReadableStreamFulfillReadRequest(stream, transferredView, false);\n            }\n        }\n        else if (ReadableStreamHasBYOBReader(stream)) {\n            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n        }\n        else {\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerError(controller, e) {\n        var stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ReadableByteStreamControllerClearPendingPullIntos(controller);\n        ResetQueue(controller);\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableByteStreamControllerGetBYOBRequest(controller) {\n        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n            var firstDescriptor = controller._pendingPullIntos.peek();\n            var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n            var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n            controller._byobRequest = byobRequest;\n        }\n        return controller._byobRequest;\n    }\n    function ReadableByteStreamControllerGetDesiredSize(controller) {\n        var state = controller._controlledReadableByteStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n        var firstDescriptor = controller._pendingPullIntos.peek();\n        var state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (bytesWritten !== 0) {\n                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n            }\n        }\n        else {\n            if (bytesWritten === 0) {\n                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n            }\n            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                throw new RangeError('bytesWritten out of range');\n            }\n        }\n        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n    }\n    function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n        var firstDescriptor = controller._pendingPullIntos.peek();\n        var state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (view.byteLength !== 0) {\n                throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n            }\n        }\n        else {\n            if (view.byteLength === 0) {\n                throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n            }\n        }\n        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n            throw new RangeError('The region specified by view does not match byobRequest');\n        }\n        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n            throw new RangeError('The buffer of view has different capacity than byobRequest');\n        }\n        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n            throw new RangeError('The region specified by view is larger than byobRequest');\n        }\n        var viewByteLength = view.byteLength;\n        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n    }\n    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n        controller._controlledReadableByteStream = stream;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._byobRequest = null;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._closeRequested = false;\n        controller._started = false;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        controller._autoAllocateChunkSize = autoAllocateChunkSize;\n        controller._pendingPullIntos = new SimpleQueue();\n        stream._readableStreamController = controller;\n        var startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), function () {\n            controller._started = true;\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n        }, function (r) {\n            ReadableByteStreamControllerError(controller, r);\n        });\n    }\n    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n        var controller = Object.create(ReadableByteStreamController.prototype);\n        var startAlgorithm = function () { return undefined; };\n        var pullAlgorithm = function () { return promiseResolvedWith(undefined); };\n        var cancelAlgorithm = function () { return promiseResolvedWith(undefined); };\n        if (underlyingByteSource.start !== undefined) {\n            startAlgorithm = function () { return underlyingByteSource.start(controller); };\n        }\n        if (underlyingByteSource.pull !== undefined) {\n            pullAlgorithm = function () { return underlyingByteSource.pull(controller); };\n        }\n        if (underlyingByteSource.cancel !== undefined) {\n            cancelAlgorithm = function (reason) { return underlyingByteSource.cancel(reason); };\n        }\n        var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n        if (autoAllocateChunkSize === 0) {\n            throw new TypeError('autoAllocateChunkSize must be greater than 0');\n        }\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n    }\n    function SetUpReadableStreamBYOBRequest(request, controller, view) {\n        request._associatedReadableByteStreamController = controller;\n        request._view = view;\n    }\n    // Helper functions for the ReadableStreamBYOBRequest.\n    function byobRequestBrandCheckException(name) {\n        return new TypeError(\"ReadableStreamBYOBRequest.prototype.\" + name + \" can only be used on a ReadableStreamBYOBRequest\");\n    }\n    // Helper functions for the ReadableByteStreamController.\n    function byteStreamControllerBrandCheckException(name) {\n        return new TypeError(\"ReadableByteStreamController.prototype.\" + name + \" can only be used on a ReadableByteStreamController\");\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamBYOBReader(stream) {\n        return new ReadableStreamBYOBReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n        stream._reader._readIntoRequests.push(readIntoRequest);\n    }\n    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n        var reader = stream._reader;\n        var readIntoRequest = reader._readIntoRequests.shift();\n        if (done) {\n            readIntoRequest._closeSteps(chunk);\n        }\n        else {\n            readIntoRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadIntoRequests(stream) {\n        return stream._reader._readIntoRequests.length;\n    }\n    function ReadableStreamHasBYOBReader(stream) {\n        var reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamBYOBReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A BYOB reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    var ReadableStreamBYOBReader = /** @class */ (function () {\n        function ReadableStreamBYOBReader(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n                    'source');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readIntoRequests = new SimpleQueue();\n        }\n        Object.defineProperty(ReadableStreamBYOBReader.prototype, \"closed\", {\n            /**\n             * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n             * the reader's lock is released before the stream finishes closing.\n             */\n            get: function () {\n                if (!IsReadableStreamBYOBReader(this)) {\n                    return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n                }\n                return this._closedPromise;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        ReadableStreamBYOBReader.prototype.cancel = function (reason) {\n            if (reason === void 0) { reason = undefined; }\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        };\n        /**\n         * Attempts to reads bytes into view, and returns a promise resolved with the result.\n         *\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n         */\n        ReadableStreamBYOBReader.prototype.read = function (view) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('read'));\n            }\n            if (!ArrayBuffer.isView(view)) {\n                return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n            }\n            if (view.byteLength === 0) {\n                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n            }\n            if (view.buffer.byteLength === 0) {\n                return promiseRejectedWith(new TypeError(\"view's buffer must have non-zero byteLength\"));\n            }\n            if (IsDetachedBuffer(view.buffer)) ;\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            var resolvePromise;\n            var rejectPromise;\n            var promise = newPromise(function (resolve, reject) {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            var readIntoRequest = {\n                _chunkSteps: function (chunk) { return resolvePromise({ value: chunk, done: false }); },\n                _closeSteps: function (chunk) { return resolvePromise({ value: chunk, done: true }); },\n                _errorSteps: function (e) { return rejectPromise(e); }\n            };\n            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n            return promise;\n        };\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        ReadableStreamBYOBReader.prototype.releaseLock = function () {\n            if (!IsReadableStreamBYOBReader(this)) {\n                throw byobReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            if (this._readIntoRequests.length > 0) {\n                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n            }\n            ReadableStreamReaderGenericRelease(this);\n        };\n        return ReadableStreamBYOBReader;\n    }());\n    Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamBYOBReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamBYOBReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBReader;\n    }\n    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n        var stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'errored') {\n            readIntoRequest._errorSteps(stream._storedError);\n        }\n        else {\n            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n        }\n    }\n    // Helper functions for the ReadableStreamBYOBReader.\n    function byobReaderBrandCheckException(name) {\n        return new TypeError(\"ReadableStreamBYOBReader.prototype.\" + name + \" can only be used on a ReadableStreamBYOBReader\");\n    }\n\n    function ExtractHighWaterMark(strategy, defaultHWM) {\n        var highWaterMark = strategy.highWaterMark;\n        if (highWaterMark === undefined) {\n            return defaultHWM;\n        }\n        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n            throw new RangeError('Invalid highWaterMark');\n        }\n        return highWaterMark;\n    }\n    function ExtractSizeAlgorithm(strategy) {\n        var size = strategy.size;\n        if (!size) {\n            return function () { return 1; };\n        }\n        return size;\n    }\n\n    function convertQueuingStrategy(init, context) {\n        assertDictionary(init, context);\n        var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        var size = init === null || init === void 0 ? void 0 : init.size;\n        return {\n            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n            size: size === undefined ? undefined : convertQueuingStrategySize(size, context + \" has member 'size' that\")\n        };\n    }\n    function convertQueuingStrategySize(fn, context) {\n        assertFunction(fn, context);\n        return function (chunk) { return convertUnrestrictedDouble(fn(chunk)); };\n    }\n\n    function convertUnderlyingSink(original, context) {\n        assertDictionary(original, context);\n        var abort = original === null || original === void 0 ? void 0 : original.abort;\n        var close = original === null || original === void 0 ? void 0 : original.close;\n        var start = original === null || original === void 0 ? void 0 : original.start;\n        var type = original === null || original === void 0 ? void 0 : original.type;\n        var write = original === null || original === void 0 ? void 0 : original.write;\n        return {\n            abort: abort === undefined ?\n                undefined :\n                convertUnderlyingSinkAbortCallback(abort, original, context + \" has member 'abort' that\"),\n            close: close === undefined ?\n                undefined :\n                convertUnderlyingSinkCloseCallback(close, original, context + \" has member 'close' that\"),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSinkStartCallback(start, original, context + \" has member 'start' that\"),\n            write: write === undefined ?\n                undefined :\n                convertUnderlyingSinkWriteCallback(write, original, context + \" has member 'write' that\"),\n            type: type\n        };\n    }\n    function convertUnderlyingSinkAbortCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (reason) { return promiseCall(fn, original, [reason]); };\n    }\n    function convertUnderlyingSinkCloseCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function () { return promiseCall(fn, original, []); };\n    }\n    function convertUnderlyingSinkStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (controller) { return reflectCall(fn, original, [controller]); };\n    }\n    function convertUnderlyingSinkWriteCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (chunk, controller) { return promiseCall(fn, original, [chunk, controller]); };\n    }\n\n    function assertWritableStream(x, context) {\n        if (!IsWritableStream(x)) {\n            throw new TypeError(context + \" is not a WritableStream.\");\n        }\n    }\n\n    function isAbortSignal(value) {\n        if (typeof value !== 'object' || value === null) {\n            return false;\n        }\n        try {\n            return typeof value.aborted === 'boolean';\n        }\n        catch (_a) {\n            // AbortSignal.prototype.aborted throws if its brand check fails\n            return false;\n        }\n    }\n    var supportsAbortController = typeof AbortController === 'function';\n    /**\n     * Construct a new AbortController, if supported by the platform.\n     *\n     * @internal\n     */\n    function createAbortController() {\n        if (supportsAbortController) {\n            return new AbortController();\n        }\n        return undefined;\n    }\n\n    /**\n     * A writable stream represents a destination for data, into which you can write.\n     *\n     * @public\n     */\n    var WritableStream = /** @class */ (function () {\n        function WritableStream(rawUnderlyingSink, rawStrategy) {\n            if (rawUnderlyingSink === void 0) { rawUnderlyingSink = {}; }\n            if (rawStrategy === void 0) { rawStrategy = {}; }\n            if (rawUnderlyingSink === undefined) {\n                rawUnderlyingSink = null;\n            }\n            else {\n                assertObject(rawUnderlyingSink, 'First parameter');\n            }\n            var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n            InitializeWritableStream(this);\n            var type = underlyingSink.type;\n            if (type !== undefined) {\n                throw new RangeError('Invalid type is specified');\n            }\n            var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n            var highWaterMark = ExtractHighWaterMark(strategy, 1);\n            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n        }\n        Object.defineProperty(WritableStream.prototype, \"locked\", {\n            /**\n             * Returns whether or not the writable stream is locked to a writer.\n             */\n            get: function () {\n                if (!IsWritableStream(this)) {\n                    throw streamBrandCheckException$2('locked');\n                }\n                return IsWritableStreamLocked(this);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n         * mechanism of the underlying sink.\n         *\n         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n         * the stream) if the stream is currently locked.\n         */\n        WritableStream.prototype.abort = function (reason) {\n            if (reason === void 0) { reason = undefined; }\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('abort'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n            }\n            return WritableStreamAbort(this, reason);\n        };\n        /**\n         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n         *\n         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n         */\n        WritableStream.prototype.close = function () {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('close'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamClose(this);\n        };\n        /**\n         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n         * is locked, no other writer can be acquired until this one is released.\n         *\n         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n         */\n        WritableStream.prototype.getWriter = function () {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('getWriter');\n            }\n            return AcquireWritableStreamDefaultWriter(this);\n        };\n        return WritableStream;\n    }());\n    Object.defineProperties(WritableStream.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        getWriter: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n            value: 'WritableStream',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStream.\n    function AcquireWritableStreamDefaultWriter(stream) {\n        return new WritableStreamDefaultWriter(stream);\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n        if (highWaterMark === void 0) { highWaterMark = 1; }\n        if (sizeAlgorithm === void 0) { sizeAlgorithm = function () { return 1; }; }\n        var stream = Object.create(WritableStream.prototype);\n        InitializeWritableStream(stream);\n        var controller = Object.create(WritableStreamDefaultController.prototype);\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    function InitializeWritableStream(stream) {\n        stream._state = 'writable';\n        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n        // 'erroring' or 'errored'. May be set to an undefined value.\n        stream._storedError = undefined;\n        stream._writer = undefined;\n        // Initialize to undefined first because the constructor of the controller checks this\n        // variable to validate the caller.\n        stream._writableStreamController = undefined;\n        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n        // producer without waiting for the queued writes to finish.\n        stream._writeRequests = new SimpleQueue();\n        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n        stream._inFlightWriteRequest = undefined;\n        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n        // has been detached.\n        stream._closeRequest = undefined;\n        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n        stream._inFlightCloseRequest = undefined;\n        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n        stream._pendingAbortRequest = undefined;\n        // The backpressure signal set by the controller.\n        stream._backpressure = false;\n    }\n    function IsWritableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n            return false;\n        }\n        return x instanceof WritableStream;\n    }\n    function IsWritableStreamLocked(stream) {\n        if (stream._writer === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamAbort(stream, reason) {\n        var _a;\n        if (stream._state === 'closed' || stream._state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        stream._writableStreamController._abortReason = reason;\n        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n        // but it doesn't know that signaling abort runs author code that might have changed the state.\n        // Widen the type again by casting to WritableStreamState.\n        var state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._pendingAbortRequest !== undefined) {\n            return stream._pendingAbortRequest._promise;\n        }\n        var wasAlreadyErroring = false;\n        if (state === 'erroring') {\n            wasAlreadyErroring = true;\n            // reason will not be used, so don't keep a reference to it.\n            reason = undefined;\n        }\n        var promise = newPromise(function (resolve, reject) {\n            stream._pendingAbortRequest = {\n                _promise: undefined,\n                _resolve: resolve,\n                _reject: reject,\n                _reason: reason,\n                _wasAlreadyErroring: wasAlreadyErroring\n            };\n        });\n        stream._pendingAbortRequest._promise = promise;\n        if (!wasAlreadyErroring) {\n            WritableStreamStartErroring(stream, reason);\n        }\n        return promise;\n    }\n    function WritableStreamClose(stream) {\n        var state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseRejectedWith(new TypeError(\"The stream (in \" + state + \" state) is not in the writable state and cannot be closed\"));\n        }\n        var promise = newPromise(function (resolve, reject) {\n            var closeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._closeRequest = closeRequest;\n        });\n        var writer = stream._writer;\n        if (writer !== undefined && stream._backpressure && state === 'writable') {\n            defaultWriterReadyPromiseResolve(writer);\n        }\n        WritableStreamDefaultControllerClose(stream._writableStreamController);\n        return promise;\n    }\n    // WritableStream API exposed for controllers.\n    function WritableStreamAddWriteRequest(stream) {\n        var promise = newPromise(function (resolve, reject) {\n            var writeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._writeRequests.push(writeRequest);\n        });\n        return promise;\n    }\n    function WritableStreamDealWithRejection(stream, error) {\n        var state = stream._state;\n        if (state === 'writable') {\n            WritableStreamStartErroring(stream, error);\n            return;\n        }\n        WritableStreamFinishErroring(stream);\n    }\n    function WritableStreamStartErroring(stream, reason) {\n        var controller = stream._writableStreamController;\n        stream._state = 'erroring';\n        stream._storedError = reason;\n        var writer = stream._writer;\n        if (writer !== undefined) {\n            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n        }\n        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n            WritableStreamFinishErroring(stream);\n        }\n    }\n    function WritableStreamFinishErroring(stream) {\n        stream._state = 'errored';\n        stream._writableStreamController[ErrorSteps]();\n        var storedError = stream._storedError;\n        stream._writeRequests.forEach(function (writeRequest) {\n            writeRequest._reject(storedError);\n        });\n        stream._writeRequests = new SimpleQueue();\n        if (stream._pendingAbortRequest === undefined) {\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        var abortRequest = stream._pendingAbortRequest;\n        stream._pendingAbortRequest = undefined;\n        if (abortRequest._wasAlreadyErroring) {\n            abortRequest._reject(storedError);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n        uponPromise(promise, function () {\n            abortRequest._resolve();\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n        }, function (reason) {\n            abortRequest._reject(reason);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n        });\n    }\n    function WritableStreamFinishInFlightWrite(stream) {\n        stream._inFlightWriteRequest._resolve(undefined);\n        stream._inFlightWriteRequest = undefined;\n    }\n    function WritableStreamFinishInFlightWriteWithError(stream, error) {\n        stream._inFlightWriteRequest._reject(error);\n        stream._inFlightWriteRequest = undefined;\n        WritableStreamDealWithRejection(stream, error);\n    }\n    function WritableStreamFinishInFlightClose(stream) {\n        stream._inFlightCloseRequest._resolve(undefined);\n        stream._inFlightCloseRequest = undefined;\n        var state = stream._state;\n        if (state === 'erroring') {\n            // The error was too late to do anything, so it is ignored.\n            stream._storedError = undefined;\n            if (stream._pendingAbortRequest !== undefined) {\n                stream._pendingAbortRequest._resolve();\n                stream._pendingAbortRequest = undefined;\n            }\n        }\n        stream._state = 'closed';\n        var writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseResolve(writer);\n        }\n    }\n    function WritableStreamFinishInFlightCloseWithError(stream, error) {\n        stream._inFlightCloseRequest._reject(error);\n        stream._inFlightCloseRequest = undefined;\n        // Never execute sink abort() after sink close().\n        if (stream._pendingAbortRequest !== undefined) {\n            stream._pendingAbortRequest._reject(error);\n            stream._pendingAbortRequest = undefined;\n        }\n        WritableStreamDealWithRejection(stream, error);\n    }\n    // TODO(ricea): Fix alphabetical order.\n    function WritableStreamCloseQueuedOrInFlight(stream) {\n        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamHasOperationMarkedInFlight(stream) {\n        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamMarkCloseRequestInFlight(stream) {\n        stream._inFlightCloseRequest = stream._closeRequest;\n        stream._closeRequest = undefined;\n    }\n    function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n        stream._inFlightWriteRequest = stream._writeRequests.shift();\n    }\n    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n        if (stream._closeRequest !== undefined) {\n            stream._closeRequest._reject(stream._storedError);\n            stream._closeRequest = undefined;\n        }\n        var writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseReject(writer, stream._storedError);\n        }\n    }\n    function WritableStreamUpdateBackpressure(stream, backpressure) {\n        var writer = stream._writer;\n        if (writer !== undefined && backpressure !== stream._backpressure) {\n            if (backpressure) {\n                defaultWriterReadyPromiseReset(writer);\n            }\n            else {\n                defaultWriterReadyPromiseResolve(writer);\n            }\n        }\n        stream._backpressure = backpressure;\n    }\n    /**\n     * A default writer vended by a {@link WritableStream}.\n     *\n     * @public\n     */\n    var WritableStreamDefaultWriter = /** @class */ (function () {\n        function WritableStreamDefaultWriter(stream) {\n            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n            assertWritableStream(stream, 'First parameter');\n            if (IsWritableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n            }\n            this._ownerWritableStream = stream;\n            stream._writer = this;\n            var state = stream._state;\n            if (state === 'writable') {\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                    defaultWriterReadyPromiseInitialize(this);\n                }\n                else {\n                    defaultWriterReadyPromiseInitializeAsResolved(this);\n                }\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'erroring') {\n                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'closed') {\n                defaultWriterReadyPromiseInitializeAsResolved(this);\n                defaultWriterClosedPromiseInitializeAsResolved(this);\n            }\n            else {\n                var storedError = stream._storedError;\n                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n            }\n        }\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, \"closed\", {\n            /**\n             * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n             * the writer’s lock is released before the stream finishes closing.\n             */\n            get: function () {\n                if (!IsWritableStreamDefaultWriter(this)) {\n                    return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n                }\n                return this._closedPromise;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, \"desiredSize\", {\n            /**\n             * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n             * A producer can use this information to determine the right amount of data to write.\n             *\n             * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n             * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n             * the writer’s lock is released.\n             */\n            get: function () {\n                if (!IsWritableStreamDefaultWriter(this)) {\n                    throw defaultWriterBrandCheckException('desiredSize');\n                }\n                if (this._ownerWritableStream === undefined) {\n                    throw defaultWriterLockException('desiredSize');\n                }\n                return WritableStreamDefaultWriterGetDesiredSize(this);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, \"ready\", {\n            /**\n             * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n             * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n             * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n             *\n             * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n             * rejected.\n             */\n            get: function () {\n                if (!IsWritableStreamDefaultWriter(this)) {\n                    return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n                }\n                return this._readyPromise;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n         */\n        WritableStreamDefaultWriter.prototype.abort = function (reason) {\n            if (reason === void 0) { reason = undefined; }\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('abort'));\n            }\n            return WritableStreamDefaultWriterAbort(this, reason);\n        };\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n         */\n        WritableStreamDefaultWriter.prototype.close = function () {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n            }\n            var stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('close'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamDefaultWriterClose(this);\n        };\n        /**\n         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n         * now on; otherwise, the writer will appear closed.\n         *\n         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n         * other producers from writing in an interleaved manner.\n         */\n        WritableStreamDefaultWriter.prototype.releaseLock = function () {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('releaseLock');\n            }\n            var stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return;\n            }\n            WritableStreamDefaultWriterRelease(this);\n        };\n        WritableStreamDefaultWriter.prototype.write = function (chunk) {\n            if (chunk === void 0) { chunk = undefined; }\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('write to'));\n            }\n            return WritableStreamDefaultWriterWrite(this, chunk);\n        };\n        return WritableStreamDefaultWriter;\n    }());\n    Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        releaseLock: { enumerable: true },\n        write: { enumerable: true },\n        closed: { enumerable: true },\n        desiredSize: { enumerable: true },\n        ready: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n            value: 'WritableStreamDefaultWriter',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStreamDefaultWriter.\n    function IsWritableStreamDefaultWriter(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultWriter;\n    }\n    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n    function WritableStreamDefaultWriterAbort(writer, reason) {\n        var stream = writer._ownerWritableStream;\n        return WritableStreamAbort(stream, reason);\n    }\n    function WritableStreamDefaultWriterClose(writer) {\n        var stream = writer._ownerWritableStream;\n        return WritableStreamClose(stream);\n    }\n    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n        var stream = writer._ownerWritableStream;\n        var state = stream._state;\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        return WritableStreamDefaultWriterClose(writer);\n    }\n    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n        if (writer._closedPromiseState === 'pending') {\n            defaultWriterClosedPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterClosedPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n        if (writer._readyPromiseState === 'pending') {\n            defaultWriterReadyPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterReadyPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterGetDesiredSize(writer) {\n        var stream = writer._ownerWritableStream;\n        var state = stream._state;\n        if (state === 'errored' || state === 'erroring') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n    }\n    function WritableStreamDefaultWriterRelease(writer) {\n        var stream = writer._ownerWritableStream;\n        var releasedError = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n        // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n        // rejected until afterwards. This means that simply testing state will not work.\n        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n        stream._writer = undefined;\n        writer._ownerWritableStream = undefined;\n    }\n    function WritableStreamDefaultWriterWrite(writer, chunk) {\n        var stream = writer._ownerWritableStream;\n        var controller = stream._writableStreamController;\n        var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n        if (stream !== writer._ownerWritableStream) {\n            return promiseRejectedWith(defaultWriterLockException('write to'));\n        }\n        var state = stream._state;\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n        }\n        if (state === 'erroring') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        var promise = WritableStreamAddWriteRequest(stream);\n        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n        return promise;\n    }\n    var closeSentinel = {};\n    /**\n     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    var WritableStreamDefaultController = /** @class */ (function () {\n        function WritableStreamDefaultController() {\n            throw new TypeError('Illegal constructor');\n        }\n        Object.defineProperty(WritableStreamDefaultController.prototype, \"abortReason\", {\n            /**\n             * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n             *\n             * @deprecated\n             *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n             *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n             */\n            get: function () {\n                if (!IsWritableStreamDefaultController(this)) {\n                    throw defaultControllerBrandCheckException$2('abortReason');\n                }\n                return this._abortReason;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(WritableStreamDefaultController.prototype, \"signal\", {\n            /**\n             * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n             */\n            get: function () {\n                if (!IsWritableStreamDefaultController(this)) {\n                    throw defaultControllerBrandCheckException$2('signal');\n                }\n                if (this._abortController === undefined) {\n                    // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                    // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                    // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                    throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n                }\n                return this._abortController.signal;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n         *\n         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n         * normal lifecycle of interactions with the underlying sink.\n         */\n        WritableStreamDefaultController.prototype.error = function (e) {\n            if (e === void 0) { e = undefined; }\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('error');\n            }\n            var state = this._controlledWritableStream._state;\n            if (state !== 'writable') {\n                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                // just treat it as a no-op.\n                return;\n            }\n            WritableStreamDefaultControllerError(this, e);\n        };\n        /** @internal */\n        WritableStreamDefaultController.prototype[AbortSteps] = function (reason) {\n            var result = this._abortAlgorithm(reason);\n            WritableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        };\n        /** @internal */\n        WritableStreamDefaultController.prototype[ErrorSteps] = function () {\n            ResetQueue(this);\n        };\n        return WritableStreamDefaultController;\n    }());\n    Object.defineProperties(WritableStreamDefaultController.prototype, {\n        abortReason: { enumerable: true },\n        signal: { enumerable: true },\n        error: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'WritableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations implementing interface required by the WritableStream.\n    function IsWritableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultController;\n    }\n    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledWritableStream = stream;\n        stream._writableStreamController = controller;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._abortReason = undefined;\n        controller._abortController = createAbortController();\n        controller._started = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._writeAlgorithm = writeAlgorithm;\n        controller._closeAlgorithm = closeAlgorithm;\n        controller._abortAlgorithm = abortAlgorithm;\n        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n        var startResult = startAlgorithm();\n        var startPromise = promiseResolvedWith(startResult);\n        uponPromise(startPromise, function () {\n            controller._started = true;\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n        }, function (r) {\n            controller._started = true;\n            WritableStreamDealWithRejection(stream, r);\n        });\n    }\n    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n        var controller = Object.create(WritableStreamDefaultController.prototype);\n        var startAlgorithm = function () { return undefined; };\n        var writeAlgorithm = function () { return promiseResolvedWith(undefined); };\n        var closeAlgorithm = function () { return promiseResolvedWith(undefined); };\n        var abortAlgorithm = function () { return promiseResolvedWith(undefined); };\n        if (underlyingSink.start !== undefined) {\n            startAlgorithm = function () { return underlyingSink.start(controller); };\n        }\n        if (underlyingSink.write !== undefined) {\n            writeAlgorithm = function (chunk) { return underlyingSink.write(chunk, controller); };\n        }\n        if (underlyingSink.close !== undefined) {\n            closeAlgorithm = function () { return underlyingSink.close(); };\n        }\n        if (underlyingSink.abort !== undefined) {\n            abortAlgorithm = function (reason) { return underlyingSink.abort(reason); };\n        }\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n    function WritableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._writeAlgorithm = undefined;\n        controller._closeAlgorithm = undefined;\n        controller._abortAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    function WritableStreamDefaultControllerClose(controller) {\n        EnqueueValueWithSize(controller, closeSentinel, 0);\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n        try {\n            return controller._strategySizeAlgorithm(chunk);\n        }\n        catch (chunkSizeE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n            return 1;\n        }\n    }\n    function WritableStreamDefaultControllerGetDesiredSize(controller) {\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n        try {\n            EnqueueValueWithSize(controller, chunk, chunkSize);\n        }\n        catch (enqueueE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n            return;\n        }\n        var stream = controller._controlledWritableStream;\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n            var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n            WritableStreamUpdateBackpressure(stream, backpressure);\n        }\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    // Abstract operations for the WritableStreamDefaultController.\n    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n        var stream = controller._controlledWritableStream;\n        if (!controller._started) {\n            return;\n        }\n        if (stream._inFlightWriteRequest !== undefined) {\n            return;\n        }\n        var state = stream._state;\n        if (state === 'erroring') {\n            WritableStreamFinishErroring(stream);\n            return;\n        }\n        if (controller._queue.length === 0) {\n            return;\n        }\n        var value = PeekQueueValue(controller);\n        if (value === closeSentinel) {\n            WritableStreamDefaultControllerProcessClose(controller);\n        }\n        else {\n            WritableStreamDefaultControllerProcessWrite(controller, value);\n        }\n    }\n    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n        if (controller._controlledWritableStream._state === 'writable') {\n            WritableStreamDefaultControllerError(controller, error);\n        }\n    }\n    function WritableStreamDefaultControllerProcessClose(controller) {\n        var stream = controller._controlledWritableStream;\n        WritableStreamMarkCloseRequestInFlight(stream);\n        DequeueValue(controller);\n        var sinkClosePromise = controller._closeAlgorithm();\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(sinkClosePromise, function () {\n            WritableStreamFinishInFlightClose(stream);\n        }, function (reason) {\n            WritableStreamFinishInFlightCloseWithError(stream, reason);\n        });\n    }\n    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n        var stream = controller._controlledWritableStream;\n        WritableStreamMarkFirstWriteRequestInFlight(stream);\n        var sinkWritePromise = controller._writeAlgorithm(chunk);\n        uponPromise(sinkWritePromise, function () {\n            WritableStreamFinishInFlightWrite(stream);\n            var state = stream._state;\n            DequeueValue(controller);\n            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n                var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n            }\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n        }, function (reason) {\n            if (stream._state === 'writable') {\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n            }\n            WritableStreamFinishInFlightWriteWithError(stream, reason);\n        });\n    }\n    function WritableStreamDefaultControllerGetBackpressure(controller) {\n        var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n        return desiredSize <= 0;\n    }\n    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n    function WritableStreamDefaultControllerError(controller, error) {\n        var stream = controller._controlledWritableStream;\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        WritableStreamStartErroring(stream, error);\n    }\n    // Helper functions for the WritableStream.\n    function streamBrandCheckException$2(name) {\n        return new TypeError(\"WritableStream.prototype.\" + name + \" can only be used on a WritableStream\");\n    }\n    // Helper functions for the WritableStreamDefaultController.\n    function defaultControllerBrandCheckException$2(name) {\n        return new TypeError(\"WritableStreamDefaultController.prototype.\" + name + \" can only be used on a WritableStreamDefaultController\");\n    }\n    // Helper functions for the WritableStreamDefaultWriter.\n    function defaultWriterBrandCheckException(name) {\n        return new TypeError(\"WritableStreamDefaultWriter.prototype.\" + name + \" can only be used on a WritableStreamDefaultWriter\");\n    }\n    function defaultWriterLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released writer');\n    }\n    function defaultWriterClosedPromiseInitialize(writer) {\n        writer._closedPromise = newPromise(function (resolve, reject) {\n            writer._closedPromise_resolve = resolve;\n            writer._closedPromise_reject = reject;\n            writer._closedPromiseState = 'pending';\n        });\n    }\n    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseReject(writer, reason);\n    }\n    function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseResolve(writer);\n    }\n    function defaultWriterClosedPromiseReject(writer, reason) {\n        if (writer._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._closedPromise);\n        writer._closedPromise_reject(reason);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'rejected';\n    }\n    function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterClosedPromiseResolve(writer) {\n        if (writer._closedPromise_resolve === undefined) {\n            return;\n        }\n        writer._closedPromise_resolve(undefined);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'resolved';\n    }\n    function defaultWriterReadyPromiseInitialize(writer) {\n        writer._readyPromise = newPromise(function (resolve, reject) {\n            writer._readyPromise_resolve = resolve;\n            writer._readyPromise_reject = reject;\n        });\n        writer._readyPromiseState = 'pending';\n    }\n    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseReject(writer, reason);\n    }\n    function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseResolve(writer);\n    }\n    function defaultWriterReadyPromiseReject(writer, reason) {\n        if (writer._readyPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._readyPromise);\n        writer._readyPromise_reject(reason);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'rejected';\n    }\n    function defaultWriterReadyPromiseReset(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n    }\n    function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterReadyPromiseResolve(writer) {\n        if (writer._readyPromise_resolve === undefined) {\n            return;\n        }\n        writer._readyPromise_resolve(undefined);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'fulfilled';\n    }\n\n    /// <reference lib=\"dom\" />\n    var NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;\n\n    /// <reference types=\"node\" />\n    function isDOMExceptionConstructor(ctor) {\n        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n            return false;\n        }\n        try {\n            new ctor();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    function createDOMExceptionPolyfill() {\n        // eslint-disable-next-line no-shadow\n        var ctor = function DOMException(message, name) {\n            this.message = message || '';\n            this.name = name || 'Error';\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n            }\n        };\n        ctor.prototype = Object.create(Error.prototype);\n        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n        return ctor;\n    }\n    // eslint-disable-next-line no-redeclare\n    var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\n    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n        var reader = AcquireReadableStreamDefaultReader(source);\n        var writer = AcquireWritableStreamDefaultWriter(dest);\n        source._disturbed = true;\n        var shuttingDown = false;\n        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n        var currentWrite = promiseResolvedWith(undefined);\n        return newPromise(function (resolve, reject) {\n            var abortAlgorithm;\n            if (signal !== undefined) {\n                abortAlgorithm = function () {\n                    var error = new DOMException$1('Aborted', 'AbortError');\n                    var actions = [];\n                    if (!preventAbort) {\n                        actions.push(function () {\n                            if (dest._state === 'writable') {\n                                return WritableStreamAbort(dest, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    if (!preventCancel) {\n                        actions.push(function () {\n                            if (source._state === 'readable') {\n                                return ReadableStreamCancel(source, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    shutdownWithAction(function () { return Promise.all(actions.map(function (action) { return action(); })); }, true, error);\n                };\n                if (signal.aborted) {\n                    abortAlgorithm();\n                    return;\n                }\n                signal.addEventListener('abort', abortAlgorithm);\n            }\n            // Using reader and writer, read all chunks from this and write them to dest\n            // - Backpressure must be enforced\n            // - Shutdown must stop all activity\n            function pipeLoop() {\n                return newPromise(function (resolveLoop, rejectLoop) {\n                    function next(done) {\n                        if (done) {\n                            resolveLoop();\n                        }\n                        else {\n                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                            PerformPromiseThen(pipeStep(), next, rejectLoop);\n                        }\n                    }\n                    next(false);\n                });\n            }\n            function pipeStep() {\n                if (shuttingDown) {\n                    return promiseResolvedWith(true);\n                }\n                return PerformPromiseThen(writer._readyPromise, function () {\n                    return newPromise(function (resolveRead, rejectRead) {\n                        ReadableStreamDefaultReaderRead(reader, {\n                            _chunkSteps: function (chunk) {\n                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                resolveRead(false);\n                            },\n                            _closeSteps: function () { return resolveRead(true); },\n                            _errorSteps: rejectRead\n                        });\n                    });\n                });\n            }\n            // Errors must be propagated forward\n            isOrBecomesErrored(source, reader._closedPromise, function (storedError) {\n                if (!preventAbort) {\n                    shutdownWithAction(function () { return WritableStreamAbort(dest, storedError); }, true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n            });\n            // Errors must be propagated backward\n            isOrBecomesErrored(dest, writer._closedPromise, function (storedError) {\n                if (!preventCancel) {\n                    shutdownWithAction(function () { return ReadableStreamCancel(source, storedError); }, true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n            });\n            // Closing must be propagated forward\n            isOrBecomesClosed(source, reader._closedPromise, function () {\n                if (!preventClose) {\n                    shutdownWithAction(function () { return WritableStreamDefaultWriterCloseWithErrorPropagation(writer); });\n                }\n                else {\n                    shutdown();\n                }\n            });\n            // Closing must be propagated backward\n            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n                var destClosed_1 = new TypeError('the destination writable stream closed before all data could be piped to it');\n                if (!preventCancel) {\n                    shutdownWithAction(function () { return ReadableStreamCancel(source, destClosed_1); }, true, destClosed_1);\n                }\n                else {\n                    shutdown(true, destClosed_1);\n                }\n            }\n            setPromiseIsHandledToTrue(pipeLoop());\n            function waitForWritesToFinish() {\n                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                // for that too.\n                var oldCurrentWrite = currentWrite;\n                return PerformPromiseThen(currentWrite, function () { return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined; });\n            }\n            function isOrBecomesErrored(stream, promise, action) {\n                if (stream._state === 'errored') {\n                    action(stream._storedError);\n                }\n                else {\n                    uponRejection(promise, action);\n                }\n            }\n            function isOrBecomesClosed(stream, promise, action) {\n                if (stream._state === 'closed') {\n                    action();\n                }\n                else {\n                    uponFulfillment(promise, action);\n                }\n            }\n            function shutdownWithAction(action, originalIsError, originalError) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), doTheRest);\n                }\n                else {\n                    doTheRest();\n                }\n                function doTheRest() {\n                    uponPromise(action(), function () { return finalize(originalIsError, originalError); }, function (newError) { return finalize(true, newError); });\n                }\n            }\n            function shutdown(isError, error) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), function () { return finalize(isError, error); });\n                }\n                else {\n                    finalize(isError, error);\n                }\n            }\n            function finalize(isError, error) {\n                WritableStreamDefaultWriterRelease(writer);\n                ReadableStreamReaderGenericRelease(reader);\n                if (signal !== undefined) {\n                    signal.removeEventListener('abort', abortAlgorithm);\n                }\n                if (isError) {\n                    reject(error);\n                }\n                else {\n                    resolve(undefined);\n                }\n            }\n        });\n    }\n\n    /**\n     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    var ReadableStreamDefaultController = /** @class */ (function () {\n        function ReadableStreamDefaultController() {\n            throw new TypeError('Illegal constructor');\n        }\n        Object.defineProperty(ReadableStreamDefaultController.prototype, \"desiredSize\", {\n            /**\n             * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n             * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n             */\n            get: function () {\n                if (!IsReadableStreamDefaultController(this)) {\n                    throw defaultControllerBrandCheckException$1('desiredSize');\n                }\n                return ReadableStreamDefaultControllerGetDesiredSize(this);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        ReadableStreamDefaultController.prototype.close = function () {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('close');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits close');\n            }\n            ReadableStreamDefaultControllerClose(this);\n        };\n        ReadableStreamDefaultController.prototype.enqueue = function (chunk) {\n            if (chunk === void 0) { chunk = undefined; }\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('enqueue');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits enqueue');\n            }\n            return ReadableStreamDefaultControllerEnqueue(this, chunk);\n        };\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        ReadableStreamDefaultController.prototype.error = function (e) {\n            if (e === void 0) { e = undefined; }\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('error');\n            }\n            ReadableStreamDefaultControllerError(this, e);\n        };\n        /** @internal */\n        ReadableStreamDefaultController.prototype[CancelSteps] = function (reason) {\n            ResetQueue(this);\n            var result = this._cancelAlgorithm(reason);\n            ReadableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        };\n        /** @internal */\n        ReadableStreamDefaultController.prototype[PullSteps] = function (readRequest) {\n            var stream = this._controlledReadableStream;\n            if (this._queue.length > 0) {\n                var chunk = DequeueValue(this);\n                if (this._closeRequested && this._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    ReadableStreamClose(stream);\n                }\n                else {\n                    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                }\n                readRequest._chunkSteps(chunk);\n            }\n            else {\n                ReadableStreamAddReadRequest(stream, readRequest);\n                ReadableStreamDefaultControllerCallPullIfNeeded(this);\n            }\n        };\n        return ReadableStreamDefaultController;\n    }());\n    Object.defineProperties(ReadableStreamDefaultController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableStreamDefaultController.\n    function IsReadableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultController;\n    }\n    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n        var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        var pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, function () {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n        }, function (e) {\n            ReadableStreamDefaultControllerError(controller, e);\n        });\n    }\n    function ReadableStreamDefaultControllerShouldCallPull(controller) {\n        var stream = controller._controlledReadableStream;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n    function ReadableStreamDefaultControllerClose(controller) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        var stream = controller._controlledReadableStream;\n        controller._closeRequested = true;\n        if (controller._queue.length === 0) {\n            ReadableStreamDefaultControllerClearAlgorithms(controller);\n            ReadableStreamClose(stream);\n        }\n    }\n    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        var stream = controller._controlledReadableStream;\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            ReadableStreamFulfillReadRequest(stream, chunk, false);\n        }\n        else {\n            var chunkSize = void 0;\n            try {\n                chunkSize = controller._strategySizeAlgorithm(chunk);\n            }\n            catch (chunkSizeE) {\n                ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                throw chunkSizeE;\n            }\n            try {\n                EnqueueValueWithSize(controller, chunk, chunkSize);\n            }\n            catch (enqueueE) {\n                ReadableStreamDefaultControllerError(controller, enqueueE);\n                throw enqueueE;\n            }\n        }\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }\n    function ReadableStreamDefaultControllerError(controller, e) {\n        var stream = controller._controlledReadableStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ResetQueue(controller);\n        ReadableStreamDefaultControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n        var state = controller._controlledReadableStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    // This is used in the implementation of TransformStream.\n    function ReadableStreamDefaultControllerHasBackpressure(controller) {\n        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n            return false;\n        }\n        return true;\n    }\n    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n        var state = controller._controlledReadableStream._state;\n        if (!controller._closeRequested && state === 'readable') {\n            return true;\n        }\n        return false;\n    }\n    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledReadableStream = stream;\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._started = false;\n        controller._closeRequested = false;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        stream._readableStreamController = controller;\n        var startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), function () {\n            controller._started = true;\n            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n        }, function (r) {\n            ReadableStreamDefaultControllerError(controller, r);\n        });\n    }\n    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n        var controller = Object.create(ReadableStreamDefaultController.prototype);\n        var startAlgorithm = function () { return undefined; };\n        var pullAlgorithm = function () { return promiseResolvedWith(undefined); };\n        var cancelAlgorithm = function () { return promiseResolvedWith(undefined); };\n        if (underlyingSource.start !== undefined) {\n            startAlgorithm = function () { return underlyingSource.start(controller); };\n        }\n        if (underlyingSource.pull !== undefined) {\n            pullAlgorithm = function () { return underlyingSource.pull(controller); };\n        }\n        if (underlyingSource.cancel !== undefined) {\n            cancelAlgorithm = function (reason) { return underlyingSource.cancel(reason); };\n        }\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // Helper functions for the ReadableStreamDefaultController.\n    function defaultControllerBrandCheckException$1(name) {\n        return new TypeError(\"ReadableStreamDefaultController.prototype.\" + name + \" can only be used on a ReadableStreamDefaultController\");\n    }\n\n    function ReadableStreamTee(stream, cloneForBranch2) {\n        if (IsReadableByteStreamController(stream._readableStreamController)) {\n            return ReadableByteStreamTee(stream);\n        }\n        return ReadableStreamDefaultTee(stream);\n    }\n    function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n        var reader = AcquireReadableStreamDefaultReader(stream);\n        var reading = false;\n        var readAgain = false;\n        var canceled1 = false;\n        var canceled2 = false;\n        var reason1;\n        var reason2;\n        var branch1;\n        var branch2;\n        var resolveCancelPromise;\n        var cancelPromise = newPromise(function (resolve) {\n            resolveCancelPromise = resolve;\n        });\n        function pullAlgorithm() {\n            if (reading) {\n                readAgain = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            var readRequest = {\n                _chunkSteps: function (chunk) {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    queueMicrotask(function () {\n                        readAgain = false;\n                        var chunk1 = chunk;\n                        var chunk2 = chunk;\n                        // There is no way to access the cloning code right now in the reference implementation.\n                        // If we add one then we'll need an implementation for serializable objects.\n                        // if (!canceled2 && cloneForBranch2) {\n                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                        // }\n                        if (!canceled1) {\n                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgain) {\n                            pullAlgorithm();\n                        }\n                    });\n                },\n                _closeSteps: function () {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: function () {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                var compositeReason = CreateArrayFromList([reason1, reason2]);\n                var cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                var compositeReason = CreateArrayFromList([reason1, reason2]);\n                var cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            // do nothing\n        }\n        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n        uponRejection(reader._closedPromise, function (r) {\n            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n            if (!canceled1 || !canceled2) {\n                resolveCancelPromise(undefined);\n            }\n        });\n        return [branch1, branch2];\n    }\n    function ReadableByteStreamTee(stream) {\n        var reader = AcquireReadableStreamDefaultReader(stream);\n        var reading = false;\n        var readAgainForBranch1 = false;\n        var readAgainForBranch2 = false;\n        var canceled1 = false;\n        var canceled2 = false;\n        var reason1;\n        var reason2;\n        var branch1;\n        var branch2;\n        var resolveCancelPromise;\n        var cancelPromise = newPromise(function (resolve) {\n            resolveCancelPromise = resolve;\n        });\n        function forwardReaderError(thisReader) {\n            uponRejection(thisReader._closedPromise, function (r) {\n                if (thisReader !== reader) {\n                    return;\n                }\n                ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                if (!canceled1 || !canceled2) {\n                    resolveCancelPromise(undefined);\n                }\n            });\n        }\n        function pullWithDefaultReader() {\n            if (IsReadableStreamBYOBReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamDefaultReader(stream);\n                forwardReaderError(reader);\n            }\n            var readRequest = {\n                _chunkSteps: function (chunk) {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    queueMicrotask(function () {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        var chunk1 = chunk;\n                        var chunk2 = chunk;\n                        if (!canceled1 && !canceled2) {\n                            try {\n                                chunk2 = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                        }\n                        if (!canceled1) {\n                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: function () {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableByteStreamControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableByteStreamControllerClose(branch2._readableStreamController);\n                    }\n                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                    }\n                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: function () {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n        }\n        function pullWithBYOBReader(view, forBranch2) {\n            if (IsReadableStreamDefaultReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamBYOBReader(stream);\n                forwardReaderError(reader);\n            }\n            var byobBranch = forBranch2 ? branch2 : branch1;\n            var otherBranch = forBranch2 ? branch1 : branch2;\n            var readIntoRequest = {\n                _chunkSteps: function (chunk) {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    queueMicrotask(function () {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        var byobCanceled = forBranch2 ? canceled2 : canceled1;\n                        var otherCanceled = forBranch2 ? canceled1 : canceled2;\n                        if (!otherCanceled) {\n                            var clonedChunk = void 0;\n                            try {\n                                clonedChunk = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                            }\n                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                        }\n                        else if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: function (chunk) {\n                    reading = false;\n                    var byobCanceled = forBranch2 ? canceled2 : canceled1;\n                    var otherCanceled = forBranch2 ? canceled1 : canceled2;\n                    if (!byobCanceled) {\n                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                    }\n                    if (!otherCanceled) {\n                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                    }\n                    if (chunk !== undefined) {\n                        if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                        }\n                    }\n                    if (!byobCanceled || !otherCanceled) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: function () {\n                    reading = false;\n                }\n            };\n            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n        }\n        function pull1Algorithm() {\n            if (reading) {\n                readAgainForBranch1 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, false);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function pull2Algorithm() {\n            if (reading) {\n                readAgainForBranch2 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, true);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                var compositeReason = CreateArrayFromList([reason1, reason2]);\n                var cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                var compositeReason = CreateArrayFromList([reason1, reason2]);\n                var cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            return;\n        }\n        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n        forwardReaderError(reader);\n        return [branch1, branch2];\n    }\n\n    function convertUnderlyingDefaultOrByteSource(source, context) {\n        assertDictionary(source, context);\n        var original = source;\n        var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n        var cancel = original === null || original === void 0 ? void 0 : original.cancel;\n        var pull = original === null || original === void 0 ? void 0 : original.pull;\n        var start = original === null || original === void 0 ? void 0 : original.start;\n        var type = original === null || original === void 0 ? void 0 : original.type;\n        return {\n            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n                undefined :\n                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + \" has member 'autoAllocateChunkSize' that\"),\n            cancel: cancel === undefined ?\n                undefined :\n                convertUnderlyingSourceCancelCallback(cancel, original, context + \" has member 'cancel' that\"),\n            pull: pull === undefined ?\n                undefined :\n                convertUnderlyingSourcePullCallback(pull, original, context + \" has member 'pull' that\"),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSourceStartCallback(start, original, context + \" has member 'start' that\"),\n            type: type === undefined ? undefined : convertReadableStreamType(type, context + \" has member 'type' that\")\n        };\n    }\n    function convertUnderlyingSourceCancelCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (reason) { return promiseCall(fn, original, [reason]); };\n    }\n    function convertUnderlyingSourcePullCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (controller) { return promiseCall(fn, original, [controller]); };\n    }\n    function convertUnderlyingSourceStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (controller) { return reflectCall(fn, original, [controller]); };\n    }\n    function convertReadableStreamType(type, context) {\n        type = \"\" + type;\n        if (type !== 'bytes') {\n            throw new TypeError(context + \" '\" + type + \"' is not a valid enumeration value for ReadableStreamType\");\n        }\n        return type;\n    }\n\n    function convertReaderOptions(options, context) {\n        assertDictionary(options, context);\n        var mode = options === null || options === void 0 ? void 0 : options.mode;\n        return {\n            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, context + \" has member 'mode' that\")\n        };\n    }\n    function convertReadableStreamReaderMode(mode, context) {\n        mode = \"\" + mode;\n        if (mode !== 'byob') {\n            throw new TypeError(context + \" '\" + mode + \"' is not a valid enumeration value for ReadableStreamReaderMode\");\n        }\n        return mode;\n    }\n\n    function convertIteratorOptions(options, context) {\n        assertDictionary(options, context);\n        var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        return { preventCancel: Boolean(preventCancel) };\n    }\n\n    function convertPipeOptions(options, context) {\n        assertDictionary(options, context);\n        var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n        var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n        var signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal !== undefined) {\n            assertAbortSignal(signal, context + \" has member 'signal' that\");\n        }\n        return {\n            preventAbort: Boolean(preventAbort),\n            preventCancel: Boolean(preventCancel),\n            preventClose: Boolean(preventClose),\n            signal: signal\n        };\n    }\n    function assertAbortSignal(signal, context) {\n        if (!isAbortSignal(signal)) {\n            throw new TypeError(context + \" is not an AbortSignal.\");\n        }\n    }\n\n    function convertReadableWritablePair(pair, context) {\n        assertDictionary(pair, context);\n        var readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n        assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n        assertReadableStream(readable, context + \" has member 'readable' that\");\n        var writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n        assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n        assertWritableStream(writable, context + \" has member 'writable' that\");\n        return { readable: readable, writable: writable };\n    }\n\n    /**\n     * A readable stream represents a source of data, from which you can read.\n     *\n     * @public\n     */\n    var ReadableStream = /** @class */ (function () {\n        function ReadableStream(rawUnderlyingSource, rawStrategy) {\n            if (rawUnderlyingSource === void 0) { rawUnderlyingSource = {}; }\n            if (rawStrategy === void 0) { rawStrategy = {}; }\n            if (rawUnderlyingSource === undefined) {\n                rawUnderlyingSource = null;\n            }\n            else {\n                assertObject(rawUnderlyingSource, 'First parameter');\n            }\n            var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n            InitializeReadableStream(this);\n            if (underlyingSource.type === 'bytes') {\n                if (strategy.size !== undefined) {\n                    throw new RangeError('The strategy for a byte stream cannot have a size function');\n                }\n                var highWaterMark = ExtractHighWaterMark(strategy, 0);\n                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n            }\n            else {\n                var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                var highWaterMark = ExtractHighWaterMark(strategy, 1);\n                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n            }\n        }\n        Object.defineProperty(ReadableStream.prototype, \"locked\", {\n            /**\n             * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n             */\n            get: function () {\n                if (!IsReadableStream(this)) {\n                    throw streamBrandCheckException$1('locked');\n                }\n                return IsReadableStreamLocked(this);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /**\n         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n         *\n         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n         * method, which might or might not use it.\n         */\n        ReadableStream.prototype.cancel = function (reason) {\n            if (reason === void 0) { reason = undefined; }\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n            }\n            return ReadableStreamCancel(this, reason);\n        };\n        ReadableStream.prototype.getReader = function (rawOptions) {\n            if (rawOptions === void 0) { rawOptions = undefined; }\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('getReader');\n            }\n            var options = convertReaderOptions(rawOptions, 'First parameter');\n            if (options.mode === undefined) {\n                return AcquireReadableStreamDefaultReader(this);\n            }\n            return AcquireReadableStreamBYOBReader(this);\n        };\n        ReadableStream.prototype.pipeThrough = function (rawTransform, rawOptions) {\n            if (rawOptions === void 0) { rawOptions = {}; }\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('pipeThrough');\n            }\n            assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n            var transform = convertReadableWritablePair(rawTransform, 'First parameter');\n            var options = convertPipeOptions(rawOptions, 'Second parameter');\n            if (IsReadableStreamLocked(this)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n            }\n            if (IsWritableStreamLocked(transform.writable)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n            }\n            var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n            setPromiseIsHandledToTrue(promise);\n            return transform.readable;\n        };\n        ReadableStream.prototype.pipeTo = function (destination, rawOptions) {\n            if (rawOptions === void 0) { rawOptions = {}; }\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n            }\n            if (destination === undefined) {\n                return promiseRejectedWith(\"Parameter 1 is required in 'pipeTo'.\");\n            }\n            if (!IsWritableStream(destination)) {\n                return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n            }\n            var options;\n            try {\n                options = convertPipeOptions(rawOptions, 'Second parameter');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n            }\n            if (IsWritableStreamLocked(destination)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n            }\n            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n        };\n        /**\n         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n         * new {@link ReadableStream} instances.\n         *\n         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n         * propagated to the stream's underlying source.\n         *\n         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n         * this could allow interference between the two branches.\n         */\n        ReadableStream.prototype.tee = function () {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('tee');\n            }\n            var branches = ReadableStreamTee(this);\n            return CreateArrayFromList(branches);\n        };\n        ReadableStream.prototype.values = function (rawOptions) {\n            if (rawOptions === void 0) { rawOptions = undefined; }\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('values');\n            }\n            var options = convertIteratorOptions(rawOptions, 'First parameter');\n            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n        };\n        return ReadableStream;\n    }());\n    Object.defineProperties(ReadableStream.prototype, {\n        cancel: { enumerable: true },\n        getReader: { enumerable: true },\n        pipeThrough: { enumerable: true },\n        pipeTo: { enumerable: true },\n        tee: { enumerable: true },\n        values: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStream',\n            configurable: true\n        });\n    }\n    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n            value: ReadableStream.prototype.values,\n            writable: true,\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableStream.\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n        if (highWaterMark === void 0) { highWaterMark = 1; }\n        if (sizeAlgorithm === void 0) { sizeAlgorithm = function () { return 1; }; }\n        var stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        var controller = Object.create(ReadableStreamDefaultController.prototype);\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n        var stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        var controller = Object.create(ReadableByteStreamController.prototype);\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n        return stream;\n    }\n    function InitializeReadableStream(stream) {\n        stream._state = 'readable';\n        stream._reader = undefined;\n        stream._storedError = undefined;\n        stream._disturbed = false;\n    }\n    function IsReadableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStream;\n    }\n    function IsReadableStreamLocked(stream) {\n        if (stream._reader === undefined) {\n            return false;\n        }\n        return true;\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamCancel(stream, reason) {\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        ReadableStreamClose(stream);\n        var reader = stream._reader;\n        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n            reader._readIntoRequests.forEach(function (readIntoRequest) {\n                readIntoRequest._closeSteps(undefined);\n            });\n            reader._readIntoRequests = new SimpleQueue();\n        }\n        var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n        return transformPromiseWith(sourceCancelPromise, noop);\n    }\n    function ReadableStreamClose(stream) {\n        stream._state = 'closed';\n        var reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseResolve(reader);\n        if (IsReadableStreamDefaultReader(reader)) {\n            reader._readRequests.forEach(function (readRequest) {\n                readRequest._closeSteps();\n            });\n            reader._readRequests = new SimpleQueue();\n        }\n    }\n    function ReadableStreamError(stream, e) {\n        stream._state = 'errored';\n        stream._storedError = e;\n        var reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseReject(reader, e);\n        if (IsReadableStreamDefaultReader(reader)) {\n            reader._readRequests.forEach(function (readRequest) {\n                readRequest._errorSteps(e);\n            });\n            reader._readRequests = new SimpleQueue();\n        }\n        else {\n            reader._readIntoRequests.forEach(function (readIntoRequest) {\n                readIntoRequest._errorSteps(e);\n            });\n            reader._readIntoRequests = new SimpleQueue();\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamBrandCheckException$1(name) {\n        return new TypeError(\"ReadableStream.prototype.\" + name + \" can only be used on a ReadableStream\");\n    }\n\n    function convertQueuingStrategyInit(init, context) {\n        assertDictionary(init, context);\n        var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n        return {\n            highWaterMark: convertUnrestrictedDouble(highWaterMark)\n        };\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    var byteLengthSizeFunction = function (chunk) {\n        return chunk.byteLength;\n    };\n    Object.defineProperty(byteLengthSizeFunction, 'name', {\n        value: 'size',\n        configurable: true\n    });\n    /**\n     * A queuing strategy that counts the number of bytes in each chunk.\n     *\n     * @public\n     */\n    var ByteLengthQueuingStrategy = /** @class */ (function () {\n        function ByteLengthQueuingStrategy(options) {\n            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"highWaterMark\", {\n            /**\n             * Returns the high water mark provided to the constructor.\n             */\n            get: function () {\n                if (!IsByteLengthQueuingStrategy(this)) {\n                    throw byteLengthBrandCheckException('highWaterMark');\n                }\n                return this._byteLengthQueuingStrategyHighWaterMark;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"size\", {\n            /**\n             * Measures the size of `chunk` by returning the value of its `byteLength` property.\n             */\n            get: function () {\n                if (!IsByteLengthQueuingStrategy(this)) {\n                    throw byteLengthBrandCheckException('size');\n                }\n                return byteLengthSizeFunction;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return ByteLengthQueuingStrategy;\n    }());\n    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ByteLengthQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the ByteLengthQueuingStrategy.\n    function byteLengthBrandCheckException(name) {\n        return new TypeError(\"ByteLengthQueuingStrategy.prototype.\" + name + \" can only be used on a ByteLengthQueuingStrategy\");\n    }\n    function IsByteLengthQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof ByteLengthQueuingStrategy;\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    var countSizeFunction = function () {\n        return 1;\n    };\n    Object.defineProperty(countSizeFunction, 'name', {\n        value: 'size',\n        configurable: true\n    });\n    /**\n     * A queuing strategy that counts the number of chunks.\n     *\n     * @public\n     */\n    var CountQueuingStrategy = /** @class */ (function () {\n        function CountQueuingStrategy(options) {\n            assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        Object.defineProperty(CountQueuingStrategy.prototype, \"highWaterMark\", {\n            /**\n             * Returns the high water mark provided to the constructor.\n             */\n            get: function () {\n                if (!IsCountQueuingStrategy(this)) {\n                    throw countBrandCheckException('highWaterMark');\n                }\n                return this._countQueuingStrategyHighWaterMark;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CountQueuingStrategy.prototype, \"size\", {\n            /**\n             * Measures the size of `chunk` by always returning 1.\n             * This ensures that the total queue size is a count of the number of chunks in the queue.\n             */\n            get: function () {\n                if (!IsCountQueuingStrategy(this)) {\n                    throw countBrandCheckException('size');\n                }\n                return countSizeFunction;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return CountQueuingStrategy;\n    }());\n    Object.defineProperties(CountQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n            value: 'CountQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the CountQueuingStrategy.\n    function countBrandCheckException(name) {\n        return new TypeError(\"CountQueuingStrategy.prototype.\" + name + \" can only be used on a CountQueuingStrategy\");\n    }\n    function IsCountQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof CountQueuingStrategy;\n    }\n\n    function convertTransformer(original, context) {\n        assertDictionary(original, context);\n        var flush = original === null || original === void 0 ? void 0 : original.flush;\n        var readableType = original === null || original === void 0 ? void 0 : original.readableType;\n        var start = original === null || original === void 0 ? void 0 : original.start;\n        var transform = original === null || original === void 0 ? void 0 : original.transform;\n        var writableType = original === null || original === void 0 ? void 0 : original.writableType;\n        return {\n            flush: flush === undefined ?\n                undefined :\n                convertTransformerFlushCallback(flush, original, context + \" has member 'flush' that\"),\n            readableType: readableType,\n            start: start === undefined ?\n                undefined :\n                convertTransformerStartCallback(start, original, context + \" has member 'start' that\"),\n            transform: transform === undefined ?\n                undefined :\n                convertTransformerTransformCallback(transform, original, context + \" has member 'transform' that\"),\n            writableType: writableType\n        };\n    }\n    function convertTransformerFlushCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (controller) { return promiseCall(fn, original, [controller]); };\n    }\n    function convertTransformerStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (controller) { return reflectCall(fn, original, [controller]); };\n    }\n    function convertTransformerTransformCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return function (chunk, controller) { return promiseCall(fn, original, [chunk, controller]); };\n    }\n\n    // Class TransformStream\n    /**\n     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n     * made available for reading from the readable side.\n     *\n     * @public\n     */\n    var TransformStream = /** @class */ (function () {\n        function TransformStream(rawTransformer, rawWritableStrategy, rawReadableStrategy) {\n            if (rawTransformer === void 0) { rawTransformer = {}; }\n            if (rawWritableStrategy === void 0) { rawWritableStrategy = {}; }\n            if (rawReadableStrategy === void 0) { rawReadableStrategy = {}; }\n            if (rawTransformer === undefined) {\n                rawTransformer = null;\n            }\n            var writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n            var readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n            var transformer = convertTransformer(rawTransformer, 'First parameter');\n            if (transformer.readableType !== undefined) {\n                throw new RangeError('Invalid readableType specified');\n            }\n            if (transformer.writableType !== undefined) {\n                throw new RangeError('Invalid writableType specified');\n            }\n            var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n            var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n            var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n            var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n            var startPromise_resolve;\n            var startPromise = newPromise(function (resolve) {\n                startPromise_resolve = resolve;\n            });\n            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n            if (transformer.start !== undefined) {\n                startPromise_resolve(transformer.start(this._transformStreamController));\n            }\n            else {\n                startPromise_resolve(undefined);\n            }\n        }\n        Object.defineProperty(TransformStream.prototype, \"readable\", {\n            /**\n             * The readable side of the transform stream.\n             */\n            get: function () {\n                if (!IsTransformStream(this)) {\n                    throw streamBrandCheckException('readable');\n                }\n                return this._readable;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(TransformStream.prototype, \"writable\", {\n            /**\n             * The writable side of the transform stream.\n             */\n            get: function () {\n                if (!IsTransformStream(this)) {\n                    throw streamBrandCheckException('writable');\n                }\n                return this._writable;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return TransformStream;\n    }());\n    Object.defineProperties(TransformStream.prototype, {\n        readable: { enumerable: true },\n        writable: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n            value: 'TransformStream',\n            configurable: true\n        });\n    }\n    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n        function startAlgorithm() {\n            return startPromise;\n        }\n        function writeAlgorithm(chunk) {\n            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n        }\n        function abortAlgorithm(reason) {\n            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n        }\n        function closeAlgorithm() {\n            return TransformStreamDefaultSinkCloseAlgorithm(stream);\n        }\n        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n        function pullAlgorithm() {\n            return TransformStreamDefaultSourcePullAlgorithm(stream);\n        }\n        function cancelAlgorithm(reason) {\n            TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n            return promiseResolvedWith(undefined);\n        }\n        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n        stream._backpressure = undefined;\n        stream._backpressureChangePromise = undefined;\n        stream._backpressureChangePromise_resolve = undefined;\n        TransformStreamSetBackpressure(stream, true);\n        stream._transformStreamController = undefined;\n    }\n    function IsTransformStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n            return false;\n        }\n        return x instanceof TransformStream;\n    }\n    // This is a no-op if both sides are already errored.\n    function TransformStreamError(stream, e) {\n        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n        TransformStreamErrorWritableAndUnblockWrite(stream, e);\n    }\n    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n        if (stream._backpressure) {\n            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n            // _backpressure is set.\n            TransformStreamSetBackpressure(stream, false);\n        }\n    }\n    function TransformStreamSetBackpressure(stream, backpressure) {\n        // Passes also when called during construction.\n        if (stream._backpressureChangePromise !== undefined) {\n            stream._backpressureChangePromise_resolve();\n        }\n        stream._backpressureChangePromise = newPromise(function (resolve) {\n            stream._backpressureChangePromise_resolve = resolve;\n        });\n        stream._backpressure = backpressure;\n    }\n    // Class TransformStreamDefaultController\n    /**\n     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n     *\n     * @public\n     */\n    var TransformStreamDefaultController = /** @class */ (function () {\n        function TransformStreamDefaultController() {\n            throw new TypeError('Illegal constructor');\n        }\n        Object.defineProperty(TransformStreamDefaultController.prototype, \"desiredSize\", {\n            /**\n             * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n             */\n            get: function () {\n                if (!IsTransformStreamDefaultController(this)) {\n                    throw defaultControllerBrandCheckException('desiredSize');\n                }\n                var readableController = this._controlledTransformStream._readable._readableStreamController;\n                return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        TransformStreamDefaultController.prototype.enqueue = function (chunk) {\n            if (chunk === void 0) { chunk = undefined; }\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('enqueue');\n            }\n            TransformStreamDefaultControllerEnqueue(this, chunk);\n        };\n        /**\n         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n         */\n        TransformStreamDefaultController.prototype.error = function (reason) {\n            if (reason === void 0) { reason = undefined; }\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('error');\n            }\n            TransformStreamDefaultControllerError(this, reason);\n        };\n        /**\n         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n         * transformer only needs to consume a portion of the chunks written to the writable side.\n         */\n        TransformStreamDefaultController.prototype.terminate = function () {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('terminate');\n            }\n            TransformStreamDefaultControllerTerminate(this);\n        };\n        return TransformStreamDefaultController;\n    }());\n    Object.defineProperties(TransformStreamDefaultController.prototype, {\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        terminate: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'TransformStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Transform Stream Default Controller Abstract Operations\n    function IsTransformStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n            return false;\n        }\n        return x instanceof TransformStreamDefaultController;\n    }\n    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n        controller._controlledTransformStream = stream;\n        stream._transformStreamController = controller;\n        controller._transformAlgorithm = transformAlgorithm;\n        controller._flushAlgorithm = flushAlgorithm;\n    }\n    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n        var controller = Object.create(TransformStreamDefaultController.prototype);\n        var transformAlgorithm = function (chunk) {\n            try {\n                TransformStreamDefaultControllerEnqueue(controller, chunk);\n                return promiseResolvedWith(undefined);\n            }\n            catch (transformResultE) {\n                return promiseRejectedWith(transformResultE);\n            }\n        };\n        var flushAlgorithm = function () { return promiseResolvedWith(undefined); };\n        if (transformer.transform !== undefined) {\n            transformAlgorithm = function (chunk) { return transformer.transform(chunk, controller); };\n        }\n        if (transformer.flush !== undefined) {\n            flushAlgorithm = function () { return transformer.flush(controller); };\n        }\n        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n    }\n    function TransformStreamDefaultControllerClearAlgorithms(controller) {\n        controller._transformAlgorithm = undefined;\n        controller._flushAlgorithm = undefined;\n    }\n    function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n        var stream = controller._controlledTransformStream;\n        var readableController = stream._readable._readableStreamController;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n            throw new TypeError('Readable side is not in a state that permits enqueue');\n        }\n        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n        // accept TransformStreamDefaultControllerEnqueue() calls.\n        try {\n            ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n        }\n        catch (e) {\n            // This happens when readableStrategy.size() throws.\n            TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            throw stream._readable._storedError;\n        }\n        var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n        if (backpressure !== stream._backpressure) {\n            TransformStreamSetBackpressure(stream, true);\n        }\n    }\n    function TransformStreamDefaultControllerError(controller, e) {\n        TransformStreamError(controller._controlledTransformStream, e);\n    }\n    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n        var transformPromise = controller._transformAlgorithm(chunk);\n        return transformPromiseWith(transformPromise, undefined, function (r) {\n            TransformStreamError(controller._controlledTransformStream, r);\n            throw r;\n        });\n    }\n    function TransformStreamDefaultControllerTerminate(controller) {\n        var stream = controller._controlledTransformStream;\n        var readableController = stream._readable._readableStreamController;\n        ReadableStreamDefaultControllerClose(readableController);\n        var error = new TypeError('TransformStream terminated');\n        TransformStreamErrorWritableAndUnblockWrite(stream, error);\n    }\n    // TransformStreamDefaultSink Algorithms\n    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n        var controller = stream._transformStreamController;\n        if (stream._backpressure) {\n            var backpressureChangePromise = stream._backpressureChangePromise;\n            return transformPromiseWith(backpressureChangePromise, function () {\n                var writable = stream._writable;\n                var state = writable._state;\n                if (state === 'erroring') {\n                    throw writable._storedError;\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            });\n        }\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n    }\n    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n        // errored.\n        TransformStreamError(stream, reason);\n        return promiseResolvedWith(undefined);\n    }\n    function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n        var readable = stream._readable;\n        var controller = stream._transformStreamController;\n        var flushPromise = controller._flushAlgorithm();\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        // Return a promise that is fulfilled with undefined on success.\n        return transformPromiseWith(flushPromise, function () {\n            if (readable._state === 'errored') {\n                throw readable._storedError;\n            }\n            ReadableStreamDefaultControllerClose(readable._readableStreamController);\n        }, function (r) {\n            TransformStreamError(stream, r);\n            throw readable._storedError;\n        });\n    }\n    // TransformStreamDefaultSource Algorithms\n    function TransformStreamDefaultSourcePullAlgorithm(stream) {\n        // Invariant. Enforced by the promises returned by start() and pull().\n        TransformStreamSetBackpressure(stream, false);\n        // Prevent the next pull() call until there is backpressure.\n        return stream._backpressureChangePromise;\n    }\n    // Helper functions for the TransformStreamDefaultController.\n    function defaultControllerBrandCheckException(name) {\n        return new TypeError(\"TransformStreamDefaultController.prototype.\" + name + \" can only be used on a TransformStreamDefaultController\");\n    }\n    // Helper functions for the TransformStream.\n    function streamBrandCheckException(name) {\n        return new TypeError(\"TransformStream.prototype.\" + name + \" can only be used on a TransformStream\");\n    }\n\n    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n    exports.CountQueuingStrategy = CountQueuingStrategy;\n    exports.ReadableByteStreamController = ReadableByteStreamController;\n    exports.ReadableStream = ReadableStream;\n    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n    exports.TransformStream = TransformStream;\n    exports.TransformStreamDefaultController = TransformStreamDefaultController;\n    exports.WritableStream = WritableStream;\n    exports.WritableStreamDefaultController = WritableStreamDefaultController;\n    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ponyfill.js.map\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @private\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = false }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttribute(\"width\", `${width}px`);\n    svg.setAttribute(\"height\", `${height}px`);\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @private\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isSameOrigin,\n  MissingPDFException,\n  PasswordException,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n} from \"./node_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\n\nconst DefaultCanvasFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultStandardFontDataFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef {function} IPDFStreamFactory\n * @param {DocumentInitParameters} params - The document initialization\n *   parameters. The \"url\" key is always present.\n * @returns {Promise} A promise, which is resolved with an instance of\n *   {IPDFStream}.\n * @ignore\n */\n\n/**\n * @type IPDFStreamFactory\n * @private\n */\nlet createPDFNetworkStream;\n\n/**\n * Sets the function that instantiates an {IPDFStream} as an alternative PDF\n * data transport.\n *\n * @param {IPDFStreamFactory} pdfNetworkStreamFactory - The factory function\n *   that takes document initialization parameters (including a \"url\") and\n *   returns a promise which is resolved with an instance of {IPDFStream}.\n * @ignore\n */\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string|URL} [url] - The URL of the PDF.\n * @property {TypedArray|Array<number>|string} [data] - Binary PDF data. Use\n *    typed arrays (Uint8Array) to improve the memory usage. If PDF data is\n *    BASE64-encoded, use `atob()` to convert it to a binary string first.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {TypedArray} [initialData] - A typed array with the first portion\n *   or all of the pdf data. Used by the extension since some data is already\n *   loaded before the switch to range requests.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string|URL|TypedArray|PDFDataRangeTransport|DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  const task = new PDFDocumentLoadingTask();\n\n  let source;\n  if (typeof src === \"string\" || src instanceof URL) {\n    source = { url: src };\n  } else if (isArrayBuffer(src)) {\n    source = { data: src };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = { range: src };\n  } else {\n    if (typeof src !== \"object\") {\n      throw new Error(\n        \"Invalid parameter in getDocument, \" +\n          \"need either string, URL, Uint8Array, or parameter object.\"\n      );\n    }\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\n        \"Invalid parameter object: need either .data, .range or .url\"\n      );\n    }\n    source = src;\n  }\n  const params = Object.create(null);\n  let rangeTransport = null,\n    worker = null;\n\n  for (const key in source) {\n    const value = source[key];\n\n    switch (key) {\n      case \"url\":\n        if (typeof window !== \"undefined\") {\n          try {\n            // The full path is required in the 'url' field.\n            params[key] = new URL(value, window.location).href;\n            continue;\n          } catch (ex) {\n            warn(`Cannot create valid URL: \"${ex}\".`);\n          }\n        } else if (typeof value === \"string\" || value instanceof URL) {\n          params[key] = value.toString(); // Support Node.js environments.\n          continue;\n        }\n        throw new Error(\n          \"Invalid PDF url data: \" +\n            \"either string or URL-object is expected in the url property.\"\n        );\n      case \"range\":\n        rangeTransport = value;\n        continue;\n      case \"worker\":\n        worker = value;\n        continue;\n      case \"data\":\n        // Converting string or array-like data to Uint8Array.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          isNodeJS &&\n          typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n          value instanceof Buffer // eslint-disable-line no-undef\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (value instanceof Uint8Array) {\n          break; // Use the data as-is when it's already a Uint8Array.\n        } else if (typeof value === \"string\") {\n          params[key] = stringToBytes(value);\n        } else if (\n          typeof value === \"object\" &&\n          value !== null &&\n          !isNaN(value.length)\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (isArrayBuffer(value)) {\n          params[key] = new Uint8Array(value);\n        } else {\n          throw new Error(\n            \"Invalid PDF binary data: either typed array, \" +\n              \"string, or array-like object is expected in the data property.\"\n          );\n        }\n        continue;\n    }\n    params[key] = value;\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory =\n    params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.StandardFontDataFactory =\n    params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n  params.enableXfa = params.enableXfa === true;\n\n  if (\n    typeof params.docBaseUrl !== \"string\" ||\n    isDataScheme(params.docBaseUrl)\n  ) {\n    // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n    // URLs anyway. We want to avoid sending them to the worker-thread, since\n    // they contain the *entire* PDF document and can thus be arbitrarily long.\n    params.docBaseUrl = null;\n  }\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n  if (typeof params.useWorkerFetch !== \"boolean\") {\n    params.useWorkerFetch =\n      params.CMapReaderFactory === DOMCMapReaderFactory &&\n      params.StandardFontDataFactory === DOMStandardFontDataFactory;\n  }\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace =\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS;\n  }\n  if (typeof params.useSystemFonts !== \"boolean\") {\n    params.useSystemFonts =\n      !(\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        isNodeJS\n      ) && !params.disableFontFace;\n  }\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(params.verbosity);\n\n  if (!worker) {\n    const workerParams = {\n      verbosity: params.verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docId = task.docId;\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(\n        worker,\n        params,\n        rangeTransport,\n        docId\n      );\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length: params.length,\n              initialData: params.initialData,\n              progressiveDone: params.progressiveDone,\n              contentDispositionFilename: params.contentDispositionFilename,\n              disableRange: params.disableRange,\n              disableStream: params.disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            params\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @param {PDFDataRangeTransport} pdfDataRangeTransport\n * @param {string} docId - Unique document ID, used in `MessageHandler`.\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    source.contentDispositionFilename =\n      pdfDataRangeTransport.contentDispositionFilename;\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    {\n      docId,\n      apiVersion:\n        typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n          ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n          : null,\n      // Only send the required properties, and *not* the entire object.\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length,\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties,\n      enableXfa: source.enableXfa,\n      useSystemFonts: source.useSystemFonts,\n      cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n      standardFontDataUrl: source.useWorkerFetch\n        ? source.standardFontDataUrl\n        : null,\n    }\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static get idCounters() {\n    return shadow(this, \"idCounters\", { doc: 0 });\n  }\n\n  constructor() {\n    this._capability = createPromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n\n    /**\n     * Callback for when an unsupported feature is used in the PDF document.\n     * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n     * @type {function}\n     */\n    this.onUnsupportedFeature = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    await this._transport?.destroy();\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = createPromiseCapability();\n  }\n\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"fingerprint\", {\n        get() {\n          deprecated(\n            \"`PDFDocumentProxy.fingerprint`, \" +\n              \"please use `PDFDocumentProxy.fingerprints` instead.\"\n          );\n          return this.fingerprints[0];\n        },\n      });\n\n      Object.defineProperty(this, \"getStats\", {\n        value: async () => {\n          deprecated(\n            \"`PDFDocumentProxy.getStats`, \" +\n              \"please use the `PDFDocumentProxy.stats`-getter instead.\"\n          );\n          return this.stats || { streamTypes: {}, fontTypes: {} };\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentStats\n   * @property {Object<string, boolean>} streamTypes - Used stream types in the\n   *   document (an item is set to true if specific stream ID was used in the\n   *   document).\n   * @property {Object<string, boolean>} fontTypes - Used font types in the\n   *   document (an item is set to true if specific font ID was used in the\n   *   document).\n   */\n\n  /**\n   * @type {PDFDocumentStats | null} The current statistics about document\n   *   structures, or `null` when no statistics exists.\n   */\n  get stats() {\n    return this._transport.stats;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return !!this._transport._htmlForXfa;\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<TypedArray>} A promise that is resolved with a\n   *   {TypedArray} that has the raw data from the PDF.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      this._transport.annotationStorage.size <= 0\n    ) {\n      deprecated(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} normalizeWhitespace - Replaces all occurrences of\n *   whitespace with standard spaces (0x20). The default value is `false`.\n * @property {boolean} disableCombineTextItems - Do not attempt to combine\n *   same line {@link TextItem}'s. The default value is `false`.\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {Object} canvasContext - A 2D context of a DOM Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {Object} [imageLayer] - An object that has `beginLayout`,\n *   `endLayout` and `appendImage` functions.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object | string} [background] - Background to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap] - Map some\n *   annotation ids with canvases used to render them.\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this._annotationPromises = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    let promise = this._annotationPromises.get(intentArgs.cacheKey);\n    if (!promise) {\n      promise = this._transport.getAnnotations(\n        this._pageIndex,\n        intentArgs.renderingIntent\n      );\n      this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n      if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n        promise = promise.then(annotations => {\n          for (const annotation of annotations) {\n            if (annotation.titleObj !== undefined) {\n              Object.defineProperty(annotation, \"title\", {\n                get() {\n                  deprecated(\n                    \"`title`-property on annotation, please use `titleObj` instead.\"\n                  );\n                  return annotation.titleObj.str;\n                },\n              });\n            }\n            if (annotation.contentsObj !== undefined) {\n              Object.defineProperty(annotation, \"contents\", {\n                get() {\n                  deprecated(\n                    \"`contents`-property on annotation, please use `contentsObj` instead.\"\n                  );\n                  return annotation.contentsObj.str;\n                },\n              });\n            }\n          }\n          return annotations;\n        });\n      }\n    }\n    return promise;\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return (this._jsActionsPromise ||= this._transport.getPageJSActions(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    imageLayer = null,\n    canvasFactory = null,\n    background = null,\n    optionalContentConfigPromise = null,\n    annotationCanvasMap = null,\n  }) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n      if (arguments[0]?.renderInteractiveForms !== undefined) {\n        deprecated(\n          \"render no longer accepts the `renderInteractiveForms`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].renderInteractiveForms === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_FORMS;\n        }\n      }\n      if (arguments[0]?.includeAnnotationStorage !== undefined) {\n        deprecated(\n          \"render no longer accepts the `includeAnnotationStorage`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].includeAnnotationStorage === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_STORAGE;\n        }\n      }\n    }\n\n    if (this._stats) {\n      this._stats.time(\"Overall\");\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render.\n    this.pendingCleanup = false;\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const canvasFactoryInstance =\n      canvasFactory ||\n      new DefaultCanvasFactory({ ownerDocument: this._ownerDocument });\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = createPromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup once rendering has finished (regardless of cleanupAfterRender).\n      if (this.cleanupAfterRender || intentPrint) {\n        this.pendingCleanup = true;\n      }\n      this._tryCleanup();\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n      }\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      annotationCanvasMap,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: canvasFactoryInstance,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n  } = {}) {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = createPromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    normalizeWhitespace = false,\n    disableCombineTextItems = false,\n    includeMarkedContent = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true,\n        includeMarkedContent: includeMarkedContent === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return (this._structTreePromise ||= this._transport.getStructTree(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    this.pendingCleanup = false;\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.pendingCleanup = true;\n    return this._tryCleanup(resetStats);\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup(resetStats = false) {\n    if (!this.pendingCleanup) {\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n\n    this._intentStates.clear();\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    if (resetStats && this._stats) {\n      this._stats = new StatTimer();\n    }\n    this.pendingCleanup = false;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    if (this._stats) {\n      this._stats.timeEnd(\"Page Request\");\n    }\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    if (intentState.displayReadyCapability) {\n      intentState.displayReadyCapability.resolve(transparency);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this._tryCleanup();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({ renderingIntent, cacheKey }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage:\n          renderingIntent & RenderingIntentFlag.ANNOTATIONS_STORAGE\n            ? this._transport.annotationStorage.serializable\n            : null,\n      }\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          this._abortOperatorList({ intentState, reason, force: true });\n          intentState.streamReaderCancelTimeout = null;\n        }, RENDERING_CANCELLED_TIMEOUT);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  constructor() {\n    this._listeners = [];\n    this._deferred = Promise.resolve();\n  }\n\n  postMessage(obj, transfers) {\n    function cloneValue(object) {\n      if (\n        (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        globalThis.structuredClone\n      ) {\n        return globalThis.structuredClone(object, transfers);\n      }\n\n      // Trying to perform a structured clone close to the spec, including\n      // transfers.\n      function fallbackCloneValue(value) {\n        if (\n          typeof value === \"function\" ||\n          typeof value === \"symbol\" ||\n          value instanceof URL\n        ) {\n          throw new Error(\n            `LoopbackPort.postMessage - cannot clone: ${value?.toString()}`\n          );\n        }\n\n        if (typeof value !== \"object\" || value === null) {\n          return value;\n        }\n        if (cloned.has(value)) {\n          // already cloned the object\n          return cloned.get(value);\n        }\n        let buffer, result;\n        if ((buffer = value.buffer) && isArrayBuffer(buffer)) {\n          // We found object with ArrayBuffer (typed array).\n          if (transfers?.includes(buffer)) {\n            result = new value.constructor(\n              buffer,\n              value.byteOffset,\n              value.byteLength\n            );\n          } else {\n            result = new value.constructor(value);\n          }\n          cloned.set(value, result);\n          return result;\n        }\n        if (value instanceof Map) {\n          result = new Map();\n          cloned.set(value, result); // Adding to cache now for cyclic references.\n          for (const [key, val] of value) {\n            result.set(key, fallbackCloneValue(val));\n          }\n          return result;\n        }\n        if (value instanceof Set) {\n          result = new Set();\n          cloned.set(value, result); // Adding to cache now for cyclic references.\n          for (const val of value) {\n            result.add(fallbackCloneValue(val));\n          }\n          return result;\n        }\n        result = Array.isArray(value) ? [] : Object.create(null);\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        // Cloning all value and object properties, however ignoring properties\n        // defined via getter.\n        for (const i in value) {\n          let desc,\n            p = value;\n          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n            p = Object.getPrototypeOf(p);\n          }\n          if (typeof desc.value === \"undefined\") {\n            continue;\n          }\n          if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n            continue;\n          }\n          result[i] = fallbackCloneValue(desc.value);\n        }\n        return result;\n      }\n\n      const cloned = new WeakMap();\n      return fallbackCloneValue(object);\n    }\n\n    const event = { data: cloneValue(obj) };\n\n    this._deferred.then(() => {\n      for (const listener of this._listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this._listeners.push(listener);\n  }\n\n  removeEventListener(name, listener) {\n    const i = this._listeners.indexOf(listener);\n    this._listeners.splice(i, 1);\n  }\n\n  terminate() {\n    this._listeners.length = 0;\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Object} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static get _workerPorts() {\n    return shadow(this, \"_workerPorts\", new WeakMap());\n  }\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    if (port && PDFWorker._workerPorts.has(port)) {\n      throw new Error(\"Cannot use more than one PDFWorker per port.\");\n    }\n\n    this.name = name;\n    this.destroyed = false;\n    this.verbosity = verbosity;\n\n    this._readyCapability = createPromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (port) {\n      PDFWorker._workerPorts.set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      typeof Worker !== \"undefined\" &&\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let workerSrc = PDFWorker.workerSrc;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        // Some versions of FF can't create a worker on localhost, see:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n        const worker = new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch (e) {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array([255]);\n          // Some versions of Opera throw a DATA_CLONE_ERR on serializing the\n          // typed array. Also, checking if we can use transfers.\n          try {\n            messageHandler.send(\"test\", testObj, [testObj.buffer]);\n          } catch (ex) {\n            warn(\"Cannot use postMessage transfers.\");\n            testObj[0] = 0;\n            messageHandler.send(\"test\", testObj);\n          }\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch (e) {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker._workerPorts.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    if (this._workerPorts.has(params.port)) {\n      return this._workerPorts.get(params.port);\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n        const worker = await import(\"pdfjs/core/worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  PDFWorker.getWorkerSrc = function () {\n    deprecated(\n      \"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\"\n    );\n    return this.workerSrc;\n  };\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  #docStats = null;\n\n  #pageCache = new Map();\n\n  #pagePromises = new Map();\n\n  #metadataPromise = null;\n\n  constructor(messageHandler, loadingTask, networkStream, params) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    if (!params.useWorkerFetch) {\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked,\n      });\n      this.StandardFontDataFactory = new params.StandardFontDataFactory({\n        baseUrl: params.standardFontDataUrl,\n      });\n    }\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.downloadInfoCapability = createPromiseCapability();\n\n    this.setupMessageHandler();\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  get stats() {\n    return this.#docStats;\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let lastModified = \"\";\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        lastModified = this.annotationStorage.lastModified;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${lastModified}`,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = createPromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.#pageCache.values()) {\n      waitOn.push(page._destroy());\n    }\n    this.#pageCache.clear();\n    this.#pagePromises.clear();\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this.#metadataPromise = null;\n      this._getFieldObjectsPromise = null;\n      this._hasJSActionsPromise = null;\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = createPromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress) {\n            loadingTask.onProgress?.(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            loadingTask.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.total,\n            });\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = createPromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          this._passwordCapability.resolve({\n            password,\n          });\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      loadingTask.onProgress?.({\n        loaded: data.length,\n        total: data.length,\n      });\n\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.#pageCache.get(data.pageIndex);\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          let fontRegistry = null;\n          if (params.pdfBug && globalThis.FontInspector?.enabled) {\n            fontRegistry = {\n              registerFont(font, url) {\n                globalThis.FontInspector.fontAdded(font, url);\n              },\n            };\n          }\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            fontRegistry,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return;\n      }\n\n      const pageProxy = this.#pageCache.get(pageIndex);\n      if (pageProxy.objs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n          if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n            pageProxy.cleanupAfterRender = true;\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      loadingTask.onProgress?.({\n        loaded: data.loaded,\n        total: data.total,\n      });\n    });\n\n    messageHandler.on(\"DocStats\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      // Ensure that a `PDFDocumentProxy.stats` call-site cannot accidentally\n      // modify this internal data.\n      this.#docStats = Object.freeze({\n        streamTypes: Object.freeze(data.streamTypes),\n        fontTypes: Object.freeze(data.fontTypes),\n      });\n    });\n\n    messageHandler.on(\n      \"UnsupportedFeature\",\n      this._onUnsupportedFeature.bind(this)\n    );\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.CMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.CMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.StandardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.StandardFontDataFactory.fetch(data);\n    });\n  }\n\n  _onUnsupportedFeature({ featureId }) {\n    if (this.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    this.loadingTask.onUnsupportedFeature?.(featureId);\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request\"));\n    }\n\n    const pageIndex = pageNumber - 1,\n      cachedPromise = this.#pagePromises.get(pageIndex);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.ownerDocument,\n          this._params.pdfBug\n        );\n        this.#pageCache.set(pageIndex, page);\n        return page;\n      });\n    this.#pagePromises.set(pageIndex, promise);\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      ref,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  saveDocument() {\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: this.annotationStorage.serializable,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getFieldObjects() {\n    return (this._getFieldObjectsPromise ||=\n      this.messageHandler.sendWithPromise(\"GetFieldObjects\", null));\n  }\n\n  hasJSActions() {\n    return (this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\n      \"HasJSActions\",\n      null\n    ));\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    return (this.#metadataPromise ||= this.messageHandler\n      .sendWithPromise(\"GetMetadata\", null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      }));\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    for (const page of this.#pageCache.values()) {\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(\n          `startCleanup: Page ${page.pageNumber} is currently rendering.`\n        );\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this.#metadataPromise = null;\n    this._getFieldObjectsPromise = null;\n    this._hasJSActionsPromise = null;\n  }\n\n  get loadingParams() {\n    const params = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch: params.disableAutoFetch,\n      enableXfa: params.enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n * @ignore\n */\nclass PDFObjects {\n  constructor() {\n    this._objs = Object.create(null);\n  }\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   * @private\n   */\n  _ensureObj(objId) {\n    if (this._objs[objId]) {\n      return this._objs[objId];\n    }\n    return (this._objs[objId] = {\n      capability: createPromiseCapability(),\n      data: null,\n      resolved: false,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      this._ensureObj(objId).capability.promise.then(callback);\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this._objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj || !obj.resolved) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  has(objId) {\n    const obj = this._objs[objId];\n    return obj?.resolved || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   */\n  resolve(objId, data) {\n    const obj = this._ensureObj(objId);\n\n    obj.resolved = true;\n    obj.data = data;\n    obj.capability.resolve(data);\n  }\n\n  clear() {\n    this._objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  constructor(internalRenderTask) {\n    this._internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   */\n  cancel() {\n    this._internalRenderTask.cancel();\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static get canvasInUse() {\n    return shadow(this, \"canvasInUse\", new WeakSet());\n  }\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    annotationCanvasMap,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this._pdfBug = pdfBug;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = createPromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, imageLayer, background } =\n      this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      imageLayer,\n      optionalContentConfig,\n      this.annotationCanvasMap\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    if (this.graphicsReadyCallback) {\n      this.graphicsReadyCallback();\n    }\n  }\n\n  cancel(error = null) {\n    this.running = false;\n    this.cancelled = true;\n    if (this.gfx) {\n      this.gfx.endDrawing();\n    }\n    if (this._canvas) {\n      InternalRenderTask.canvasInUse.delete(this._canvas);\n    }\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          \"canvas\"\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      if (!this.graphicsReadyCallback) {\n        this.graphicsReadyCallback = this._continueBound;\n      }\n      return;\n    }\n\n    if (this.stepper) {\n      this.stepper.updateOperatorList(this.operatorList);\n    }\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        if (this._canvas) {\n          InternalRenderTask.canvasInUse.delete(this._canvas);\n        }\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  RenderTask,\n  setPDFNetworkStreamFactory,\n  version,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  IsEvalSupportedCached,\n  shadow,\n  string32,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  warn,\n} from \"../shared/util.js\";\n\nclass BaseFontLoader {\n  constructor({\n    docId,\n    onUnsupportedFeature,\n    ownerDocument = globalThis.document,\n    // For testing only.\n    styleElement = null,\n  }) {\n    if (this.constructor === BaseFontLoader) {\n      unreachable(\"Cannot initialize BaseFontLoader.\");\n    }\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = [];\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ? styleElement\n        : null;\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.push(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    let styleElement = this.styleElement;\n    if (!styleElement) {\n      styleElement = this.styleElement = this._document.createElement(\"style\");\n      styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .appendChild(styleElement);\n    }\n    const styleSheet = styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.length = 0;\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || font.missingFile) {\n      return;\n    }\n    font.attached = true;\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          this._onUnsupportedFeature({\n            featureId: UNSUPPORTED_FEATURES.errorFontLoadNative,\n          });\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent([rule], [font], request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  _queueLoadingCallback(callback) {\n    unreachable(\"Abstract method `_queueLoadingCallback`.\");\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  // eslint-disable-next-line getter-return\n  get isSyncFontLoadingSupported() {\n    unreachable(\"Abstract method `isSyncFontLoadingSupported`.\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get _loadTestFont() {\n    unreachable(\"Abstract method `_loadTestFont`.\");\n  }\n\n  _prepareFontLoadEvent(rules, fontsToLoad, request) {\n    unreachable(\"Abstract method `_prepareFontLoadEvent`.\");\n  }\n}\n\nlet FontLoader;\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  FontLoader = class MozcentralFontLoader extends BaseFontLoader {\n    get isSyncFontLoadingSupported() {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n  };\n} else {\n  // PDFJSDev.test('CHROME || GENERIC')\n\n  FontLoader = class GenericFontLoader extends BaseFontLoader {\n    constructor(params) {\n      super(params);\n      this.loadingContext = {\n        requests: [],\n        nextRequestId: 0,\n      };\n      this.loadTestFontId = 0;\n    }\n\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n        if (typeof navigator === \"undefined\") {\n          // Node.js - we can pretend that sync font loading is supported.\n          supported = true;\n        } else {\n          // User agent string sniffing is bad, but there is no reliable way to\n          // tell if the font is fully loaded and ready to be used with canvas.\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(\n            navigator.userAgent\n          );\n          if (m?.[1] >= 14) {\n            supported = true;\n          }\n          // TODO - other browsers...\n        }\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n\n        // Sending all completed requests in order of how they were queued.\n        while (context.requests.length > 0 && context.requests[0].done) {\n          const otherRequest = context.requests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n\n      const context = this.loadingContext;\n      const request = {\n        id: `pdfjs-font-loading-${context.nextRequestId++}`,\n        done: false,\n        complete: completeRequest,\n        callback,\n      };\n      context.requests.push(request);\n      return request;\n    }\n\n    get _loadTestFont() {\n      const getLoadTestFont = function () {\n        // This is a CFF font with 1 glyph for '.' that fills its entire width\n        // and height.\n        return atob(\n          \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n            \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n            \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n            \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n            \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n            \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n            \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n            \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n            \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n            \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n            \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n            \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n            \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n            \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n            \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n            \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n            \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n        );\n      };\n      return shadow(this, \"_loadTestFont\", getLoadTestFont());\n    }\n\n    _prepareFontLoadEvent(rules, fonts, request) {\n      /** Hack begin */\n      // There's currently no event when a font has finished downloading so the\n      // following code is a dirty hack to 'guess' when a font is ready.\n      // It's assumed fonts are loaded in order, so add a known test font after\n      // the desired fonts and then test for the loading of that test font.\n\n      function int32(data, offset) {\n        return (\n          (data.charCodeAt(offset) << 24) |\n          (data.charCodeAt(offset + 1) << 16) |\n          (data.charCodeAt(offset + 2) << 8) |\n          (data.charCodeAt(offset + 3) & 0xff)\n        );\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n\n      // The temporary canvas is used to determine if fonts are loaded.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n\n      let called = 0;\n      function isFontReady(name, callback) {\n        called++;\n        // With setTimeout clamping this gives the font ~100ms to load.\n        if (called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      // Chromium seems to cache fonts based on a hash of the actual font data,\n      // so the font must be modified for each load test else it will appear to\n      // be loaded already.\n      // TODO: This could maybe be made faster by avoiding the btoa of the full\n      // font by splitting it in chunks before hand and padding the font id.\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n      data = spliceString(\n        data,\n        COMMENT_OFFSET,\n        loadTestFontId.length,\n        loadTestFontId\n      );\n      // CFF checksum is important for IE, adjusting it\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        // align to 4 bytes boundary\n        checksum =\n          (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n\n      const names = [];\n      for (const font of fonts) {\n        names.push(font.loadedName);\n      }\n      names.push(loadTestFontId);\n\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n\n      for (const name of names) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = name;\n        div.appendChild(span);\n      }\n      this._document.body.appendChild(div);\n\n      isFontReady(loadTestFontId, () => {\n        div.remove();\n        request.complete();\n      });\n      /** Hack end */\n    }\n  };\n} // End of PDFJSDev.test('CHROME || GENERIC')\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature,\n      fontRegistry = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this);\n    }\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this, url);\n    }\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      this._onUnsupportedFeature({\n        featureId: UNSUPPORTED_FEATURES.errorFontGetPath,\n      });\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && IsEvalSupportedCached.value) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { unreachable } from \"../shared/util.js\";\n\nlet NodeCanvasFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCanvasFactory\");\n  }\n};\n\nlet NodeCMapReaderFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCMapReaderFactory\");\n  }\n};\n\nlet NodeStandardFontDataFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeStandardFontDataFactory\");\n  }\n};\n\nif ((typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS) {\n  const fetchData = function (url) {\n    return new Promise((resolve, reject) => {\n      const fs = __non_webpack_require__(\"fs\");\n      fs.readFile(url, (error, data) => {\n        if (error || !data) {\n          reject(new Error(error));\n          return;\n        }\n        resolve(new Uint8Array(data));\n      });\n    });\n  };\n\n  NodeCanvasFactory = class extends BaseCanvasFactory {\n    _createCanvas(width, height) {\n      const Canvas = __non_webpack_require__(\"canvas\");\n      return Canvas.createCanvas(width, height);\n    }\n  };\n\n  NodeCMapReaderFactory = class extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return fetchData(url).then(data => {\n        return { cMapData: data, compressionType };\n      });\n    }\n  };\n\n  NodeStandardFontDataFactory = class extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return fetchData(url);\n    }\n  };\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  constructor() {\n    this._storage = new Map();\n    this._timeStamp = Date.now();\n    this._modified = false;\n\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this._storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Set the value for a given key\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this._storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this._storage.set(key, value);\n    }\n    if (modified) {\n      this._timeStamp = Date.now();\n      this._setModified();\n    }\n  }\n\n  getAll() {\n    return this._storage.size > 0 ? objectFromMap(this._storage) : null;\n  }\n\n  get size() {\n    return this._storage.size;\n  }\n\n  /**\n   * @private\n   */\n  _setModified() {\n    if (!this._modified) {\n      this._modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this._modified) {\n      this._modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this._storage.size > 0 ? this._storage : null;\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get lastModified() {\n    return this._timeStamp.toString();\n  }\n}\n\nexport { AnnotationStorage };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  IsLittleEndianCached,\n  isNum,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  getShadingPattern,\n  PathType,\n  TilingPattern,\n} from \"./pattern_helper.js\";\nimport { PixelsPerInch } from \"./display_utils.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and shedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\nconst COMPILE_TYPE3_GLYPHS = true;\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n// Because of https://bugs.chromium.org/p/chromium/issues/detail?id=1170396\n// some curves aren't rendered correctly.\n// Multiplying lineWidth by this factor should help to have \"correct\"\n// rendering with no artifacts.\n// Once the bug is fixed upstream, we can remove this constant and its use.\nconst LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n/**\n * Overrides certain methods on a 2d ctx so that when they are called they\n * will also call the same method on the destCtx. The methods that are\n * overridden are all the transformation state modifiers, path creation, and\n * save/restore. We only forward these specific methods because they are the\n * only state modifiers that we cannot copy over when we switch contexts.\n *\n * To remove mirroring call `ctx._removeMirroring()`.\n *\n * @param {Object} ctx - The 2d canvas context that will duplicate its calls on\n *   the destCtx.\n * @param {Object} destCtx - The 2d canvas context that will receive the\n *   forwarded calls.\n */\nfunction mirrorContextOperations(ctx, destCtx) {\n  if (ctx._removeMirroring) {\n    throw new Error(\"Context is already forwarding operations.\");\n  }\n  ctx.__originalSave = ctx.save;\n  ctx.__originalRestore = ctx.restore;\n  ctx.__originalRotate = ctx.rotate;\n  ctx.__originalScale = ctx.scale;\n  ctx.__originalTranslate = ctx.translate;\n  ctx.__originalTransform = ctx.transform;\n  ctx.__originalSetTransform = ctx.setTransform;\n  ctx.__originalResetTransform = ctx.resetTransform;\n  ctx.__originalClip = ctx.clip;\n  ctx.__originalMoveTo = ctx.moveTo;\n  ctx.__originalLineTo = ctx.lineTo;\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n  ctx.__originalRect = ctx.rect;\n  ctx.__originalClosePath = ctx.closePath;\n  ctx.__originalBeginPath = ctx.beginPath;\n\n  ctx._removeMirroring = () => {\n    ctx.save = ctx.__originalSave;\n    ctx.restore = ctx.__originalRestore;\n    ctx.rotate = ctx.__originalRotate;\n    ctx.scale = ctx.__originalScale;\n    ctx.translate = ctx.__originalTranslate;\n    ctx.transform = ctx.__originalTransform;\n    ctx.setTransform = ctx.__originalSetTransform;\n    ctx.resetTransform = ctx.__originalResetTransform;\n\n    ctx.clip = ctx.__originalClip;\n    ctx.moveTo = ctx.__originalMoveTo;\n    ctx.lineTo = ctx.__originalLineTo;\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n    ctx.rect = ctx.__originalRect;\n    ctx.closePath = ctx.__originalClosePath;\n    ctx.beginPath = ctx.__originalBeginPath;\n    delete ctx._removeMirroring;\n  };\n\n  ctx.save = function ctxSave() {\n    destCtx.save();\n    this.__originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    destCtx.restore();\n    this.__originalRestore();\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    destCtx.translate(x, y);\n    this.__originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    destCtx.scale(x, y);\n    this.__originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    destCtx.transform(a, b, c, d, e, f);\n    this.__originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    destCtx.setTransform(a, b, c, d, e, f);\n    this.__originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    destCtx.resetTransform();\n    this.__originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    destCtx.rotate(angle);\n    this.__originalRotate(angle);\n  };\n\n  ctx.clip = function ctxRotate(rule) {\n    destCtx.clip(rule);\n    this.__originalClip(rule);\n  };\n\n  ctx.moveTo = function (x, y) {\n    destCtx.moveTo(x, y);\n    this.__originalMoveTo(x, y);\n  };\n\n  ctx.lineTo = function (x, y) {\n    destCtx.lineTo(x, y);\n    this.__originalLineTo(x, y);\n  };\n\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  };\n\n  ctx.rect = function (x, y, width, height) {\n    destCtx.rect(x, y, width, height);\n    this.__originalRect(x, y, width, height);\n  };\n\n  ctx.closePath = function () {\n    destCtx.closePath();\n    this.__originalClosePath();\n  };\n\n  ctx.beginPath = function () {\n    destCtx.beginPath();\n    this.__originalBeginPath();\n  };\n}\n\nfunction addContextCurrentTransform(ctx) {\n  // If the context doesn't expose a `mozCurrentTransform`, add a JS based one.\n  if (ctx.mozCurrentTransform) {\n    return;\n  }\n  ctx._originalSave = ctx.save;\n  ctx._originalRestore = ctx.restore;\n  ctx._originalRotate = ctx.rotate;\n  ctx._originalScale = ctx.scale;\n  ctx._originalTranslate = ctx.translate;\n  ctx._originalTransform = ctx.transform;\n  ctx._originalSetTransform = ctx.setTransform;\n  ctx._originalResetTransform = ctx.resetTransform;\n\n  ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n  ctx._transformStack = [];\n\n  try {\n    // The call to getOwnPropertyDescriptor throws an exception in Node.js:\n    // \"TypeError: Method lineWidth called on incompatible receiver\n    //  #<CanvasRenderingContext2D>\".\n    const desc = Object.getOwnPropertyDescriptor(\n      Object.getPrototypeOf(ctx),\n      \"lineWidth\"\n    );\n\n    ctx._setLineWidth = desc.set;\n    ctx._getLineWidth = desc.get;\n\n    Object.defineProperty(ctx, \"lineWidth\", {\n      set: function setLineWidth(width) {\n        this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n      },\n      get: function getLineWidth() {\n        return this._getLineWidth();\n      },\n    });\n  } catch (_) {}\n\n  Object.defineProperty(ctx, \"mozCurrentTransform\", {\n    get: function getCurrentTransform() {\n      return this._transformMatrix;\n    },\n  });\n\n  Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n    get: function getCurrentTransformInverse() {\n      // Calculation done using WolframAlpha:\n      // http://www.wolframalpha.com/input/?\n      //   i=Inverse+{{a%2C+c%2C+e}%2C+{b%2C+d%2C+f}%2C+{0%2C+0%2C+1}}\n\n      const [a, b, c, d, e, f] = this._transformMatrix;\n      const ad_bc = a * d - b * c;\n      const bc_ad = b * c - a * d;\n\n      return [\n        d / ad_bc,\n        b / bc_ad,\n        c / bc_ad,\n        a / ad_bc,\n        (d * e - c * f) / bc_ad,\n        (b * e - a * f) / ad_bc,\n      ];\n    },\n  });\n\n  ctx.save = function ctxSave() {\n    const old = this._transformMatrix;\n    this._transformStack.push(old);\n    this._transformMatrix = old.slice(0, 6);\n\n    this._originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    const prev = this._transformStack.pop();\n    if (prev) {\n      this._transformMatrix = prev;\n      this._originalRestore();\n    }\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    const m = this._transformMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n\n    this._originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    const m = this._transformMatrix;\n    m[0] *= x;\n    m[1] *= x;\n    m[2] *= y;\n    m[3] *= y;\n\n    this._originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * a + m[2] * b,\n      m[1] * a + m[3] * b,\n      m[0] * c + m[2] * d,\n      m[1] * c + m[3] * d,\n      m[0] * e + m[2] * f + m[4],\n      m[1] * e + m[3] * f + m[5],\n    ];\n\n    ctx._originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    this._transformMatrix = [a, b, c, d, e, f];\n\n    ctx._originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n    ctx._originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    const cosValue = Math.cos(angle);\n    const sinValue = Math.sin(angle);\n\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * cosValue + m[2] * sinValue,\n      m[1] * cosValue + m[3] * sinValue,\n      m[0] * -sinValue + m[2] * cosValue,\n      m[1] * -sinValue + m[3] * cosValue,\n      m[4],\n      m[5],\n    ];\n\n    this._originalRotate(angle);\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height, trackTransform) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n      // reset canvas transform for emulated mozCurrentTransform, if needed\n      canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    if (trackTransform) {\n      addContextCurrentTransform(canvasEntry.context);\n    }\n    return canvasEntry;\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\nfunction compileType3Glyph(imgData) {\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width = imgData.width,\n    height = imgData.height,\n    width1 = width + 1;\n  let i, ii, j, j0;\n  const points = new Uint8Array(width1 * (height + 1));\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7,\n    data0 = imgData.data;\n  const data = new Uint8Array(lineSize * height);\n  let pos = 0;\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    const elem = data0[i];\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const outlines = [];\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    const coords = [p % width1, i];\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n\n      coords.push(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    outlines.push(coords);\n    --i;\n  }\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n    for (let k = 0, kk = outlines.length; k < kk; k++) {\n      const o = outlines[k];\n      c.moveTo(o[0], o[1]);\n      for (let l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor(width, height) {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.transferMaps = null;\n\n    this.startNewPathAndClipBox([0, 0, width, height]);\n  }\n\n  clone() {\n    const clone = Object.create(this);\n    clone.clipBox = this.clipBox.slice();\n    return clone;\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  updatePathMinMax(transform, x, y) {\n    [x, y] = Util.applyTransform([x, y], transform);\n    this.minX = Math.min(this.minX, x);\n    this.minY = Math.min(this.minY, y);\n    this.maxX = Math.max(this.maxX, x);\n    this.maxY = Math.max(this.maxY, y);\n  }\n\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3) {\n    const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n    this.updatePathMinMax(transform, box[0], box[1]);\n    this.updatePathMinMax(transform, box[2], box[3]);\n  }\n\n  getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\n    if (pathType === PathType.STROKE) {\n      if (!transform) {\n        unreachable(\"Stroke bounding box must include transform.\");\n      }\n      // Stroked paths can be outside of the path bounding box by 1/2 the line\n      // width.\n      const scale = Util.singularValueDecompose2dScale(transform);\n      const xStrokePad = (scale[0] * this.lineWidth) / 2;\n      const yStrokePad = (scale[1] * this.lineWidth) / 2;\n      box[0] -= xStrokePad;\n      box[1] -= yStrokePad;\n      box[2] += xStrokePad;\n      box[3] += yStrokePad;\n    }\n    return box;\n  }\n\n  updateClipFromPath() {\n    const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n  }\n\n  startNewPathAndClipBox(box) {\n    this.clipBox = box;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = 0;\n    this.maxY = 0;\n  }\n\n  getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    return Util.intersect(\n      this.clipBox,\n      this.getPathBoundingBox(pathType, transform)\n    );\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData, transferMaps = null) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n  if (transferMaps) {\n    switch (transferMaps.length) {\n      case 1:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[0];\n        transferMapBlue = transferMaps[0];\n        transferMapGray = transferMaps[0];\n        break;\n      case 4:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[1];\n        transferMapBlue = transferMaps[2];\n        transferMapGray = transferMaps[3];\n        break;\n    }\n  }\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    let white = 0xffffffff;\n    let black = IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n    if (transferMapGray) {\n      if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n        [white, black] = [black, white];\n      }\n    }\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < destPos; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n    let destPos = 3; // alpha component offset\n    for (let j = 0; j < thisChunkHeight; j++) {\n      let elem,\n        mask = 0;\n      for (let k = 0; k < width; k++) {\n        if (!mask) {\n          elem = src[srcPos++];\n          mask = 128;\n        }\n        dest[destPos] = elem & mask ? 0 : 255;\n        destPos += 4;\n        mask >>= 1;\n      }\n    }\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n  ];\n  for (let i = 0, ii = properties.length; i < ii; i++) {\n    const property = properties[i];\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = \"#000000\";\n  ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap,\n  layerOffsetX,\n  layerOffsetY,\n  maskOffsetX,\n  maskOffsetY\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  let composeFn;\n  if (subtype === \"Luminosity\") {\n    composeFn = composeSMaskLuminosity;\n  } else {\n    composeFn = composeSMaskAlpha;\n  }\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(\n      layerOffsetX - maskOffsetX,\n      row + (layerOffsetY - maskOffsetY),\n      width,\n      chunkHeight\n    );\n    const layerData = layerCtx.getImageData(\n      layerOffsetX,\n      row + layerOffsetY,\n      width,\n      chunkHeight\n    );\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx, layerBox) {\n  const layerOffsetX = layerBox[0];\n  const layerOffsetY = layerBox[1];\n  const layerWidth = layerBox[2] - layerOffsetX;\n  const layerHeight = layerBox[3] - layerOffsetY;\n  if (layerWidth === 0 || layerHeight === 0) {\n    return;\n  }\n  genericComposeSMask(\n    smask.context,\n    layerCtx,\n    layerWidth,\n    layerHeight,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap,\n    layerOffsetX,\n    layerOffsetY,\n    smask.offsetX,\n    smask.offsetY\n  );\n  ctx.save();\n  ctx.globalAlpha = 1;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.drawImage(layerCtx.canvas, 0, 0);\n  ctx.restore();\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    imageLayer,\n    optionalContentConfig,\n    annotationCanvasMap\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.imageLayer = imageLayer;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.suspendedCtx = null;\n    this.contentVisible = true;\n    this.markedContentStack = [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedPatterns = new Map();\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.viewportScale = 1;\n    this.outputScaleX = 1;\n    this.outputScaleY = 1;\n    if (canvasCtx) {\n      // NOTE: if mozCurrentTransform is polyfilled, then the current state of\n      // the transformation must already be set in canvasCtx._transformMatrix.\n      addContextCurrentTransform(canvasCtx);\n    }\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    this.ctx.save();\n    this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.restore();\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height,\n        true\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform.apply(this.ctx, transform);\n      this.outputScaleX = transform[0];\n      this.outputScaleY = transform[0];\n    }\n    this.ctx.transform.apply(this.ctx, viewport.transform);\n    this.viewportScale = viewport.scale;\n\n    this.baseTransform = this.ctx.mozCurrentTransform.slice();\n    this._combinedScaleFactor = Math.hypot(\n      this.baseTransform[0],\n      this.baseTransform[2]\n    );\n\n    if (this.imageLayer) {\n      this.imageLayer.beginLayout();\n    }\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  endDrawing() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.current.activeSMask !== null) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n\n    this.cachedCanvases.clear();\n    this.cachedPatterns.clear();\n\n    if (this.imageLayer) {\n      this.imageLayer.endLayout();\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        newWidth = Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        newHeight = Math.ceil(paintHeight / 2);\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const maskCanvas = this.cachedCanvases.getCanvas(\n      \"maskCanvas\",\n      width,\n      height\n    );\n    const maskCtx = maskCanvas.context;\n    putBinaryImageMask(maskCtx, img);\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n    const objToCanvas = ctx.mozCurrentTransform;\n    let maskToCanvas = Util.transform(objToCanvas, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.ceil(rect[2] - rect[0]);\n    const drawnHeight = Math.ceil(rect[3] - rect[1]);\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const fillCtx = fillCanvas.context;\n    // The offset will be the top-left cordinate mask.\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform.apply(fillCtx, maskToCanvas);\n    // Pre-scale if needed to improve image smoothing.\n    const scaled = this._scaleImage(\n      maskCanvas.canvas,\n      fillCtx.mozCurrentTransformInverse\n    );\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      fillCtx.mozCurrentTransform,\n      img.interpolate\n    );\n    fillCtx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.img.width,\n      scaled.img.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(fillCtx.mozCurrentTransformInverse, [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, PathType.FILL)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (let i = 0, ii = states.length; i < ii; i++) {\n      const state = states[i];\n      const key = state[0];\n      const value = state[1];\n\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = state[1];\n          break;\n        case \"ca\":\n          this.current.fillAlpha = state[1];\n          this.ctx.globalAlpha = state[1];\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          this.current.activeSMask = value ? this.tempSMask : null;\n          this.tempSMask = null;\n          this.checkSMaskState();\n          break;\n        case \"TR\":\n          this.current.transferMaps = value;\n      }\n    }\n  }\n\n  checkSMaskState() {\n    const inSMaskMode = !!this.suspendedCtx;\n    if (this.current.activeSMask && !inSMaskMode) {\n      this.beginSMaskMode();\n    } else if (!this.current.activeSMask && inSMaskMode) {\n      this.endSMaskMode();\n    }\n    // Else, the state is okay and nothing needs to be done.\n  }\n\n  /**\n   * Soft mask mode takes the current main drawing canvas and replaces it with\n   * a temporary canvas. Any drawing operations that happen on the temporary\n   * canvas need to be composed with the main canvas that was suspended (see\n   * `compose()`). The temporary canvas also duplicates many of its operations\n   * on the suspended canvas to keep them in sync, so that when the soft mask\n   * mode ends any clipping paths or transformations will still be active and in\n   * the right order on the canvas' graphics state stack.\n   */\n  beginSMaskMode() {\n    if (this.suspendedCtx) {\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\n    }\n    const drawnWidth = this.ctx.canvas.width;\n    const drawnHeight = this.ctx.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    this.suspendedCtx = this.ctx;\n    this.ctx = scratchCanvas.context;\n    const ctx = this.ctx;\n    ctx.setTransform.apply(ctx, this.suspendedCtx.mozCurrentTransform);\n    copyCtxState(this.suspendedCtx, ctx);\n    mirrorContextOperations(ctx, this.suspendedCtx);\n\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n  }\n\n  endSMaskMode() {\n    if (!this.suspendedCtx) {\n      throw new Error(\"endSMaskMode called while not in smask mode\");\n    }\n    // The soft mask is done, now restore the suspended canvas as the main\n    // drawing canvas.\n    this.ctx._removeMirroring();\n    copyCtxState(this.ctx, this.suspendedCtx);\n    this.ctx = this.suspendedCtx;\n\n    this.current.activeSMask = null;\n    this.suspendedCtx = null;\n  }\n\n  compose(dirtyBox) {\n    if (!this.current.activeSMask) {\n      return;\n    }\n\n    if (!dirtyBox) {\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n    } else {\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\n    }\n    const smask = this.current.activeSMask;\n    const suspendedCtx = this.suspendedCtx;\n\n    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n    // Whatever was drawn has been moved to the suspended canvas, now clear it\n    // out of the current canvas.\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.restore();\n  }\n\n  save() {\n    this.ctx.save();\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    if (this.stateStack.length === 0 && this.current.activeSMask) {\n      this.endSMaskMode();\n    }\n\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      this.ctx.restore();\n      this.checkSMaskState();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedGetSinglePixelWidth = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let startX, startY;\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n          current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n          current.updatePathMinMax(ctx.mozCurrentTransform, xw, yh);\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          current.updatePathMinMax(ctx.mozCurrentTransform, x, y);\n          break;\n        case OPS.curveTo:\n          startX = x;\n          startY = y;\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          current.updateCurvePathMinMax(\n            ctx.mozCurrentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          startX = x;\n          startY = y;\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          current.updateCurvePathMinMax(\n            ctx.mozCurrentTransform,\n            startX,\n            startY,\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          startX = x;\n          startY = y;\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          current.updateCurvePathMinMax(\n            ctx.mozCurrentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            x,\n            y,\n            x,\n            y\n          );\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        const lineWidth = this.getSinglePixelWidth();\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          ctx.mozCurrentTransformInverse,\n          PathType.STROKE\n        );\n        // Prevent drawing too thin lines by enforcing a minimum line width.\n        ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n        ctx.stroke();\n        ctx.restore();\n      } else {\n        const lineWidth = this.getSinglePixelWidth();\n        if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n          // The current transform will transform a square pixel into a\n          // parallelogram where both heights are lower than 1 and not equal.\n          ctx.save();\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          // Prevent drawing too thin lines by enforcing a minimum line width.\n          ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n          ctx.stroke();\n        }\n      }\n    }\n    if (consumePath) {\n      this.consumePath(this.current.getClippedPathBoundingBox());\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse,\n        PathType.FILL\n      );\n      needRestore = true;\n    }\n\n    const intersect = this.current.getClippedPathBoundingBox();\n    if (this.contentVisible && intersect !== null) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath(intersect);\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      ctx.setTransform.apply(ctx, path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n    const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform.apply(ctx, patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n        }\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.save();\n          ctx.moveTo(x, y);\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.strokeText(character, 0, 0);\n          ctx.restore();\n        } else {\n          ctx.strokeText(character, x, y);\n        }\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n      paths.push({\n        transform: ctx.mozCurrentTransform,\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let patternTransform;\n    if (current.patternFill) {\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse,\n        PathType.FILL\n      );\n      patternTransform = ctx.mozCurrentTransform;\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n\n    let lineWidth = current.lineWidth;\n    let resetLineWidthToOne = false;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        this._cachedGetSinglePixelWidth = null;\n        lineWidth = this.getSinglePixelWidth();\n        resetLineWidthToOne = lineWidth < 0;\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (isNum(glyph)) {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(\n            character,\n            scaledX,\n            scaledY,\n            patternTransform,\n            resetLineWidthToOne\n          );\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform,\n              resetLineWidthToOne\n            );\n          }\n        }\n      }\n\n      let charWidth;\n      if (vertical) {\n        charWidth = width * widthAdvanceScale - spacing * fontDirection;\n      } else {\n        charWidth = width * widthAdvanceScale + spacing * fontDirection;\n      }\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    this.compose();\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (isNum(glyph)) {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform.apply(ctx, fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    // TODO According to the spec we're also suppose to ignore any operators\n    // that set color or include images while processing this type3 font.\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform =\n        this.baseTransform || this.ctx.mozCurrentTransform.slice();\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(this.objs.get(objId));\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      ctx.mozCurrentTransformInverse,\n      PathType.SHADING\n    );\n\n    const inv = ctx.mozCurrentTransformInverse;\n    if (inv) {\n      const canvas = ctx.canvas;\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.compose(this.current.getClippedPathBoundingBox());\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform.apply(this, matrix);\n    }\n\n    this.baseTransform = this.ctx.mozCurrentTransform;\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.current.updatePathMinMax(\n        this.ctx.mozCurrentTransform,\n        bbox[0],\n        bbox[1]\n      );\n      this.current.updatePathMinMax(\n        this.ctx.mozCurrentTransform,\n        bbox[2],\n        bbox[3]\n      );\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    // If there's an active soft mask we don't want it enabled for the group, so\n    // clear it out. The mask and suspended canvas will be restored in endGroup.\n    const suspendedCtx = this.suspendedCtx;\n    if (this.current.activeSMask) {\n      this.suspendedCtx = null;\n      this.current.activeSMask = null;\n    }\n\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = currentCtx.mozCurrentTransform;\n    if (group.matrix) {\n      currentCtx.transform.apply(currentCtx, group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      currentCtx.mozCurrentTransform\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform.apply(groupCtx, currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n      currentCtx.save();\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push({\n      ctx: currentCtx,\n      suspendedCtx,\n    });\n    this.groupLevel++;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    const { ctx, suspendedCtx } = this.groupStack.pop();\n    this.ctx = ctx;\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (suspendedCtx) {\n      this.suspendedCtx = suspendedCtx;\n    }\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n      this.restore();\n    } else {\n      this.ctx.restore();\n      const currentMtx = this.ctx.mozCurrentTransform;\n      this.restore();\n      this.ctx.save();\n      this.ctx.setTransform.apply(this.ctx, currentMtx);\n      const dirtyBox = Util.getAxialAlignedBoundingBox(\n        [0, 0, groupCtx.canvas.width, groupCtx.canvas.height],\n        currentMtx\n      );\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      this.ctx.restore();\n      this.compose(dirtyBox);\n    }\n  }\n\n  beginAnnotations() {\n    this.save();\n    if (this.baseTransform) {\n      this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n    }\n  }\n\n  endAnnotations() {\n    this.restore();\n  }\n\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n    this.save();\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n\n      if (hasOwnCanvas && this.annotationCanvasMap) {\n        transform = transform.slice();\n        transform[4] -= rect[0];\n        transform[5] -= rect[1];\n\n        rect = rect.slice();\n        rect[0] = rect[1] = 0;\n        rect[2] = width;\n        rect[3] = height;\n\n        const [scaleX, scaleY] = Util.singularValueDecompose2dScale(\n          this.ctx.mozCurrentTransform\n        );\n        const { viewportScale } = this;\n        const canvasWidth = Math.ceil(\n          width * this.outputScaleX * viewportScale\n        );\n        const canvasHeight = Math.ceil(\n          height * this.outputScaleY * viewportScale\n        );\n\n        this.annotationCanvas = this.canvasFactory.create(\n          canvasWidth,\n          canvasHeight\n        );\n        const { canvas, context } = this.annotationCanvas;\n        canvas.style.width = `calc(${width}px * var(--viewport-scale-factor))`;\n        canvas.style.height = `calc(${height}px * var(--viewport-scale-factor))`;\n        this.annotationCanvasMap.set(id, canvas);\n        this.annotationCanvas.savedCtx = this.ctx;\n        this.ctx = context;\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n        addContextCurrentTransform(this.ctx);\n\n        resetCtxToDefault(this.ctx);\n      } else {\n        resetCtxToDefault(this.ctx);\n\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n    }\n\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n\n    this.transform.apply(this, transform);\n    this.transform.apply(this, matrix);\n  }\n\n  endAnnotation() {\n    if (this.annotationCanvas) {\n      this.ctx = this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas;\n    }\n    this.restore();\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n\n    const glyph = this.processingType3;\n\n    if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n      if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n        glyph.compiled = compileType3Glyph({ data: img.data, width, height });\n      } else {\n        glyph.compiled = null;\n      }\n    }\n\n    if (glyph?.compiled) {\n      glyph.compiled(ctx);\n      return;\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectRepeat(\n    imgData,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = ctx.mozCurrentTransform;\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(imgData);\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    for (let i = 0, ii = images.length; i < ii; i++) {\n      const image = images[i];\n      const width = image.width,\n        height = image.height;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      putBinaryImageMask(maskCtx, image);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            ctx.mozCurrentTransformInverse,\n            PathType.FILL\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform.apply(ctx, image.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    // typeof check is needed due to node.js support, see issue #8489\n    if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n      imgToPaint = tmpCanvas.canvas;\n    }\n\n    const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      ctx.mozCurrentTransform,\n      imgData.interpolate\n    );\n    ctx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n\n    if (this.imageLayer) {\n      const position = this.getCanvasPosition(0, -height);\n      this.imageLayer.appendImage({\n        imgData,\n        left: position[0],\n        top: position[1],\n        width: width / ctx.mozCurrentTransformInverse[0],\n        height: height / ctx.mozCurrentTransformInverse[3],\n      });\n    }\n    this.compose();\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const w = imgData.width;\n    const h = imgData.height;\n\n    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n    const tmpCtx = tmpCanvas.context;\n    putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n    for (let i = 0, ii = map.length; i < ii; i++) {\n      const entry = map[i];\n      ctx.save();\n      ctx.transform.apply(ctx, entry.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(\n        tmpCanvas.canvas,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      if (this.imageLayer) {\n        const position = this.getCanvasPosition(entry.x, entry.y);\n        this.imageLayer.appendImage({\n          imgData,\n          left: position[0],\n          top: position[1],\n          width: w,\n          height: h,\n        });\n      }\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n    this.compose();\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath(clipBox) {\n    if (this.pendingClip) {\n      this.current.updateClipFromPath();\n    }\n    if (!this.pendingClip) {\n      this.compose(clipBox);\n    }\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (this.pendingClip === EO_CLIP) {\n        ctx.clip(\"evenodd\");\n      } else {\n        ctx.clip();\n      }\n      this.pendingClip = null;\n    }\n    this.current.startNewPathAndClipBox(this.current.clipBox);\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (this._cachedGetSinglePixelWidth === null) {\n      // If transform is [a b] then a pixel (square) is transformed\n      //                 [c d]\n      // into a parallelogram: its area is the abs value of the determinant.\n      // This parallelogram has 2 heights:\n      //  - Area / |col_1|;\n      //  - Area / |col_2|.\n      // so in order to get a height of at least 1, pixel height\n      // must be computed as followed:\n      //  h = max(sqrt(a² + c²) / |det(M)|, sqrt(b² + d²) / |det(M)|).\n      // This is equivalent to:\n      //  h = max(|line_1_inv(M)|, |line_2_inv(M)|)\n      const m = this.ctx.mozCurrentTransform;\n\n      const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n      const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n      const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n      const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n      if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n        // The parallelogram isn't a square and at least one height\n        // is lower than 1 so the resulting line width must be 1\n        // but it cannot be achieved with one scale: when scaling a pixel\n        // we'll get a rectangle (see issue #12295).\n        // For example with matrix [0.001 0, 0, 100], a pixel is transformed\n        // in a rectangle 0.001x100. If we just scale by 1000 (to have a 1)\n        // then we'll get a rectangle 1x1e5 which is wrong.\n        // In this case, we must reset the transform, set linewidth to 1\n        // and then stroke.\n        this._cachedGetSinglePixelWidth = -(\n          this._combinedScaleFactor * pixelHeight\n        );\n      } else if (absDet > Number.EPSILON) {\n        this._cachedGetSinglePixelWidth = pixelHeight;\n      } else {\n        // Matrix is non-invertible.\n        this._cachedGetSinglePixelWidth = 1;\n      }\n    }\n\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getCanvasPosition(x, y) {\n    const transform = this.ctx.mozCurrentTransform;\n    return [\n      transform[0] * x + transform[2] * y + transform[4],\n      transform[1] * x + transform[3] * y + transform[5],\n    ];\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FormatError,\n  info,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nconst PathType = {\n  FILL: \"Fill\",\n  STROKE: \"Stroke\",\n  SHADING: \"Shading\",\n};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    let pattern;\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n      const ownerBBox = owner.current.getClippedPathBoundingBox(\n        pathType,\n        ctx.mozCurrentTransform\n      ) || [0, 0, 0, 0];\n      // Create a canvas that is only as big as the current path. This doesn't\n      // allow us to cache the pattern, but it generally creates much smaller\n      // canvases and saves memory use. See bug 1722807 for an example.\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\n        \"pattern\",\n        width,\n        height,\n        true\n      );\n\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.beginPath();\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      // Non shading fill patterns are positioned relative to the base transform\n      // (usually the page's initial transform), but we may have created a\n      // smaller canvas based on the path, so we must account for the shift.\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n      inverse = Util.transform(inverse, [\n        1,\n        0,\n        0,\n        1,\n        ownerBBox[0],\n        ownerBBox[1],\n      ]);\n\n      tmpCtx.transform.apply(tmpCtx, owner.baseTransform);\n      if (this.matrix) {\n        tmpCtx.transform.apply(tmpCtx, this.matrix);\n      }\n      applyBoundingBox(tmpCtx, this._bbox);\n\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\n      tmpCtx.fill();\n\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n      const domMatrix = new DOMMatrix(inverse);\n      try {\n        pattern.setTransform(domMatrix);\n      } catch (ex) {\n        // Avoid rendering breaking completely in Firefox 78 ESR,\n        // and in Node.js (see issue 13724).\n        warn(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n      }\n    } else {\n      // Shading fills are applied relative to the current matrix which is also\n      // how canvas gradients work, so there's no need to do anything special\n      // here.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else {\n        k = (y1 - y) / (y1 - y2);\n      }\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (pathType === PathType.SHADING) {\n      scale = Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      pathType === PathType.SHADING ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (pathType !== PathType.SHADING) {\n      ctx.setTransform.apply(ctx, owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform.apply(ctx, this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static get MAX_PATTERN_SIZE() {\n    return shadow(this, \"MAX_PATTERN_SIZE\", 3000);\n  }\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 cordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (pathType !== PathType.SHADING) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    try {\n      pattern.setTransform(domMatrix);\n    } catch (ex) {\n      // Avoid rendering breaking completely in Firefox 78 ESR,\n      // and in Node.js (see issue 13724).\n      warn(`TilingPattern.getPattern: \"${ex?.message}\".`);\n    }\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, PathType, TilingPattern };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort =\n  GlobalWorkerOptions.workerPort === undefined\n    ? null\n    : GlobalWorkerOptions.workerPort;\n\nGlobalWorkerOptions.workerSrc =\n  GlobalWorkerOptions.workerSrc === undefined\n    ? \"\"\n    : GlobalWorkerOptions.workerSrc;\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  PasswordException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  warn,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      throw new Error(\n        'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n      );\n    }\n    warn('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n    return reason;\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this.comObj.postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this.comObj.postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          comObj.postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        comObj.postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull && streamSink.onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(\n            streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason))\n          );\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall && streamController.startCall.promise,\n      streamController.pullCall && streamController.pullCall.promise,\n      streamController.cancelCall && streamController.cancelCall.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  #metadataMap;\n\n  #data;\n\n  constructor({ parsedData, rawData }) {\n    this.#metadataMap = parsedData;\n    this.#data = rawData;\n  }\n\n  getRaw() {\n    return this.#data;\n  }\n\n  get(name) {\n    return this.#metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this.#metadataMap);\n  }\n\n  has(name) {\n    return this.#metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectFromMap, warn } from \"../shared/util.js\";\n\nclass OptionalContentGroup {\n  constructor(name, intent) {\n    this.visible = true;\n    this.name = name;\n    this.intent = intent;\n  }\n}\n\nclass OptionalContentConfig {\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n    for (const group of data.groups) {\n      this._groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this._groups) {\n        group.visible = false;\n      }\n    }\n\n    for (const on of data.on) {\n      this._groups.get(on).visible = true;\n    }\n\n    for (const off of data.off) {\n      this._groups.get(off).visible = false;\n    }\n  }\n\n  _evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this._evaluateVisibilityExpression(element);\n      } else if (this._groups.has(element)) {\n        state = this._groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this._groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this._groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this._groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this._evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this._groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this._groups.get(id).visible = !!visible;\n  }\n\n  getOrder() {\n    if (!this._groups.size) {\n      return null;\n    }\n    if (this._order) {\n      return this._order.slice();\n    }\n    return Array.from(this._groups.keys());\n  }\n\n  getGroups() {\n    return this._groups.size > 0 ? objectFromMap(this._groups) : null;\n  }\n\n  getGroup(id) {\n    return this._groups.get(id) || null;\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, createPromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(params, pdfDataRangeTransport) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    this._contentDispositionFilename =\n      params.contentDispositionFilename || null;\n\n    const initialData = params.initialData;\n    if (initialData?.length > 0) {\n      const buffer = new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData(args) {\n    const buffer = new Uint8Array(args.chunk).buffer;\n    if (args.begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== args.begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      const firstReader = this._rangeReaders[0];\n      if (firstReader?.onProgress) {\n        firstReader.onProgress({ loaded: evt.loaded });\n      }\n    } else {\n      const fullReader = this._fullRequestReader;\n      if (fullReader?.onProgress) {\n        fullReader.onProgress({ loaded: evt.loaded, total: evt.total });\n      }\n    }\n  }\n\n  _onProgressiveDone() {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.progressiveDone();\n    }\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"./interfaces\").IDownloadManager} IDownloadManager */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  shadow,\n  stringToPDFString,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\nimport { XfaLayer } from \"./xfa_layer.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst GetElementsByNameSet = new WeakSet();\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPageProxy} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n * @property {Object} [mouseState]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement}\n   */\n  _createContainer(ignoreBorder = false) {\n    const data = this.data,\n      page = this.page,\n      viewport = this.viewport;\n    const container = document.createElement(\"section\");\n    let width = data.rect[2] - data.rect[0];\n    let height = data.rect[3] - data.rect[1];\n\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    if (data.hasOwnCanvas) {\n      const transform = viewport.transform.slice();\n      const [scaleX, scaleY] = Util.singularValueDecompose2dScale(transform);\n      width = Math.ceil(width * scaleX);\n      height = Math.ceil(height * scaleY);\n      rect[0] *= scaleX;\n      rect[1] *= scaleY;\n      // Reset the scale part of the transform matrix (which must be diagonal\n      // or anti-diagonal) in order to avoid to rescale the canvas.\n      // The canvas for the annotation is correctly scaled when it is drawn\n      // (see `beginAnnotation` in canvas.js).\n      for (let i = 0; i < 4; i++) {\n        transform[i] = Math.sign(transform[i]);\n      }\n      container.style.transform = `matrix(${transform.join(\",\")})`;\n    } else {\n      container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n    }\n\n    container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n      if (data.borderStyle.style !== AnnotationBorderStyleType.UNDERLINE) {\n        // Underline styles only have a bottom border, so we do not need\n        // to adjust for all borders. This yields a similar result as\n        // Adobe Acrobat/Reader.\n        width -= 2 * data.borderStyle.width;\n        height -= 2 * data.borderStyle.width;\n      }\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || data.color || null;\n      if (borderColor) {\n        container.style.borderColor = Util.makeHexColor(\n          data.color[0] | 0,\n          data.color[1] | 0,\n          data.color[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${rect[0]}px`;\n    container.style.top = `${rect[1]}px`;\n\n    if (data.hasOwnCanvas) {\n      container.style.width = container.style.height = \"auto\";\n    } else {\n      container.style.width = `${width}px`;\n      container.style.height = `${height}px`;\n    }\n    return container;\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger = trigger || this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.style.height = container.style.height;\n      trigger.style.width = container.style.width;\n      container.appendChild(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      titleObj: data.titleObj,\n      modificationDate: data.modificationDate,\n      contentsObj: data.contentsObj,\n      richText: data.richText,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = container.style.width;\n\n    container.appendChild(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _renderQuadrilaterals(className) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    for (const quadrilateral of this.quadrilaterals) {\n      quadrilateral.className = className;\n    }\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement|Array<HTMLSectionElement>}\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.getElementById(id);\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { id, exportValue } = domElement;\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n\n  static get platform() {\n    const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n\n    return shadow(this, \"platform\", {\n      isWin: platform.includes(\"Win\"),\n      isMac: platform.includes(\"Mac\"),\n    });\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters, options = null) {\n    const isRenderable = !!(\n      parameters.data.url ||\n      parameters.data.dest ||\n      parameters.data.action ||\n      parameters.data.isTooltipOnly ||\n      parameters.data.resetForm ||\n      (parameters.data.actions &&\n        (parameters.data.actions.Action ||\n          parameters.data.actions[\"Mouse Up\"] ||\n          parameters.data.actions[\"Mouse Down\"]))\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: !!options?.ignoreBorder,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n\n    if (data.url) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n    } else {\n      let hasClickAction = false;\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        hasClickAction = true;\n        this._bindJSAction(link, data);\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n      } else if (!hasClickAction) {\n        this._bindLink(link, \"\");\n      }\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.className = \"linkAnnotation\";\n    this.container.appendChild(link);\n    return this.container;\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      link.className = \"internalLink\";\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    link.className = \"internalLink\";\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    link.className = \"internalLink\";\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    link.className = \"internalLink\";\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      if (otherClickAction) {\n        otherClickAction();\n      }\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value, valueAsString: value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n        const domElement = document.getElementById(id);\n        if (!domElement || !GetElementsByNameSet.has(domElement)) {\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.className = \"textAnnotation\";\n\n    const image = document.createElement(\"img\");\n    image.style.height = this.container.style.height;\n    image.style.width = this.container.style.width;\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.appendChild(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = AnnotationElement.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: event.target.checked,\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      event.target.style[styleName] = ColorConverters[`${color[0]}_HTML`](\n        color.slice(1)\n      );\n    };\n\n    const commonActions = {\n      display: event => {\n        const hidden = event.detail.display % 2 === 1;\n        event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden,\n          print: event.detail.display === 0 || event.detail.display === 3,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          print: event.detail.print,\n        });\n      },\n      hidden: event => {\n        event.target.style.visibility = event.detail.hidden\n          ? \"hidden\"\n          : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden: event.detail.hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        if (event.detail.readonly) {\n          event.target.setAttribute(\"readonly\", \"\");\n        } else {\n          event.target.removeAttribute(\"readonly\");\n        }\n      },\n      required: event => {\n        if (event.detail.required) {\n          event.target.setAttribute(\"required\", \"\");\n        } else {\n          event.target.removeAttribute(\"required\");\n        }\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n    };\n\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      if (action) {\n        action(jsEvent);\n      }\n    }\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.className = \"textWidgetAnnotation\";\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n        valueAsString: this.data.fieldValue,\n      });\n      const textContent = storedData.valueAsString || storedData.value || \"\";\n      const elementData = {\n        userValue: null,\n        formattedValue: null,\n        beforeInputSelectionRange: null,\n        beforeInputValue: null,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = textContent;\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", textContent);\n      }\n      GetElementsByNameSet.add(element);\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      elementData.userValue = textContent;\n      element.setAttribute(\"id\", id);\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue || \"\";\n        element.value = elementData.userValue = defaultValue;\n        delete elementData.formattedValue;\n      });\n\n      let blurListener = event => {\n        if (elementData.formattedValue) {\n          event.target.value = elementData.formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n        elementData.beforeInputSelectionRange = null;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.userValue) {\n            event.target.value = elementData.userValue;\n          }\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value || \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              if (!elementData.formattedValue) {\n                event.target.value = elementData.userValue;\n              }\n            },\n            valueAsString(event) {\n              elementData.formattedValue = event.detail.valueAsString || \"\";\n              if (event.target !== document.activeElement) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = elementData.formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue: elementData.formattedValue,\n              });\n            },\n            selRange(event) {\n              const [selStart, selEnd] = event.detail.selRange;\n              if (selStart >= 0 && selEnd < event.target.value.length) {\n                event.target.setSelectionRange(selStart, selEnd);\n              }\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          // if the key is one of Escape, Enter or Tab\n          // then the data are committed\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\") {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          // Save the entered value\n          elementData.userValue = event.target.value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: event.target.value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (this._mouseState.isDown) {\n            // Focus out using the mouse: data are committed\n            elementData.userValue = event.target.value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: 1,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n        element.addEventListener(\"mousedown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          elementData.beforeInputSelectionRange = null;\n        });\n        element.addEventListener(\"keyup\", event => {\n          // keyup is triggered after input\n          if (event.target.selectionStart === event.target.selectionEnd) {\n            elementData.beforeInputSelectionRange = null;\n          }\n        });\n        element.addEventListener(\"select\", event => {\n          elementData.beforeInputSelectionRange = [\n            event.target.selectionStart,\n            event.target.selectionEnd,\n          ];\n        });\n\n        if (this.data.actions?.Keystroke) {\n          // We should use beforeinput but this\n          // event isn't available in Firefox\n          element.addEventListener(\"input\", event => {\n            let selStart = -1;\n            let selEnd = -1;\n            if (elementData.beforeInputSelectionRange) {\n              [selStart, selEnd] = elementData.beforeInputSelectionRange;\n            }\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: elementData.beforeInputValue,\n                change: event.data,\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.maxLen !== null) {\n        element.maxLength = this.data.maxLen;\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / this.data.maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontSize, fontColor } = this.data.defaultAppearanceData;\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n    if (fontSize) {\n      style.fontSize = `${fontSize}px`;\n    }\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.className = \"buttonWidgetAnnotation checkBox\";\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"buttonWidgetAnnotation radioButton\";\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { ignoreBorder: parameters.data.hasAppearance });\n  }\n\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.className = \"buttonWidgetAnnotation pushButton\";\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"choiceWidgetAnnotation\";\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    // For printing/saving we currently only support choice widgets with one\n    // option selection. Therefore, listboxes (#12189) and comboboxes (#12224)\n    // are not properly printed/saved yet, so we only store the first item in\n    // the field value array instead of the entire array. Once support for those\n    // two field types is implemented, we should use the same pattern as the\n    // other interactive widgets where the return value of `getValue`\n    // is used and the full array of field values is stored.\n    storage.getValue(id, {\n      value:\n        this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined,\n    });\n\n    let { fontSize } = this.data.defaultAppearanceData;\n    if (!fontSize) {\n      fontSize = 9;\n    }\n    const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.disabled = this.data.readOnly;\n    selectElement.name = this.data.fieldName;\n    selectElement.setAttribute(\"id\", id);\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    selectElement.style.fontSize = `${fontSize}px`;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (this.data.combo) {\n        optionElement.style.fontSize = fontSizeStyle;\n      }\n      if (this.data.fieldValue.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n      }\n      selectElement.appendChild(optionElement);\n    }\n\n    const getValue = (event, isExport) => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = event.target.options;\n      if (!event.target.multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            selectElement.insertBefore(\n              optionElement,\n              selectElement.children[index]\n            );\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.appendChild(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(event, /* isExport */ true);\n        const value = getValue(event, /* isExport */ false);\n        storage.setValue(id, { value: exportValue });\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value,\n            changeEx: exportValue,\n            willCommit: true,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n        ],\n        event => event.target.checked\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(event) });\n      });\n    }\n\n    this._setBackgroundColor(selectElement);\n\n    this.container.appendChild(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    // Do not render popup annotations for parent elements with these types as\n    // they create the popups themselves (because of custom trigger divs).\n    const IGNORE_TYPES = [\n      \"Line\",\n      \"Square\",\n      \"Circle\",\n      \"PolyLine\",\n      \"Polygon\",\n      \"Ink\",\n    ];\n\n    this.container.className = \"popupAnnotation\";\n\n    if (IGNORE_TYPES.includes(this.data.parentType)) {\n      return this.container;\n    }\n\n    const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n    const parentElements = this.layer.querySelectorAll(selector);\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n      richText: this.data.richText,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n    this.container.style.left = `${popupLeft}px`;\n    this.container.style.top = `${popupTop}px`;\n\n    this.container.appendChild(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.titleObj = parameters.titleObj;\n    this.modificationDate = parameters.modificationDate;\n    this.contentsObj = parameters.contentsObj;\n    this.richText = parameters.richText;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"popupWrapper\";\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"popup\";\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.dir = this.titleObj.dir;\n    title.textContent = this.titleObj.str;\n    popup.appendChild(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.className = \"popupDate\";\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.appendChild(modificationDate);\n    }\n\n    if (\n      this.richText?.str &&\n      (!this.contentsObj?.str || this.contentsObj.str === this.richText.str)\n    ) {\n      XfaLayer.render({\n        xfaHtml: this.richText.html,\n        intent: \"richText\",\n        div: popup,\n      });\n      popup.lastChild.className = \"richText popupContent\";\n    } else {\n      const contents = this._formatContents(this.contentsObj);\n      popup.appendChild(contents);\n    }\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    }\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.appendChild(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.className = \"popupContent\";\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.appendChild(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.appendChild(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex += 1;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex -= 1;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"freeTextAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"lineAnnotation\";\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n    line.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"squareAnnotation\";\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"circleAnnotation\";\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"transparent\");\n\n    svg.appendChild(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"caretAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.appendChild(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.className = \"highlightAnnotation\";\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.className = \"underlineAnnotation\";\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.className = \"squigglyAnnotation\";\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.className = \"strikeoutAnnotation\";\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"stampAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      id: stringToPDFString(filename),\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.className = \"fileAttachmentAnnotation\";\n\n    const trigger = document.createElement(\"div\");\n    trigger.style.height = this.container.style.height;\n    trigger.style.width = this.container.style.width;\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (\n      !this.data.hasPopup &&\n      (this.data.titleObj?.str ||\n        this.data.contentsObj?.str ||\n        this.data.richText)\n    ) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.appendChild(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPageProxy} page\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap]\n */\n\nclass AnnotationLayer {\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static render(parameters) {\n    const sortedAnnotations = [],\n      popupAnnotations = [];\n    // Ensure that Popup annotations are handled last, since they're dependant\n    // upon the parent annotation having already been rendered (please refer to\n    // the `PopupAnnotationElement.render` method); fixes issue 11362.\n    for (const data of parameters.annotations) {\n      if (!data) {\n        continue;\n      }\n      if (data.annotationType === AnnotationType.POPUP) {\n        popupAnnotations.push(data);\n        continue;\n      }\n      sortedAnnotations.push(data);\n    }\n    if (popupAnnotations.length) {\n      sortedAnnotations.push(...popupAnnotations);\n    }\n\n    const div = parameters.div;\n\n    for (const data of sortedAnnotations) {\n      const element = AnnotationElementFactory.create({\n        data,\n        layer: div,\n        page: parameters.page,\n        viewport: parameters.viewport,\n        linkService: parameters.linkService,\n        downloadManager: parameters.downloadManager,\n        imageResourcesPath: parameters.imageResourcesPath || \"\",\n        renderForms: parameters.renderForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage:\n          parameters.annotationStorage || new AnnotationStorage(),\n        enableScripting: parameters.enableScripting,\n        hasJSActions: parameters.hasJSActions,\n        fieldObjects: parameters.fieldObjects,\n        mouseState: parameters.mouseState || { isDown: false },\n      });\n      if (element.isRenderable) {\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        if (Array.isArray(rendered)) {\n          for (const renderedElement of rendered) {\n            div.appendChild(renderedElement);\n          }\n        } else {\n          if (element instanceof PopupAnnotationElement) {\n            // Popup annotation elements should not be on top of other\n            // annotation elements to prevent interfering with mouse events.\n            div.prepend(rendered);\n          } else {\n            div.appendChild(rendered);\n          }\n        }\n      }\n    }\n\n    this.#setAnnotationCanvasMap(div, parameters.annotationCanvasMap);\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static update(parameters) {\n    const { page, viewport, annotations, annotationCanvasMap, div } =\n      parameters;\n    const transform = viewport.transform;\n    const matrix = `matrix(${transform.join(\",\")})`;\n\n    let scale, ownMatrix;\n    for (const data of annotations) {\n      const elements = div.querySelectorAll(\n        `[data-annotation-id=\"${data.id}\"]`\n      );\n      if (elements) {\n        for (const element of elements) {\n          if (data.hasOwnCanvas) {\n            const rect = Util.normalizeRect([\n              data.rect[0],\n              page.view[3] - data.rect[1] + page.view[1],\n              data.rect[2],\n              page.view[3] - data.rect[3] + page.view[1],\n            ]);\n\n            if (!ownMatrix) {\n              // When an annotation has its own canvas, then\n              // the scale has been already applied to the canvas,\n              // so we musn't scale it twice.\n              scale = Math.abs(transform[0] || transform[1]);\n              const ownTransform = transform.slice();\n              for (let i = 0; i < 4; i++) {\n                ownTransform[i] = Math.sign(ownTransform[i]);\n              }\n              ownMatrix = `matrix(${ownTransform.join(\",\")})`;\n            }\n\n            const left = rect[0] * scale;\n            const top = rect[1] * scale;\n            element.style.left = `${left}px`;\n            element.style.top = `${top}px`;\n            element.style.transformOrigin = `${-left}px ${-top}px`;\n            element.style.transform = ownMatrix;\n          } else {\n            element.style.transform = matrix;\n          }\n        }\n      }\n    }\n\n    this.#setAnnotationCanvasMap(div, annotationCanvasMap);\n    div.hidden = false;\n  }\n\n  static #setAnnotationCanvasMap(div, annotationCanvasMap) {\n    if (!annotationCanvasMap) {\n      return;\n    }\n    for (const [id, canvas] of annotationCanvasMap) {\n      const element = div.querySelector(`[data-annotation-id=\"${id}\"]`);\n      if (!element) {\n        continue;\n      }\n\n      const { firstChild } = element;\n      if (firstChild.nodeName === \"CANVAS\") {\n        element.replaceChild(canvas, firstChild);\n      } else {\n        element.insertBefore(canvas, firstChild);\n      }\n    }\n    annotationCanvasMap.clear();\n  }\n}\n\nexport { AnnotationLayer };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    return this.RGB_HTML(this.CMYK_RGB(components));\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport { warn } from \"../shared/util.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\n/**\n * @typedef {Object} XfaLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Object} xfaHtml\n * @property {AnnotationStorage} [annotationStorage]\n * @property {IPDFLinkService} linkService\n * @property {string} [intent] - (default value is 'display').\n */\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      // We don't need to add dataId in the html object but it can\n      // be useful to know its value when writing printing tests:\n      // in this case, don't skip dataId to have its value.\n      if (value === null || value === undefined || key === \"dataId\") {\n        continue;\n      }\n\n      if (key !== \"style\") {\n        if (key === \"textContent\") {\n          html.textContent = value;\n        } else if (key === \"class\") {\n          if (value.length) {\n            html.setAttribute(key, value.join(\" \"));\n          }\n        } else {\n          if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n            continue; // Handled below.\n          }\n          html.setAttribute(key, value);\n        }\n      } else {\n        Object.assign(html.style, value);\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure overwrite\n    // any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  /**\n   * Render the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfaHtml;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.appendChild(rootHtml);\n\n    if (parameters.viewport) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      rootDiv.style.transform = transform;\n    }\n\n    // Set defaults.\n    if (intent !== \"richText\") {\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n    }\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack[stack.length - 1];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack[stack.length - 1][1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.appendChild(node);\n        continue;\n      }\n\n      let childHtml;\n      if (child?.attributes?.xmlns) {\n        childHtml = document.createElementNS(child.attributes.xmlns, name);\n      } else {\n        childHtml = document.createElement(name);\n      }\n\n      html.appendChild(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.appendChild(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  createPromiseCapability,\n  Util,\n} from \"../shared/util.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {import(\"./api\").TextContent} [textContent] - Text content to\n *   render (the object is returned by the page's `getTextContent` method).\n * @property {ReadableStream} [textContentStream] - Text content stream to\n *   render (the stream is returned by the page's `streamTextContent` method).\n * @property {HTMLElement} container - HTML element that will contain text runs.\n * @property {import(\"./display_utils\").PageViewport} viewport - The target\n *   viewport to properly layout the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that are correspond\n *   to the text items of the textContent input. This is output and shall be\n *   initially be set to empty array.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *    the `str` property of the text items of textContent input. This is output\n *   and shall be initially be set to empty array.\n * @property {number} [timeout] - Delay in milliseconds before rendering of the\n *   text runs occurs.\n * @property {boolean} [enhanceTextSelection] - Whether to turn on the text\n *   selection enhancement.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\nconst AllWhitespaceRegexp = /^\\s+$/g;\n\nfunction getAscent(fontFamily, ctx) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  ctx.save();\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    ctx.restore();\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.restore();\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles, ctx) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = task._enhanceTextSelection\n    ? {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n        originalTransform: null,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        scale: 1,\n      }\n    : {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n      };\n\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._viewport.transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  textDiv.style.left = `${left}px`;\n  textDiv.style.top = `${top}px`;\n  textDiv.style.fontSize = `${fontHeight}px`;\n  textDiv.style.fontFamily = style.fontFamily;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (\n    geom.str.length > 1 ||\n    (task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str))\n  ) {\n    shouldScaleText = true;\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    if (style.vertical) {\n      textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n    } else {\n      textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n    }\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._textContentStream) {\n    task._layoutText(textDiv);\n  }\n\n  if (task._enhanceTextSelection && textDivProperties.hasText) {\n    let angleCos = 1,\n      angleSin = 0;\n    if (angle !== 0) {\n      angleCos = Math.cos(angle);\n      angleSin = Math.sin(angle);\n    }\n    const divWidth =\n      (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n    const divHeight = fontHeight;\n\n    let m, b;\n    if (angle !== 0) {\n      m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n      b = Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n    } else {\n      b = [left, top, left + divWidth, top + divHeight];\n    }\n\n    task._bounds.push({\n      left: b[0],\n      top: b[1],\n      right: b[2],\n      bottom: b[3],\n      div: textDiv,\n      size: [divWidth, divHeight],\n      m,\n    });\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    task._renderingDone = true;\n    capability.resolve();\n    return;\n  }\n\n  if (!task._textContentStream) {\n    for (let i = 0; i < textDivsLength; i++) {\n      task._layoutText(textDivs[i]);\n    }\n  }\n\n  task._renderingDone = true;\n  capability.resolve();\n}\n\nfunction findPositiveMin(ts, offset, count) {\n  let result = 0;\n  for (let i = 0; i < count; i++) {\n    const t = ts[offset++];\n    if (t > 0) {\n      result = result ? Math.min(t, result) : t;\n    }\n  }\n  return result;\n}\n\nfunction expand(task) {\n  const bounds = task._bounds;\n  const viewport = task._viewport;\n\n  const expanded = expandBounds(viewport.width, viewport.height, bounds);\n  for (let i = 0; i < expanded.length; i++) {\n    const div = bounds[i].div;\n    const divProperties = task._textDivProperties.get(div);\n    if (divProperties.angle === 0) {\n      divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n      divProperties.paddingTop = bounds[i].top - expanded[i].top;\n      divProperties.paddingRight = expanded[i].right - bounds[i].right;\n      divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n      task._textDivProperties.set(div, divProperties);\n      continue;\n    }\n    // Box is rotated -- trying to find padding so rotated div will not\n    // exceed its expanded bounds.\n    const e = expanded[i],\n      b = bounds[i];\n    const m = b.m,\n      c = m[0],\n      s = m[1];\n    // Finding intersections with expanded box.\n    const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n    const ts = new Float64Array(64);\n    for (let j = 0, jj = points.length; j < jj; j++) {\n      const t = Util.applyTransform(points[j], m);\n      ts[j + 0] = c && (e.left - t[0]) / c;\n      ts[j + 4] = s && (e.top - t[1]) / s;\n      ts[j + 8] = c && (e.right - t[0]) / c;\n      ts[j + 12] = s && (e.bottom - t[1]) / s;\n\n      ts[j + 16] = s && (e.left - t[0]) / -s;\n      ts[j + 20] = c && (e.top - t[1]) / c;\n      ts[j + 24] = s && (e.right - t[0]) / -s;\n      ts[j + 28] = c && (e.bottom - t[1]) / c;\n\n      ts[j + 32] = c && (e.left - t[0]) / -c;\n      ts[j + 36] = s && (e.top - t[1]) / -s;\n      ts[j + 40] = c && (e.right - t[0]) / -c;\n      ts[j + 44] = s && (e.bottom - t[1]) / -s;\n\n      ts[j + 48] = s && (e.left - t[0]) / s;\n      ts[j + 52] = c && (e.top - t[1]) / -c;\n      ts[j + 56] = s && (e.right - t[0]) / s;\n      ts[j + 60] = c && (e.bottom - t[1]) / -c;\n    }\n    // Not based on math, but to simplify calculations, using cos and sin\n    // absolute values to not exceed the box (it can but insignificantly).\n    const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n    divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n    divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n    divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n    divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n    task._textDivProperties.set(div, divProperties);\n  }\n}\n\nfunction expandBounds(width, height, boxes) {\n  const bounds = boxes.map(function (box, i) {\n    return {\n      x1: box.left,\n      y1: box.top,\n      x2: box.right,\n      y2: box.bottom,\n      index: i,\n      x1New: undefined,\n      x2New: undefined,\n    };\n  });\n  expandBoundsLTR(width, bounds);\n\n  const expanded = new Array(boxes.length);\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i] = {\n      left: b.x1New,\n      top: 0,\n      right: b.x2New,\n      bottom: 0,\n    };\n  }\n\n  // Rotating on 90 degrees and extending extended boxes. Reusing the bounds\n  // array and objects.\n  boxes.map(function (box, i) {\n    const e = expanded[i],\n      b = bounds[i];\n    b.x1 = box.top;\n    b.y1 = width - e.right;\n    b.x2 = box.bottom;\n    b.y2 = width - e.left;\n    b.index = i;\n    b.x1New = undefined;\n    b.x2New = undefined;\n  });\n  expandBoundsLTR(height, bounds);\n\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i].top = b.x1New;\n    expanded[i].bottom = b.x2New;\n  }\n  return expanded;\n}\n\nfunction expandBoundsLTR(width, bounds) {\n  // Sorting by x1 coordinate and walk by the bounds in the same order.\n  bounds.sort(function (a, b) {\n    return a.x1 - b.x1 || a.index - b.index;\n  });\n\n  // First we see on the horizon is a fake boundary.\n  const fakeBoundary = {\n    x1: -Infinity,\n    y1: -Infinity,\n    x2: 0,\n    y2: Infinity,\n    index: -1,\n    x1New: 0,\n    x2New: 0,\n  };\n  const horizon = [\n    {\n      start: -Infinity,\n      end: Infinity,\n      boundary: fakeBoundary,\n    },\n  ];\n\n  for (const boundary of bounds) {\n    // Searching for the affected part of horizon.\n    // TODO red-black tree or simple binary search\n    let i = 0;\n    while (i < horizon.length && horizon[i].end <= boundary.y1) {\n      i++;\n    }\n    let j = horizon.length - 1;\n    while (j >= 0 && horizon[j].start >= boundary.y2) {\n      j--;\n    }\n\n    let horizonPart, affectedBoundary;\n    let q,\n      k,\n      maxXNew = -Infinity;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      let xNew;\n      if (affectedBoundary.x2 > boundary.x1) {\n        // In the middle of the previous element, new x shall be at the\n        // boundary start. Extending if further if the affected boundary\n        // placed on top of the current one.\n        xNew =\n          affectedBoundary.index > boundary.index\n            ? affectedBoundary.x1New\n            : boundary.x1;\n      } else if (affectedBoundary.x2New === undefined) {\n        // We have some space in between, new x in middle will be a fair\n        // choice.\n        xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n      } else {\n        // Affected boundary has x2new set, using it as new x.\n        xNew = affectedBoundary.x2New;\n      }\n      if (xNew > maxXNew) {\n        maxXNew = xNew;\n      }\n    }\n\n    // Set new x1 for current boundary.\n    boundary.x1New = maxXNew;\n\n    // Adjusts new x2 for the affected boundaries.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New === undefined) {\n        // Was not set yet, choosing new x if possible.\n        if (affectedBoundary.x2 > boundary.x1) {\n          // Current and affected boundaries intersect. If affected boundary\n          // is placed on top of the current, shrinking the affected.\n          if (affectedBoundary.index > boundary.index) {\n            affectedBoundary.x2New = affectedBoundary.x2;\n          }\n        } else {\n          affectedBoundary.x2New = maxXNew;\n        }\n      } else if (affectedBoundary.x2New > maxXNew) {\n        // Affected boundary is touching new x, pushing it back.\n        affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n      }\n    }\n\n    // Fixing the horizon.\n    const changedHorizon = [];\n    let lastBoundary = null;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      // Checking which boundary will be visible.\n      const useBoundary =\n        affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n      if (lastBoundary === useBoundary) {\n        // Merging with previous.\n        changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n      } else {\n        changedHorizon.push({\n          start: horizonPart.start,\n          end: horizonPart.end,\n          boundary: useBoundary,\n        });\n        lastBoundary = useBoundary;\n      }\n    }\n    if (horizon[i].start < boundary.y1) {\n      changedHorizon[0].start = boundary.y1;\n      changedHorizon.unshift({\n        start: horizon[i].start,\n        end: boundary.y1,\n        boundary: horizon[i].boundary,\n      });\n    }\n    if (boundary.y2 < horizon[j].end) {\n      changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n      changedHorizon.push({\n        start: boundary.y2,\n        end: horizon[j].end,\n        boundary: horizon[j].boundary,\n      });\n    }\n\n    // Set x2 new of boundary that is no longer visible (see overlapping case\n    // above).\n    // TODO more efficient, e.g. via reference counting.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New !== undefined) {\n        continue;\n      }\n      let used = false;\n      for (\n        k = i - 1;\n        !used && k >= 0 && horizon[k].start >= affectedBoundary.y1;\n        k--\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (\n        k = j + 1;\n        !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2;\n        k++\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (k = 0; !used && k < changedHorizon.length; k++) {\n        used = changedHorizon[k].boundary === affectedBoundary;\n      }\n      if (!used) {\n        affectedBoundary.x2New = maxXNew;\n      }\n    }\n\n    Array.prototype.splice.apply(\n      horizon,\n      [i, j - i + 1].concat(changedHorizon)\n    );\n  }\n\n  // Set new x2 for all unset boundaries.\n  for (const horizonPart of horizon) {\n    const affectedBoundary = horizonPart.boundary;\n    if (affectedBoundary.x2New === undefined) {\n      affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n    }\n  }\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContent,\n    textContentStream,\n    container,\n    viewport,\n    textDivs,\n    textContentItemsStr,\n    enhanceTextSelection,\n  }) {\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = createPromiseCapability();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        if (!this._enhanceTextSelection) {\n          // The `textDiv` properties are no longer needed.\n          this._textDivProperties = null;\n        }\n\n        if (this._layoutTextCtx) {\n          // Zeroing the width and height cause Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    if (this._renderTimer !== null) {\n      clearTimeout(this._renderTimer);\n      this._renderTimer = null;\n    }\n    this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i].str === undefined) {\n        if (\n          items[i].type === \"beginMarkedContentProps\" ||\n          items[i].type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (items[i].id !== null) {\n            this._container.setAttribute(\"id\", `${items[i].id}`);\n          }\n          parent.appendChild(this._container);\n        } else if (items[i].type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(items[i].str);\n      appendText(this, items[i], styleCache, this._layoutTextCtx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = this._textDivProperties.get(textDiv);\n\n    let transform = \"\";\n    if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n      const { fontSize, fontFamily } = textDiv.style;\n\n      // Only build font string and set to context if different from last.\n      if (\n        fontSize !== this._layoutTextLastFontSize ||\n        fontFamily !== this._layoutTextLastFontFamily\n      ) {\n        this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n        this._layoutTextLastFontSize = fontSize;\n        this._layoutTextLastFontFamily = fontFamily;\n      }\n      // Only measure the width for multi-char text divs, see `appendText`.\n      const { width } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n      if (width > 0) {\n        const scale = textDivProperties.canvasWidth / width;\n        if (this._enhanceTextSelection) {\n          textDivProperties.scale = scale;\n        }\n        transform = `scaleX(${scale})`;\n      }\n    }\n    if (textDivProperties.angle !== 0) {\n      transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n    }\n    if (transform.length > 0) {\n      if (this._enhanceTextSelection) {\n        textDivProperties.originalTransform = transform;\n      }\n      textDiv.style.transform = transform;\n    }\n\n    if (textDivProperties.hasText) {\n      this._container.appendChild(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.appendChild(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render(timeout = 0) {\n    const capability = createPromiseCapability();\n    let styleCache = Object.create(null);\n\n    // The temporary canvas is used to measure text length in the DOM.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n    ) {\n      canvas.mozOpaque = true;\n    }\n    this._layoutTextCtx = canvas.getContext(\"2d\", { alpha: false });\n\n    if (this._textContent) {\n      const textItems = this._textContent.items;\n      const textStyles = this._textContent.styles;\n      this._processItems(textItems, textStyles);\n      capability.resolve();\n    } else if (this._textContentStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentStream.getReader();\n      pump();\n    } else {\n      throw new Error(\n        'Neither \"textContent\" nor \"textContentStream\" parameters specified.'\n      );\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      if (!timeout) {\n        // Render right away\n        render(this);\n      } else {\n        // Schedule\n        this._renderTimer = setTimeout(() => {\n          render(this);\n          this._renderTimer = null;\n        }, timeout);\n      }\n    }, this._capability.reject);\n  }\n\n  /**\n   * @param {boolean} [expandDivs]\n   */\n  expandTextDivs(expandDivs = false) {\n    if (!this._enhanceTextSelection || !this._renderingDone) {\n      return;\n    }\n    if (this._bounds !== null) {\n      expand(this);\n      this._bounds = null;\n    }\n    const transformBuf = [],\n      paddingBuf = [];\n\n    for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n      const div = this._textDivs[i];\n      const divProps = this._textDivProperties.get(div);\n\n      if (!divProps.hasText) {\n        continue;\n      }\n      if (expandDivs) {\n        transformBuf.length = 0;\n        paddingBuf.length = 0;\n\n        if (divProps.originalTransform) {\n          transformBuf.push(divProps.originalTransform);\n        }\n        if (divProps.paddingTop > 0) {\n          paddingBuf.push(`${divProps.paddingTop}px`);\n          transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingRight > 0) {\n          paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingBottom > 0) {\n          paddingBuf.push(`${divProps.paddingBottom}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingLeft > 0) {\n          paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n          transformBuf.push(\n            `translateX(${-divProps.paddingLeft / divProps.scale}px)`\n          );\n        } else {\n          paddingBuf.push(0);\n        }\n\n        div.style.padding = paddingBuf.join(\" \");\n        if (transformBuf.length) {\n          div.style.transform = transformBuf.join(\" \");\n        }\n      } else {\n        div.style.padding = null;\n        div.style.transform = divProps.originalTransform;\n      }\n    }\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} renderParameters\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(renderParameters) {\n  const task = new TextLayerRenderTask({\n    textContent: renderParameters.textContent,\n    textContentStream: renderParameters.textContentStream,\n    container: renderParameters.container,\n    viewport: renderParameters.viewport,\n    textDivs: renderParameters.textDivs,\n    textContentItemsStr: renderParameters.textContentItemsStr,\n    enhanceTextSelection: renderParameters.enhanceTextSelection,\n  });\n  task._render(renderParameters.timeout);\n  return task;\n}\n\nexport { renderTextLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  createObjectURL,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNum,\n  OPS,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { DOMSVGFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = class {\n  constructor() {\n    unreachable(\"Not implemented: SVGGraphics\");\n  }\n};\n\nif (\n  typeof PDFJSDev === \"undefined\" ||\n  PDFJSDev.test(\"!PRODUCTION || GENERIC\")\n) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree[opTree.length - 1].items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  SVGGraphics = class {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.appendChild(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.appendChild(current.tspan);\n      current.txtgrp.appendChild(current.txtElement);\n\n      this._ensureTransformGroup().appendChild(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.appendChild(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n        ...Util.applyTransform([x0, y0], matrix),\n        ...Util.applyTransform([x1, y1], matrix),\n      ]);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.appendChild(bbox.childNodes[0]);\n      this.defs.appendChild(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      if (typeof args === \"string\") {\n        args = this.objs.get(args);\n      }\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.appendChild(stop);\n          }\n          this.defs.appendChild(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().appendChild(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.appendChild(clipElement);\n      this.defs.appendChild(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        for (const prev of this.extraStack) {\n          prev.clipGroup = null;\n        }\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.appendChild(imgEl);\n      } else {\n        this._ensureTransformGroup().appendChild(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(imgData) {\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.appendChild(mask);\n      this._ensureTransformGroup().appendChild(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.appendChild(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.appendChild(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.appendChild(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().appendChild(this.tgrp);\n        } else {\n          this.svg.appendChild(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    this._headersCapability = createPromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  assert(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Support UTF-8 decoding when TextDecoder is unsupported.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n        // Or TextDecoder API is not available (in IE / Edge).\n        if (/^utf-?8$/i.test(encoding)) {\n          // UTF-8 is commonly used, try to support it in another way:\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replace(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  createPromiseCapability,\n  stringToBytes,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  const array = stringToBytes(data);\n  return array.buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n    this.getXhr =\n      args.getXhr ||\n      function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = this.getXhr();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController?.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = createPromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\nexport { PDFFetchStream };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__w_pdfjs_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable sort-exports/sort-exports */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n\nimport {\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n} from \"./display/display_utils.js\";\nimport {\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n} from \"./display/api.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { isNodeJS } from \"./shared/is_node.js\";\nimport { renderTextLayer } from \"./display/text_layer.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n  const streamsPromise = Promise.all([\n    import(\"pdfjs/display/network.js\"),\n    import(\"pdfjs/display/fetch_stream.js\"),\n  ]);\n\n  setPDFNetworkStreamFactory(async params => {\n    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;\n    if (isValidFetchUrl(params.url)) {\n      return new PDFFetchStream(params);\n    }\n    return new PDFNetworkStream(params);\n  });\n} else if (PDFJSDev.test(\"GENERIC || CHROME\")) {\n  if (PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n    const { PDFNodeStream } = require(\"./display/node_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    const { PDFNetworkStream } = require(\"./display/network.js\");\n    const { PDFFetchStream } = require(\"./display/fetch_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      if (isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  }\n}\n\nexport {\n  // From \"./display/display_utils.js\":\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isPdfFile,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  getXfaPageViewport,\n  // From \"./shared/util.js\":\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n  // From \"./display/api.js\":\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n  // From \"./display/annotation_layer.js\":\n  AnnotationLayer,\n  // From \"./display/worker_options.js\":\n  GlobalWorkerOptions,\n  // From \"./display/text_layer.js\":\n  renderTextLayer,\n  // From \"./display/svg.js\":\n  SVGGraphics,\n  // From \"./display/xfa_layer.js\":\n  XfaLayer,\n};\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"38f16daf\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"my-react-app:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkmy_react_app\"] = self[\"webpackChunkmy_react_app\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nexport { _possibleConstructorReturn as default };","function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// As defined on the list of supported events: https://reactjs.org/docs/events.html\nexport var clipboardEvents = ['onCopy', 'onCut', 'onPaste'];\nexport var compositionEvents = [\n    'onCompositionEnd',\n    'onCompositionStart',\n    'onCompositionUpdate',\n];\nexport var focusEvents = ['onFocus', 'onBlur'];\nexport var formEvents = ['onInput', 'onInvalid', 'onReset', 'onSubmit'];\nexport var imageEvents = ['onLoad', 'onError'];\nexport var keyboardEvents = ['onKeyDown', 'onKeyPress', 'onKeyUp'];\nexport var mediaEvents = [\n    'onAbort',\n    'onCanPlay',\n    'onCanPlayThrough',\n    'onDurationChange',\n    'onEmptied',\n    'onEncrypted',\n    'onEnded',\n    'onError',\n    'onLoadedData',\n    'onLoadedMetadata',\n    'onLoadStart',\n    'onPause',\n    'onPlay',\n    'onPlaying',\n    'onProgress',\n    'onRateChange',\n    'onSeeked',\n    'onSeeking',\n    'onStalled',\n    'onSuspend',\n    'onTimeUpdate',\n    'onVolumeChange',\n    'onWaiting',\n];\nexport var mouseEvents = [\n    'onClick',\n    'onContextMenu',\n    'onDoubleClick',\n    'onMouseDown',\n    'onMouseEnter',\n    'onMouseLeave',\n    'onMouseMove',\n    'onMouseOut',\n    'onMouseOver',\n    'onMouseUp',\n];\nexport var dragEvents = [\n    'onDrag',\n    'onDragEnd',\n    'onDragEnter',\n    'onDragExit',\n    'onDragLeave',\n    'onDragOver',\n    'onDragStart',\n    'onDrop',\n];\nexport var selectionEvents = ['onSelect'];\nexport var touchEvents = ['onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart'];\nexport var pointerEvents = [\n    'onPointerDown',\n    'onPointerMove',\n    'onPointerUp',\n    'onPointerCancel',\n    'onGotPointerCapture',\n    'onLostPointerCapture',\n    'onPointerEnter',\n    'onPointerLeave',\n    'onPointerOver',\n    'onPointerOut',\n];\nexport var uiEvents = ['onScroll'];\nexport var wheelEvents = ['onWheel'];\nexport var animationEvents = [\n    'onAnimationStart',\n    'onAnimationEnd',\n    'onAnimationIteration',\n];\nexport var transitionEvents = ['onTransitionEnd'];\nexport var otherEvents = ['onToggle'];\nexport var changeEvents = ['onChange'];\nexport var allEvents = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], clipboardEvents, true), compositionEvents, true), focusEvents, true), formEvents, true), imageEvents, true), keyboardEvents, true), mediaEvents, true), mouseEvents, true), dragEvents, true), selectionEvents, true), touchEvents, true), pointerEvents, true), uiEvents, true), wheelEvents, true), animationEvents, true), transitionEvents, true), changeEvents, true), otherEvents, true);\n/**\n * Returns an object with on-event callback props curried with provided args.\n * @param {Object} props Props passed to a component.\n * @param {Function=} getArgs A function that returns argument(s) on-event callbacks\n *   shall be curried with.\n */\nexport default function makeEventProps(props, getArgs) {\n    var eventProps = {};\n    allEvents.forEach(function (eventName) {\n        var eventHandler = props[eventName];\n        if (!eventHandler) {\n            return;\n        }\n        if (getArgs) {\n            eventProps[eventName] = (function (event) {\n                return eventHandler(event, getArgs(eventName));\n            });\n        }\n        else {\n            eventProps[eventName] = eventHandler;\n        }\n    });\n    return eventProps;\n}\n","export default function makeCancellablePromise(promise) {\n    var isCancelled = false;\n    var wrappedPromise = new Promise(function (resolve, reject) {\n        promise\n            .then(function (value) { return !isCancelled && resolve(value); })\n            .catch(function (error) { return !isCancelled && reject(error); });\n    });\n    return {\n        promise: wrappedPromise,\n        cancel: function () {\n            isCancelled = true;\n        },\n    };\n}\n","export default function mergeClassNames() {\n  return Array.prototype.slice.call(arguments).reduce(function (classList, arg) {\n    return classList.concat(arg);\n  }, []).filter(function (arg) {\n    return typeof arg === 'string';\n  }).join(' ');\n}","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","var isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nexport default warning;\n","import { createContext } from 'react';\nexport default /*#__PURE__*/createContext(null);","import React from 'react';\nimport PropTypes from 'prop-types';\nexport default function Message(_ref) {\n  var children = _ref.children,\n      type = _ref.type;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"react-pdf__message react-pdf__message--\".concat(type)\n  }, children);\n}\nMessage.propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.oneOf(['error', 'loading', 'no-data']).isRequired\n};","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from 'tiny-invariant';\nvar DEFAULT_LINK_REL = 'noopener noreferrer nofollow';\n\nvar LinkService = /*#__PURE__*/function () {\n  function LinkService() {\n    _classCallCheck(this, LinkService);\n\n    this.externalLinkTarget = null;\n    this.externalLinkRel = null;\n  }\n\n  _createClass(LinkService, [{\n    key: \"setDocument\",\n    value: function setDocument(pdfDocument) {\n      this.pdfDocument = pdfDocument;\n    }\n  }, {\n    key: \"setViewer\",\n    value: function setViewer(pdfViewer) {\n      this.pdfViewer = pdfViewer;\n    }\n  }, {\n    key: \"setExternalLinkRel\",\n    value: function setExternalLinkRel(externalLinkRel) {\n      this.externalLinkRel = externalLinkRel;\n    }\n  }, {\n    key: \"setExternalLinkTarget\",\n    value: function setExternalLinkTarget(externalLinkTarget) {\n      this.externalLinkTarget = externalLinkTarget;\n    }\n  }, {\n    key: \"setHistory\",\n    value: function setHistory() {}\n  }, {\n    key: \"pagesCount\",\n    get: function get() {\n      return this.pdfDocument ? this.pdfDocument.numPages : 0;\n    }\n  }, {\n    key: \"page\",\n    get: function get() {\n      return this.pdfViewer.currentPageNumber;\n    },\n    set: function set(value) {\n      this.pdfViewer.currentPageNumber = value;\n    }\n  }, {\n    key: \"rotation\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"goToDestination\",\n    value: function goToDestination(dest) {\n      var _this = this;\n\n      new Promise(function (resolve) {\n        if (typeof dest === 'string') {\n          _this.pdfDocument.getDestination(dest).then(resolve);\n        } else if (Array.isArray(dest)) {\n          resolve(dest);\n        } else {\n          dest.then(resolve);\n        }\n      }).then(function (explicitDest) {\n        invariant(Array.isArray(explicitDest), \"\\\"\".concat(explicitDest, \"\\\" is not a valid destination array.\"));\n        var destRef = explicitDest[0];\n        new Promise(function (resolve) {\n          if (destRef instanceof Object) {\n            _this.pdfDocument.getPageIndex(destRef).then(function (pageIndex) {\n              resolve(pageIndex);\n            })[\"catch\"](function () {\n              invariant(false, \"\\\"\".concat(destRef, \"\\\" is not a valid page reference.\"));\n            });\n          } else if (typeof destRef === 'number') {\n            resolve(destRef);\n          } else {\n            invariant(false, \"\\\"\".concat(destRef, \"\\\" is not a valid destination reference.\"));\n          }\n        }).then(function (pageIndex) {\n          var pageNumber = pageIndex + 1;\n          invariant(pageNumber >= 1 && pageNumber <= _this.pagesCount, \"\\\"\".concat(pageNumber, \"\\\" is not a valid page number.\"));\n\n          _this.pdfViewer.scrollPageIntoView({\n            dest: dest,\n            pageIndex: pageIndex,\n            pageNumber: pageNumber\n          });\n        });\n      });\n    }\n  }, {\n    key: \"navigateTo\",\n    value: function navigateTo(dest) {\n      this.goToDestination(dest);\n    }\n  }, {\n    key: \"goToPage\",\n    value: function goToPage() {}\n  }, {\n    key: \"addLinkAttributes\",\n    value: function addLinkAttributes(link, url, newWindow) {\n      link.href = url;\n      link.rel = this.externalLinkRel || DEFAULT_LINK_REL;\n      link.target = newWindow ? '_blank' : this.externalLinkTarget || '';\n    }\n  }, {\n    key: \"getDestinationHash\",\n    value: function getDestinationHash() {\n      return '#';\n    }\n  }, {\n    key: \"getAnchorUrl\",\n    value: function getAnchorUrl() {\n      return '#';\n    }\n  }, {\n    key: \"setHash\",\n    value: function setHash() {}\n  }, {\n    key: \"executeNamedAction\",\n    value: function executeNamedAction() {}\n  }, {\n    key: \"cachePageRef\",\n    value: function cachePageRef() {}\n  }, {\n    key: \"isPageVisible\",\n    value: function isPageVisible() {\n      return true;\n    }\n  }, {\n    key: \"isPageCached\",\n    value: function isPageCached() {\n      return true;\n    }\n  }]);\n\n  return LinkService;\n}();\n\nexport { LinkService as default };","// As defined in https://github.com/mozilla/pdf.js/blob/d9fac3459609a807be6506fb3441b5da4b154d14/src/shared/util.js#L371-L374\nvar PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nexport default PasswordResponses;","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nexport { _arrayLikeToArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nexport { _unsupportedIterableToArray as default };","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nfunction _slicedToArray(r, e) {\n  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();\n}\nexport { _slicedToArray as default };","function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nexport { _arrayWithHoles as default };","function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nexport { _iterableToArrayLimit as default };","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableRest as default };","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\n/**\n * Checks if we're running in a browser environment.\n */\n\nexport var isBrowser = typeof window !== 'undefined';\n/**\n * Checks whether we're running from a local file system.\n */\n\nexport var isLocalFileSystem = isBrowser && window.location.protocol === 'file:';\n/**\n * Checks whether a variable is defined.\n *\n * @param {*} variable Variable to check\n */\n\nexport function isDefined(variable) {\n  return typeof variable !== 'undefined';\n}\n/**\n * Checks whether a variable is defined and not null.\n *\n * @param {*} variable Variable to check\n */\n\nexport function isProvided(variable) {\n  return isDefined(variable) && variable !== null;\n}\n/**\n * Checkes whether a variable provided is a string.\n *\n * @param {*} variable Variable to check\n */\n\nexport function isString(variable) {\n  return typeof variable === 'string';\n}\n/**\n * Checks whether a variable provided is an ArrayBuffer.\n *\n * @param {*} variable Variable to check\n */\n\nexport function isArrayBuffer(variable) {\n  return variable instanceof ArrayBuffer;\n}\n/**\n * Checkes whether a variable provided is a Blob.\n *\n * @param {*} variable Variable to check\n */\n\nexport function isBlob(variable) {\n  invariant(isBrowser, 'isBlob can only be used in a browser environment');\n  return variable instanceof Blob;\n}\n/**\n * Checkes whether a variable provided is a File.\n *\n * @param {*} variable Variable to check\n */\n\nexport function isFile(variable) {\n  invariant(isBrowser, 'isFile can only be used in a browser environment');\n  return variable instanceof File;\n}\n/**\n * Checks whether a string provided is a data URI.\n *\n * @param {string} str String to check\n */\n\nexport function isDataURI(str) {\n  return isString(str) && /^data:/.test(str);\n}\nexport function dataURItoByteString(dataURI) {\n  invariant(isDataURI(dataURI), 'Invalid data URI.');\n\n  var _dataURI$split = dataURI.split(','),\n      _dataURI$split2 = _slicedToArray(_dataURI$split, 2),\n      headersString = _dataURI$split2[0],\n      dataString = _dataURI$split2[1];\n\n  var headers = headersString.split(';');\n\n  if (headers.indexOf('base64') !== -1) {\n    return atob(dataString);\n  }\n\n  return unescape(dataString);\n}\nexport function getPixelRatio() {\n  return isBrowser && window.devicePixelRatio || 1;\n}\nvar allowFileAccessFromFilesTip = 'On Chromium based browsers, you can use --allow-file-access-from-files flag for debugging purposes.';\nexport function displayCORSWarning() {\n  warning(!isLocalFileSystem, \"Loading PDF as base64 strings/URLs may not work on protocols other than HTTP/HTTPS. \".concat(allowFileAccessFromFilesTip));\n}\nexport function displayWorkerWarning() {\n  warning(!isLocalFileSystem, \"Loading PDF.js worker may not work on protocols other than HTTP/HTTPS. \".concat(allowFileAccessFromFilesTip));\n}\nexport function cancelRunningTask(runningTask) {\n  if (runningTask && runningTask.cancel) runningTask.cancel();\n}\nexport function makePageCallback(page, scale) {\n  Object.defineProperty(page, 'width', {\n    get: function get() {\n      return this.view[2] * scale;\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'height', {\n    get: function get() {\n      return this.view[3] * scale;\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'originalWidth', {\n    get: function get() {\n      return this.view[2];\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'originalHeight', {\n    get: function get() {\n      return this.view[3];\n    },\n    configurable: true\n  });\n  return page;\n}\nexport function isCancelException(error) {\n  return error.name === 'RenderingCancelledException';\n}\nexport function loadFromFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      return resolve(new Uint8Array(reader.result));\n    };\n\n    reader.onerror = function (event) {\n      switch (event.target.error.code) {\n        case event.target.error.NOT_FOUND_ERR:\n          return reject(new Error('Error while reading a file: File not found.'));\n\n        case event.target.error.NOT_READABLE_ERR:\n          return reject(new Error('Error while reading a file: File not readable.'));\n\n        case event.target.error.SECURITY_ERR:\n          return reject(new Error('Error while reading a file: Security error.'));\n\n        case event.target.error.ABORT_ERR:\n          return reject(new Error('Error while reading a file: Aborted.'));\n\n        default:\n          return reject(new Error('Error while reading a file.'));\n      }\n    };\n\n    reader.readAsArrayBuffer(file);\n    return null;\n  });\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nexport { _toConsumableArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nexport { _arrayWithoutHoles as default };","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nexport { _iterableToArray as default };","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableSpread as default };","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport PropTypes from 'prop-types';\nimport { mouseEvents, touchEvents, keyboardEvents } from 'make-event-props';\nimport { isDefined } from './utils';\nimport LinkService from '../LinkService';\nexport var eventProps = function () {\n  var result = {};\n  [].concat(_toConsumableArray(mouseEvents), _toConsumableArray(touchEvents), _toConsumableArray(keyboardEvents)).forEach(function (eventName) {\n    result[eventName] = PropTypes.func;\n  });\n  return result;\n}();\nvar fileTypes = [PropTypes.string, PropTypes.instanceOf(ArrayBuffer), PropTypes.shape({\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  httpHeaders: PropTypes.object,\n  range: PropTypes.object,\n  url: PropTypes.string,\n  withCredentials: PropTypes.bool\n})];\n\nif (typeof File !== 'undefined') {\n  fileTypes.push(PropTypes.instanceOf(File));\n}\n\nif (typeof Blob !== 'undefined') {\n  fileTypes.push(PropTypes.instanceOf(Blob));\n}\n\nexport var isClassName = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]);\nexport var isFile = PropTypes.oneOfType(fileTypes);\nexport var isLinkService = PropTypes.instanceOf(LinkService);\nexport var isLinkTarget = PropTypes.oneOf(['_self', '_blank', '_parent', '_top']);\nexport var isPage = PropTypes.shape({\n  _transport: PropTypes.shape({\n    fontLoader: PropTypes.object.isRequired\n  }).isRequired,\n  commonObjs: PropTypes.shape({\n    _objs: PropTypes.object.isRequired\n  }).isRequired,\n  getAnnotations: PropTypes.func.isRequired,\n  getTextContent: PropTypes.func.isRequired,\n  getViewport: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired\n});\nexport var isPageIndex = function isPageIndex(props, propName, componentName) {\n  var pageIndex = props[propName],\n      pageNumber = props.pageNumber,\n      pdf = props.pdf;\n\n  if (!isDefined(pdf)) {\n    return null;\n  }\n\n  if (isDefined(pageIndex)) {\n    if (typeof pageIndex !== 'number') {\n      return new Error(\"`\".concat(propName, \"` of type `\").concat(_typeof(pageIndex), \"` supplied to `\").concat(componentName, \"`, expected `number`.\"));\n    }\n\n    if (pageIndex < 0) {\n      return new Error(\"Expected `\".concat(propName, \"` to be greater or equal to 0.\"));\n    }\n\n    var numPages = pdf.numPages;\n\n    if (pageIndex + 1 > numPages) {\n      return new Error(\"Expected `\".concat(propName, \"` to be less or equal to \").concat(numPages - 1, \".\"));\n    }\n  } else if (!isDefined(pageNumber)) {\n    return new Error(\"`\".concat(propName, \"` not supplied. Either pageIndex or pageNumber must be supplied to `\").concat(componentName, \"`.\"));\n  } // Everything is fine\n\n\n  return null;\n};\nexport var isPageNumber = function isPageNumber(props, propName, componentName) {\n  var pageNumber = props[propName],\n      pageIndex = props.pageIndex,\n      pdf = props.pdf;\n\n  if (!isDefined(pdf)) {\n    return null;\n  }\n\n  if (isDefined(pageNumber)) {\n    if (typeof pageNumber !== 'number') {\n      return new Error(\"`\".concat(propName, \"` of type `\").concat(_typeof(pageNumber), \"` supplied to `\").concat(componentName, \"`, expected `number`.\"));\n    }\n\n    if (pageNumber < 1) {\n      return new Error(\"Expected `\".concat(propName, \"` to be greater or equal to 1.\"));\n    }\n\n    var numPages = pdf.numPages;\n\n    if (pageNumber > numPages) {\n      return new Error(\"Expected `\".concat(propName, \"` to be less or equal to \").concat(numPages, \".\"));\n    }\n  } else if (!isDefined(pageIndex)) {\n    return new Error(\"`\".concat(propName, \"` not supplied. Either pageIndex or pageNumber must be supplied to `\").concat(componentName, \"`.\"));\n  } // Everything is fine\n\n\n  return null;\n};\nexport var isPdf = PropTypes.oneOfType([PropTypes.shape({\n  getDestination: PropTypes.func.isRequired,\n  getOutline: PropTypes.func.isRequired,\n  getPage: PropTypes.func.isRequired,\n  numPages: PropTypes.number.isRequired\n}), PropTypes.bool]);\nexport var isRef = PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n  current: PropTypes.any\n})]);\nexport var isRenderMode = PropTypes.oneOf(['canvas', 'none', 'svg']);\nexport var isRotate = PropTypes.oneOf([0, 90, 180, 270]);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"url\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * Loads a PDF document. Passes it to all children.\n */\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport makeEventProps from 'make-event-props';\nimport makeCancellable from 'make-cancellable-promise';\nimport mergeClassNames from 'merge-class-names';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist/legacy/build/pdf';\nimport DocumentContext from './DocumentContext';\nimport Message from './Message';\nimport LinkService from './LinkService';\nimport PasswordResponses from './PasswordResponses';\nimport { cancelRunningTask, dataURItoByteString, displayCORSWarning, isArrayBuffer, isBlob, isBrowser, isDataURI, isFile, loadFromFile } from './shared/utils';\nimport { eventProps, isClassName, isFile as isFileProp, isRef } from './shared/propTypes';\nvar PDFDataRangeTransport = pdfjs.PDFDataRangeTransport;\n\nvar Document = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Document, _PureComponent);\n\n  var _super = _createSuper(Document);\n\n  function Document() {\n    var _this;\n\n    _classCallCheck(this, Document);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      pdf: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"viewer\", {\n      scrollPageIntoView: function scrollPageIntoView(_ref) {\n        var dest = _ref.dest,\n            pageIndex = _ref.pageIndex,\n            pageNumber = _ref.pageNumber;\n        // Handling jumping to internal links target\n        var onItemClick = _this.props.onItemClick; // First, check if custom handling of onItemClick was provided\n\n        if (onItemClick) {\n          onItemClick({\n            dest: dest,\n            pageIndex: pageIndex,\n            pageNumber: pageNumber\n          });\n          return;\n        } // If not, try to look for target page within the <Document>.\n\n\n        var page = _this.pages[pageIndex];\n\n        if (page) {\n          // Scroll to the page automatically\n          page.scrollIntoView();\n          return;\n        }\n\n        warning(false, \"An internal link leading to page \".concat(pageNumber, \" was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>.\"));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"linkService\", new LinkService());\n\n    _defineProperty(_assertThisInitialized(_this), \"loadDocument\", function () {\n      // If another rendering is in progress, let's cancel it\n      cancelRunningTask(_this.runningTask); // If another loading is in progress, let's destroy it\n\n      if (_this.loadingTask) _this.loadingTask.destroy();\n      var cancellable = makeCancellable(_this.findDocumentSource());\n      _this.runningTask = cancellable;\n      cancellable.promise.then(function (source) {\n        _this.onSourceSuccess();\n\n        if (!source) {\n          return;\n        }\n\n        _this.setState(function (prevState) {\n          if (!prevState.pdf) {\n            return null;\n          }\n\n          return {\n            pdf: null\n          };\n        });\n\n        var _this$props = _this.props,\n            options = _this$props.options,\n            onLoadProgress = _this$props.onLoadProgress,\n            onPassword = _this$props.onPassword;\n        _this.loadingTask = pdfjs.getDocument(_objectSpread(_objectSpread({}, source), options));\n        _this.loadingTask.onPassword = onPassword;\n\n        if (onLoadProgress) {\n          _this.loadingTask.onProgress = onLoadProgress;\n        }\n\n        var cancellable = makeCancellable(_this.loadingTask.promise);\n        _this.runningTask = cancellable;\n        cancellable.promise.then(function (pdf) {\n          _this.setState(function (prevState) {\n            if (prevState.pdf && prevState.pdf.fingerprint === pdf.fingerprint) {\n              return null;\n            }\n\n            return {\n              pdf: pdf\n            };\n          }, _this.onLoadSuccess);\n        })[\"catch\"](function (error) {\n          _this.onLoadError(error);\n        });\n      })[\"catch\"](function (error) {\n        _this.onSourceError(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setupLinkService\", function () {\n      var _this$props2 = _this.props,\n          externalLinkRel = _this$props2.externalLinkRel,\n          externalLinkTarget = _this$props2.externalLinkTarget;\n\n      _this.linkService.setViewer(_this.viewer);\n\n      _this.linkService.setExternalLinkRel(externalLinkRel);\n\n      _this.linkService.setExternalLinkTarget(externalLinkTarget);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSourceSuccess\", function () {\n      var onSourceSuccess = _this.props.onSourceSuccess;\n      if (onSourceSuccess) onSourceSuccess();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSourceError\", function (error) {\n      warning(error);\n      var onSourceError = _this.props.onSourceError;\n      if (onSourceError) onSourceError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadSuccess\", function () {\n      var onLoadSuccess = _this.props.onLoadSuccess;\n      var pdf = _this.state.pdf;\n      if (onLoadSuccess) onLoadSuccess(pdf);\n      _this.pages = new Array(pdf.numPages);\n\n      _this.linkService.setDocument(pdf);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadError\", function (error) {\n      _this.setState({\n        pdf: false\n      });\n\n      warning(error);\n      var onLoadError = _this.props.onLoadError;\n      if (onLoadError) onLoadError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"findDocumentSource\", function () {\n      return new Promise(function (resolve) {\n        var file = _this.props.file;\n\n        if (!file) {\n          resolve(null);\n        } // File is a string\n\n\n        if (typeof file === 'string') {\n          if (isDataURI(file)) {\n            var fileByteString = dataURItoByteString(file);\n            resolve({\n              data: fileByteString\n            });\n          }\n\n          displayCORSWarning();\n          resolve({\n            url: file\n          });\n        } // File is PDFDataRangeTransport\n\n\n        if (file instanceof PDFDataRangeTransport) {\n          resolve({\n            range: file\n          });\n        } // File is an ArrayBuffer\n\n\n        if (isArrayBuffer(file)) {\n          resolve({\n            data: file\n          });\n        }\n        /**\n         * The cases below are browser-only.\n         * If you're running on a non-browser environment, these cases will be of no use.\n         */\n\n\n        if (isBrowser) {\n          // File is a Blob\n          if (isBlob(file) || isFile(file)) {\n            loadFromFile(file).then(function (data) {\n              resolve({\n                data: data\n              });\n            });\n            return;\n          }\n        } // At this point, file must be an object\n\n\n        invariant(_typeof(file) === 'object', 'Invalid parameter in file, need either Uint8Array, string or a parameter object');\n        invariant(file.url || file.data || file.range, 'Invalid parameter object: need either .data, .range or .url'); // File .url is a string\n\n        if (typeof file.url === 'string') {\n          if (isDataURI(file.url)) {\n            var url = file.url,\n                otherParams = _objectWithoutProperties(file, _excluded);\n\n            var _fileByteString = dataURItoByteString(url);\n\n            resolve(_objectSpread({\n              data: _fileByteString\n            }, otherParams));\n          }\n\n          displayCORSWarning();\n        }\n\n        resolve(file);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"registerPage\", function (pageIndex, ref) {\n      _this.pages[pageIndex] = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unregisterPage\", function (pageIndex) {\n      delete _this.pages[pageIndex];\n    });\n\n    return _this;\n  }\n\n  _createClass(Document, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadDocument();\n      this.setupLinkService();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var file = this.props.file;\n\n      if (file !== prevProps.file) {\n        this.loadDocument();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // If rendering is in progress, let's cancel it\n      cancelRunningTask(this.runningTask); // If loading is in progress, let's destroy it\n\n      if (this.loadingTask) this.loadingTask.destroy();\n    }\n  }, {\n    key: \"childContext\",\n    get: function get() {\n      var linkService = this.linkService,\n          registerPage = this.registerPage,\n          unregisterPage = this.unregisterPage;\n      var _this$props3 = this.props,\n          imageResourcesPath = _this$props3.imageResourcesPath,\n          renderMode = _this$props3.renderMode,\n          rotate = _this$props3.rotate;\n      var pdf = this.state.pdf;\n      return {\n        imageResourcesPath: imageResourcesPath,\n        linkService: linkService,\n        pdf: pdf,\n        registerPage: registerPage,\n        renderMode: renderMode,\n        rotate: rotate,\n        unregisterPage: unregisterPage\n      };\n    }\n  }, {\n    key: \"eventProps\",\n    get: function get() {\n      var _this2 = this;\n\n      return makeEventProps(this.props, function () {\n        return _this2.state.pdf;\n      });\n    }\n    /**\n     * Called when a document source is resolved correctly\n     */\n\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var children = this.props.children;\n      return /*#__PURE__*/React.createElement(DocumentContext.Provider, {\n        value: this.childContext\n      }, children);\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var file = this.props.file;\n      var pdf = this.state.pdf;\n\n      if (!file) {\n        var noData = this.props.noData;\n        return /*#__PURE__*/React.createElement(Message, {\n          type: \"no-data\"\n        }, typeof noData === 'function' ? noData() : noData);\n      }\n\n      if (pdf === null) {\n        var loading = this.props.loading;\n        return /*#__PURE__*/React.createElement(Message, {\n          type: \"loading\"\n        }, typeof loading === 'function' ? loading() : loading);\n      }\n\n      if (pdf === false) {\n        var error = this.props.error;\n        return /*#__PURE__*/React.createElement(Message, {\n          type: \"error\"\n        }, typeof error === 'function' ? error() : error);\n      }\n\n      return this.renderChildren();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          inputRef = _this$props4.inputRef;\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: mergeClassNames('react-pdf__Document', className),\n        ref: inputRef\n      }, this.eventProps), this.renderContent());\n    }\n  }]);\n\n  return Document;\n}(PureComponent);\n\nexport { Document as default };\nDocument.defaultProps = {\n  error: 'Failed to load PDF file.',\n  loading: 'Loading PDF…',\n  noData: 'No PDF file specified.',\n  onPassword: function onPassword(callback, reason) {\n    switch (reason) {\n      case PasswordResponses.NEED_PASSWORD:\n        {\n          // eslint-disable-next-line no-alert\n          var password = prompt('Enter the password to open this PDF file.');\n          callback(password);\n          break;\n        }\n\n      case PasswordResponses.INCORRECT_PASSWORD:\n        {\n          // eslint-disable-next-line no-alert\n          var _password = prompt('Invalid password. Please try again.');\n\n          callback(_password);\n          break;\n        }\n\n      default:\n    }\n  }\n};\nvar isFunctionOrNode = PropTypes.oneOfType([PropTypes.func, PropTypes.node]);\nDocument.propTypes = _objectSpread(_objectSpread({}, eventProps), {}, {\n  children: PropTypes.node,\n  className: isClassName,\n  error: isFunctionOrNode,\n  externalLinkRel: PropTypes.string,\n  externalLinkTarget: PropTypes.string,\n  file: isFileProp,\n  imageResourcesPath: PropTypes.string,\n  inputRef: isRef,\n  loading: isFunctionOrNode,\n  noData: isFunctionOrNode,\n  onItemClick: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onLoadProgress: PropTypes.func,\n  onLoadSuccess: PropTypes.func,\n  onPassword: PropTypes.func,\n  onSourceError: PropTypes.func,\n  onSourceSuccess: PropTypes.func,\n  rotate: PropTypes.number\n});","import { createContext } from 'react';\nexport default /*#__PURE__*/createContext(null);","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar Ref = /*#__PURE__*/function () {\n  function Ref(_ref) {\n    var num = _ref.num,\n        gen = _ref.gen;\n\n    _classCallCheck(this, Ref);\n\n    this.num = num;\n    this.gen = gen;\n  }\n\n  _createClass(Ref, [{\n    key: \"toString\",\n    value: function toString() {\n      var str = \"\".concat(this.num, \"R\");\n\n      if (this.gen !== 0) {\n        str += this.gen;\n      }\n\n      return str;\n    }\n  }]);\n\n  return Ref;\n}();\n\nexport { Ref as default };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"item\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport DocumentContext from './DocumentContext';\nimport OutlineContext from './OutlineContext';\nimport Ref from './Ref';\nimport { isDefined } from './shared/utils';\nimport { isPdf } from './shared/propTypes';\nexport var OutlineItemInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(OutlineItemInternal, _PureComponent);\n\n  var _super = _createSuper(OutlineItemInternal);\n\n  function OutlineItemInternal() {\n    var _this;\n\n    _classCallCheck(this, OutlineItemInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"getDestination\", function () {\n      return new Promise(function (resolve, reject) {\n        var _this$props = _this.props,\n            item = _this$props.item,\n            pdf = _this$props.pdf;\n\n        if (!isDefined(_this.destination)) {\n          if (typeof item.dest === 'string') {\n            pdf.getDestination(item.dest).then(resolve)[\"catch\"](reject);\n          } else {\n            resolve(item.dest);\n          }\n        }\n\n        return _this.destination;\n      }).then(function (destination) {\n        _this.destination = destination;\n        return destination;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPageIndex\", function () {\n      return new Promise(function (resolve, reject) {\n        var pdf = _this.props.pdf;\n\n        if (isDefined(_this.pageIndex)) {\n          resolve(_this.pageIndex);\n        }\n\n        _this.getDestination().then(function (destination) {\n          if (!destination) {\n            return;\n          }\n\n          var _destination = _slicedToArray(destination, 1),\n              ref = _destination[0];\n\n          pdf.getPageIndex(new Ref(ref)).then(resolve)[\"catch\"](reject);\n        });\n      }).then(function (pageIndex) {\n        _this.pageIndex = pageIndex;\n        return _this.pageIndex;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPageNumber\", function () {\n      return new Promise(function (resolve, reject) {\n        if (isDefined(_this.pageNumber)) {\n          resolve(_this.pageNumber);\n        }\n\n        _this.getPageIndex().then(function (pageIndex) {\n          resolve(pageIndex + 1);\n        })[\"catch\"](reject);\n      }).then(function (pageNumber) {\n        _this.pageNumber = pageNumber;\n        return pageNumber;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (event) {\n      var onClick = _this.props.onClick;\n      event.preventDefault();\n\n      if (!onClick) {\n        return false;\n      }\n\n      return Promise.all([_this.getDestination(), _this.getPageIndex(), _this.getPageNumber()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            dest = _ref2[0],\n            pageIndex = _ref2[1],\n            pageNumber = _ref2[2];\n\n        onClick({\n          dest: dest,\n          pageIndex: pageIndex,\n          pageNumber: pageNumber\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(OutlineItemInternal, [{\n    key: \"renderSubitems\",\n    value: function renderSubitems() {\n      var _this$props2 = this.props,\n          item = _this$props2.item,\n          otherProps = _objectWithoutProperties(_this$props2, _excluded);\n\n      if (!item.items || !item.items.length) {\n        return null;\n      }\n\n      var subitems = item.items;\n      return /*#__PURE__*/React.createElement(\"ul\", null, subitems.map(function (subitem, subitemIndex) {\n        return /*#__PURE__*/React.createElement(OutlineItemInternal, _extends({\n          key: typeof subitem.destination === 'string' ? subitem.destination : subitemIndex,\n          item: subitem\n        }, otherProps));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var item = this.props.item;\n      return /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.onClick\n      }, item.title), this.renderSubitems());\n    }\n  }]);\n\n  return OutlineItemInternal;\n}(PureComponent);\nvar isDestination = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.any)]);\nOutlineItemInternal.propTypes = {\n  item: PropTypes.shape({\n    dest: isDestination,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      dest: isDestination,\n      title: PropTypes.string\n    })),\n    title: PropTypes.string\n  }).isRequired,\n  onClick: PropTypes.func,\n  pdf: isPdf.isRequired\n};\n\nvar OutlineItem = function OutlineItem(props) {\n  return /*#__PURE__*/React.createElement(DocumentContext.Consumer, null, function (documentContext) {\n    return /*#__PURE__*/React.createElement(OutlineContext.Consumer, null, function (outlineContext) {\n      return /*#__PURE__*/React.createElement(OutlineItemInternal, _extends({}, documentContext, outlineContext, props));\n    });\n  });\n};\n\nexport default OutlineItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport makeCancellable from 'make-cancellable-promise';\nimport makeEventProps from 'make-event-props';\nimport mergeClassNames from 'merge-class-names';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport DocumentContext from './DocumentContext';\nimport OutlineContext from './OutlineContext';\nimport OutlineItem from './OutlineItem';\nimport { cancelRunningTask } from './shared/utils';\nimport { eventProps, isClassName, isPdf, isRef } from './shared/propTypes';\nexport var OutlineInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(OutlineInternal, _PureComponent);\n\n  var _super = _createSuper(OutlineInternal);\n\n  function OutlineInternal() {\n    var _this;\n\n    _classCallCheck(this, OutlineInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      outline: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadOutline\", function () {\n      var pdf = _this.props.pdf;\n\n      _this.setState(function (prevState) {\n        if (!prevState.outline) {\n          return null;\n        }\n\n        return {\n          outline: null\n        };\n      });\n\n      var cancellable = makeCancellable(pdf.getOutline());\n      _this.runningTask = cancellable;\n      cancellable.promise.then(function (outline) {\n        _this.setState({\n          outline: outline\n        }, _this.onLoadSuccess);\n      })[\"catch\"](function (error) {\n        _this.onLoadError(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadSuccess\", function () {\n      var onLoadSuccess = _this.props.onLoadSuccess;\n      var outline = _this.state.outline;\n      if (onLoadSuccess) onLoadSuccess(outline);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadError\", function (error) {\n      _this.setState({\n        outline: false\n      });\n\n      warning(error);\n      var onLoadError = _this.props.onLoadError;\n      if (onLoadError) onLoadError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemClick\", function (_ref) {\n      var dest = _ref.dest,\n          pageIndex = _ref.pageIndex,\n          pageNumber = _ref.pageNumber;\n      var onItemClick = _this.props.onItemClick;\n\n      if (onItemClick) {\n        onItemClick({\n          dest: dest,\n          pageIndex: pageIndex,\n          pageNumber: pageNumber\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(OutlineInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var pdf = this.props.pdf;\n      invariant(pdf, 'Attempted to load an outline, but no document was specified.');\n      this.loadOutline();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var pdf = this.props.pdf;\n\n      if (prevProps.pdf && pdf !== prevProps.pdf) {\n        this.loadOutline();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      cancelRunningTask(this.runningTask);\n    }\n  }, {\n    key: \"childContext\",\n    get: function get() {\n      return {\n        onClick: this.onItemClick\n      };\n    }\n  }, {\n    key: \"eventProps\",\n    get: function get() {\n      var _this2 = this;\n\n      return makeEventProps(this.props, function () {\n        return _this2.state.outline;\n      });\n    }\n    /**\n     * Called when an outline is read successfully\n     */\n\n  }, {\n    key: \"renderOutline\",\n    value: function renderOutline() {\n      var outline = this.state.outline;\n      return /*#__PURE__*/React.createElement(\"ul\", null, outline.map(function (item, itemIndex) {\n        return /*#__PURE__*/React.createElement(OutlineItem, {\n          key: typeof item.destination === 'string' ? item.destination : itemIndex,\n          item: item\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pdf = this.props.pdf;\n      var outline = this.state.outline;\n\n      if (!pdf || !outline) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          inputRef = _this$props.inputRef;\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: mergeClassNames('react-pdf__Outline', className),\n        ref: inputRef\n      }, this.eventProps), /*#__PURE__*/React.createElement(OutlineContext.Provider, {\n        value: this.childContext\n      }, this.renderOutline()));\n    }\n  }]);\n\n  return OutlineInternal;\n}(PureComponent);\nOutlineInternal.propTypes = _objectSpread({\n  className: isClassName,\n  inputRef: isRef,\n  onItemClick: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onLoadSuccess: PropTypes.func,\n  pdf: isPdf\n}, eventProps);\n\nfunction Outline(props, ref) {\n  return /*#__PURE__*/React.createElement(DocumentContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(OutlineInternal, _extends({\n      ref: ref\n    }, context, props));\n  });\n}\n\nexport default /*#__PURE__*/React.forwardRef(Outline);","/**\n * A function that merges React refs into one.\n * Supports both functions and ref objects created using createRef() and useRef().\n *\n * Usage:\n * ```tsx\n * <div ref={mergeRefs(ref1, ref2, ref3)} />\n * ```\n *\n * @param {(React.Ref<T> | undefined)[]} inputRefs Array of refs\n * @returns {React.Ref<T> | React.RefCallback<T>} Merged refs\n */\nexport default function mergeRefs() {\n    var inputRefs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputRefs[_i] = arguments[_i];\n    }\n    var filteredInputRefs = inputRefs.filter(Boolean);\n    if (filteredInputRefs.length <= 1) {\n        var firstRef = filteredInputRefs[0];\n        return firstRef || null;\n    }\n    return function mergedRefs(ref) {\n        filteredInputRefs.forEach(function (inputRef) {\n            if (typeof inputRef === 'function') {\n                inputRef(ref);\n            }\n            else if (inputRef) {\n                inputRef.current = ref;\n            }\n        });\n    };\n}\n","import { createContext } from 'react';\nexport default /*#__PURE__*/createContext(null);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { createRef, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport mergeRefs from 'merge-refs';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist/legacy/build/pdf';\nimport PageContext from '../PageContext';\nimport { getPixelRatio, isCancelException, makePageCallback } from '../shared/utils';\nimport { isPage, isRef, isRotate } from '../shared/propTypes';\nvar ANNOTATION_MODE = pdfjs.AnnotationMode;\nexport var PageCanvasInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PageCanvasInternal, _PureComponent);\n\n  var _super = _createSuper(PageCanvasInternal);\n\n  function PageCanvasInternal() {\n    var _this;\n\n    _classCallCheck(this, PageCanvasInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"canvasElement\", /*#__PURE__*/createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onRenderSuccess\", function () {\n      _this.renderer = null;\n      var _this$props = _this.props,\n          onRenderSuccess = _this$props.onRenderSuccess,\n          page = _this$props.page,\n          scale = _this$props.scale;\n      if (onRenderSuccess) onRenderSuccess(makePageCallback(page, scale));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRenderError\", function (error) {\n      if (isCancelException(error)) {\n        return;\n      }\n\n      warning(error);\n      var onRenderError = _this.props.onRenderError;\n      if (onRenderError) onRenderError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"drawPageOnCanvas\", function () {\n      var canvas = _this.canvasElement.current;\n\n      if (!canvas) {\n        return null;\n      }\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          renderViewport = _assertThisInitialize.renderViewport,\n          viewport = _assertThisInitialize.viewport;\n\n      var _this$props2 = _this.props,\n          canvasBackground = _this$props2.canvasBackground,\n          page = _this$props2.page,\n          renderForms = _this$props2.renderForms;\n      canvas.width = renderViewport.width;\n      canvas.height = renderViewport.height;\n      canvas.style.width = \"\".concat(Math.floor(viewport.width), \"px\");\n      canvas.style.height = \"\".concat(Math.floor(viewport.height), \"px\");\n      var renderContext = {\n        annotationMode: renderForms ? ANNOTATION_MODE.ENABLE_FORMS : ANNOTATION_MODE.ENABLE,\n\n        get canvasContext() {\n          return canvas.getContext('2d');\n        },\n\n        viewport: renderViewport\n      };\n\n      if (canvasBackground) {\n        renderContext.background = canvasBackground;\n      } // If another render is in progress, let's cancel it\n\n\n      _this.cancelRenderingTask();\n\n      _this.renderer = page.render(renderContext);\n      return _this.renderer.promise.then(_this.onRenderSuccess)[\"catch\"](_this.onRenderError);\n    });\n\n    return _this;\n  }\n\n  _createClass(PageCanvasInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawPageOnCanvas();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          canvasBackground = _this$props3.canvasBackground,\n          page = _this$props3.page,\n          renderForms = _this$props3.renderForms;\n\n      if (canvasBackground !== prevProps.canvasBackground || renderForms !== prevProps.renderForms) {\n        // Ensures the canvas will be re-rendered from scratch. Otherwise all form data will stay.\n        page.cleanup();\n        this.drawPageOnCanvas();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.cancelRenderingTask();\n      var canvas = this.canvasElement.current;\n      /**\n       * Zeroing the width and height cause most browsers to release graphics\n       * resources immediately, which can greatly reduce memory consumption.\n       */\n\n      if (canvas) {\n        canvas.width = 0;\n        canvas.height = 0;\n      }\n    }\n  }, {\n    key: \"cancelRenderingTask\",\n    value: function cancelRenderingTask() {\n      if (this.renderer) {\n        this.renderer.cancel();\n        this.renderer = null;\n      }\n    }\n    /**\n     * Called when a page is rendered successfully.\n     */\n\n  }, {\n    key: \"renderViewport\",\n    get: function get() {\n      var _this$props4 = this.props,\n          page = _this$props4.page,\n          rotate = _this$props4.rotate,\n          scale = _this$props4.scale;\n      var pixelRatio = getPixelRatio();\n      return page.getViewport({\n        scale: scale * pixelRatio,\n        rotation: rotate\n      });\n    }\n  }, {\n    key: \"viewport\",\n    get: function get() {\n      var _this$props5 = this.props,\n          page = _this$props5.page,\n          rotate = _this$props5.rotate,\n          scale = _this$props5.scale;\n      return page.getViewport({\n        scale: scale,\n        rotation: rotate\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var canvasRef = this.props.canvasRef;\n      return /*#__PURE__*/React.createElement(\"canvas\", {\n        className: \"react-pdf__Page__canvas\",\n        dir: \"ltr\",\n        ref: mergeRefs(canvasRef, this.canvasElement),\n        style: {\n          display: 'block',\n          userSelect: 'none'\n        }\n      });\n    }\n  }]);\n\n  return PageCanvasInternal;\n}(PureComponent);\nPageCanvasInternal.propTypes = {\n  canvasBackground: PropTypes.string,\n  canvasRef: isRef,\n  onRenderError: PropTypes.func,\n  onRenderSuccess: PropTypes.func,\n  page: isPage.isRequired,\n  renderForms: PropTypes.bool,\n  rotate: isRotate,\n  scale: PropTypes.number.isRequired\n};\nexport default function PageCanvas(props) {\n  return /*#__PURE__*/React.createElement(PageContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(PageCanvasInternal, _extends({}, context, props));\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist/legacy/build/pdf';\nimport PageContext from '../PageContext';\nimport { isCancelException, makePageCallback } from '../shared/utils';\nimport { isPage, isRotate } from '../shared/propTypes';\nexport var PageSVGInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PageSVGInternal, _PureComponent);\n\n  var _super = _createSuper(PageSVGInternal);\n\n  function PageSVGInternal() {\n    var _this;\n\n    _classCallCheck(this, PageSVGInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      svg: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRenderSuccess\", function () {\n      _this.renderer = null;\n      var _this$props = _this.props,\n          onRenderSuccess = _this$props.onRenderSuccess,\n          page = _this$props.page,\n          scale = _this$props.scale;\n      if (onRenderSuccess) onRenderSuccess(makePageCallback(page, scale));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRenderError\", function (error) {\n      if (isCancelException(error)) {\n        return;\n      }\n\n      warning(error);\n      var onRenderError = _this.props.onRenderError;\n      if (onRenderError) onRenderError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSVG\", function () {\n      var page = _this.props.page;\n      _this.renderer = page.getOperatorList();\n      return _this.renderer.then(function (operatorList) {\n        var svgGfx = new pdfjs.SVGGraphics(page.commonObjs, page.objs);\n        _this.renderer = svgGfx.getSVG(operatorList, _this.viewport).then(function (svg) {\n          _this.setState({\n            svg: svg\n          }, _this.onRenderSuccess);\n        })[\"catch\"](_this.onRenderError);\n      })[\"catch\"](_this.onRenderError);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"drawPageOnContainer\", function (element) {\n      var svg = _this.state.svg;\n\n      if (!element || !svg) {\n        return;\n      } // Append SVG element to the main container, if this hasn't been done already\n\n\n      if (!element.firstElementChild) {\n        element.appendChild(svg);\n      }\n\n      var _this$viewport = _this.viewport,\n          width = _this$viewport.width,\n          height = _this$viewport.height;\n      svg.setAttribute('width', width);\n      svg.setAttribute('height', height);\n    });\n\n    return _this;\n  }\n\n  _createClass(PageSVGInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderSVG();\n    }\n    /**\n     * Called when a page is rendered successfully.\n     */\n\n  }, {\n    key: \"viewport\",\n    get: function get() {\n      var _this$props2 = this.props,\n          page = _this$props2.page,\n          rotate = _this$props2.rotate,\n          scale = _this$props2.scale;\n      return page.getViewport({\n        scale: scale,\n        rotation: rotate\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$viewport2 = this.viewport,\n          width = _this$viewport2.width,\n          height = _this$viewport2.height;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"react-pdf__Page__svg\" // Note: This cannot be shortened, as we need this function to be called with each render.\n        ,\n        ref: function ref(_ref) {\n          return _this2.drawPageOnContainer(_ref);\n        },\n        style: {\n          display: 'block',\n          backgroundColor: 'white',\n          overflow: 'hidden',\n          width: width,\n          height: height,\n          userSelect: 'none'\n        }\n      });\n    }\n  }]);\n\n  return PageSVGInternal;\n}(PureComponent);\nPageSVGInternal.propTypes = {\n  onRenderError: PropTypes.func,\n  onRenderSuccess: PropTypes.func,\n  page: isPage.isRequired,\n  rotate: isRotate,\n  scale: PropTypes.number.isRequired\n};\nexport default function PageSVG(props) {\n  return /*#__PURE__*/React.createElement(PageContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(PageSVGInternal, _extends({}, context, props));\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { createRef, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport PageContext from '../PageContext';\nimport { isPage, isRotate } from '../shared/propTypes';\nexport var TextLayerItemInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextLayerItemInternal, _PureComponent);\n\n  var _super = _createSuper(TextLayerItemInternal);\n\n  function TextLayerItemInternal() {\n    var _this;\n\n    _classCallCheck(this, TextLayerItemInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"itemElement\", /*#__PURE__*/createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getElementWidth\", function (element) {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          sideways = _assertThisInitialize.sideways;\n\n      return element.getBoundingClientRect()[sideways ? 'height' : 'width'];\n    });\n\n    return _this;\n  }\n\n  _createClass(TextLayerItemInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.alignTextItem();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.alignTextItem();\n    }\n  }, {\n    key: \"unrotatedViewport\",\n    get: function get() {\n      var _this$props = this.props,\n          page = _this$props.page,\n          scale = _this$props.scale;\n      return page.getViewport({\n        scale: scale\n      });\n    }\n    /**\n     * It might happen that the page is rotated by default. In such cases, we shouldn't rotate\n     * text content.\n     */\n\n  }, {\n    key: \"rotate\",\n    get: function get() {\n      var _this$props2 = this.props,\n          page = _this$props2.page,\n          rotate = _this$props2.rotate;\n      return rotate - page.rotate;\n    }\n  }, {\n    key: \"sideways\",\n    get: function get() {\n      var rotate = this.rotate;\n      return rotate % 180 !== 0;\n    }\n  }, {\n    key: \"defaultSideways\",\n    get: function get() {\n      var rotation = this.unrotatedViewport.rotation;\n      return rotation % 180 !== 0;\n    }\n  }, {\n    key: \"fontSize\",\n    get: function get() {\n      var transform = this.props.transform;\n      var defaultSideways = this.defaultSideways;\n\n      var _transform = _slicedToArray(transform, 2),\n          fontHeightPx = _transform[0],\n          fontWidthPx = _transform[1];\n\n      return defaultSideways ? fontWidthPx : fontHeightPx;\n    }\n  }, {\n    key: \"top\",\n    get: function get() {\n      var transform = this.props.transform;\n      var viewport = this.unrotatedViewport,\n          defaultSideways = this.defaultSideways;\n\n      var _transform2 = _slicedToArray(transform, 6),\n\n      /* fontHeightPx */\n\n      /* fontWidthPx */\n      offsetX = _transform2[2],\n          offsetY = _transform2[3],\n          x = _transform2[4],\n          y = _transform2[5];\n\n      var _viewport$viewBox = _slicedToArray(viewport.viewBox, 4),\n\n      /* xMin */\n      yMin\n      /* xMax */\n      = _viewport$viewBox[1],\n          yMax = _viewport$viewBox[3];\n\n      return defaultSideways ? x + offsetX + yMin : yMax - (y + offsetY);\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      var transform = this.props.transform;\n      var viewport = this.unrotatedViewport,\n          defaultSideways = this.defaultSideways;\n\n      var _transform3 = _slicedToArray(transform, 6),\n\n      /* fontHeightPx */\n\n      /* fontWidthPx */\n\n      /* offsetX */\n\n      /* offsetY */\n      x = _transform3[4],\n          y = _transform3[5];\n\n      var _viewport$viewBox2 = _slicedToArray(viewport.viewBox, 1),\n          xMin = _viewport$viewBox2[0];\n\n      return defaultSideways ? y - xMin : x - xMin;\n    }\n  }, {\n    key: \"getFontData\",\n    value: function getFontData(fontName) {\n      var page = this.props.page;\n      return new Promise(function (resolve) {\n        page.commonObjs.get(fontName, resolve);\n      });\n    }\n  }, {\n    key: \"alignTextItem\",\n    value: function alignTextItem() {\n      var _this2 = this;\n\n      var element = this.itemElement.current;\n\n      if (!element) {\n        return;\n      }\n\n      element.style.transform = '';\n      var _this$props3 = this.props,\n          fontName = _this$props3.fontName,\n          scale = _this$props3.scale,\n          width = _this$props3.width;\n      element.style.fontFamily = \"\".concat(fontName, \", sans-serif\");\n      this.getFontData(fontName).then(function (fontData) {\n        var fallbackFontName = fontData ? fontData.fallbackName : 'sans-serif';\n        element.style.fontFamily = \"\".concat(fontName, \", \").concat(fallbackFontName);\n        var targetWidth = width * scale;\n\n        var actualWidth = _this2.getElementWidth(element);\n\n        var transform = \"scaleX(\".concat(targetWidth / actualWidth, \")\");\n        var ascent = fontData ? fontData.ascent : 0;\n\n        if (ascent) {\n          transform += \" translateY(\".concat((1 - ascent) * 100, \"%)\");\n        }\n\n        element.style.transform = transform;\n        element.style.WebkitTransform = transform;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fontSize = this.fontSize,\n          top = this.top,\n          left = this.left;\n      var _this$props4 = this.props,\n          customTextRenderer = _this$props4.customTextRenderer,\n          scale = _this$props4.scale,\n          text = _this$props4.str;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: this.itemElement,\n        style: {\n          height: '1em',\n          fontFamily: 'sans-serif',\n          fontSize: \"\".concat(fontSize * scale, \"px\"),\n          position: 'absolute',\n          top: \"\".concat(top * scale, \"px\"),\n          left: \"\".concat(left * scale, \"px\"),\n          transformOrigin: 'left bottom',\n          whiteSpace: 'pre',\n          pointerEvents: 'all'\n        }\n      }, customTextRenderer ? customTextRenderer(this.props) : text);\n    }\n  }]);\n\n  return TextLayerItemInternal;\n}(PureComponent);\nTextLayerItemInternal.propTypes = {\n  customTextRenderer: PropTypes.func,\n  fontName: PropTypes.string.isRequired,\n  itemIndex: PropTypes.number.isRequired,\n  page: isPage.isRequired,\n  rotate: isRotate,\n  scale: PropTypes.number,\n  str: PropTypes.string.isRequired,\n  transform: PropTypes.arrayOf(PropTypes.number).isRequired,\n  width: PropTypes.number.isRequired\n};\nexport default function TextLayerItem(props) {\n  return /*#__PURE__*/React.createElement(PageContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(TextLayerItemInternal, _extends({}, context, props));\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport PageContext from '../PageContext';\nimport TextLayerItem from './TextLayerItem';\nimport { cancelRunningTask } from '../shared/utils';\nimport { isPage, isRotate } from '../shared/propTypes';\nexport var TextLayerInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextLayerInternal, _PureComponent);\n\n  var _super = _createSuper(TextLayerInternal);\n\n  function TextLayerInternal() {\n    var _this;\n\n    _classCallCheck(this, TextLayerInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      textItems: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadTextItems\", function () {\n      var page = _this.props.page;\n      var cancellable = makeCancellable(page.getTextContent());\n      _this.runningTask = cancellable;\n      cancellable.promise.then(function (_ref) {\n        var textItems = _ref.items;\n\n        _this.setState({\n          textItems: textItems\n        }, _this.onLoadSuccess);\n      })[\"catch\"](function (error) {\n        _this.onLoadError(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadSuccess\", function () {\n      var onGetTextSuccess = _this.props.onGetTextSuccess;\n      var textItems = _this.state.textItems;\n      if (onGetTextSuccess) onGetTextSuccess(textItems);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadError\", function (error) {\n      _this.setState({\n        textItems: false\n      });\n\n      warning(error);\n      var onGetTextError = _this.props.onGetTextError;\n      if (onGetTextError) onGetTextError(error);\n    });\n\n    return _this;\n  }\n\n  _createClass(TextLayerInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var page = this.props.page;\n      invariant(page, 'Attempted to load page text content, but no page was specified.');\n      this.loadTextItems();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var page = this.props.page;\n\n      if (prevProps.page && page !== prevProps.page) {\n        this.loadTextItems();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      cancelRunningTask(this.runningTask);\n    }\n  }, {\n    key: \"unrotatedViewport\",\n    get: function get() {\n      var _this$props = this.props,\n          page = _this$props.page,\n          scale = _this$props.scale;\n      return page.getViewport({\n        scale: scale\n      });\n    }\n    /**\n     * It might happen that the page is rotated by default. In such cases, we shouldn't rotate\n     * text content.\n     */\n\n  }, {\n    key: \"rotate\",\n    get: function get() {\n      var _this$props2 = this.props,\n          page = _this$props2.page,\n          rotate = _this$props2.rotate;\n      return rotate - page.rotate;\n    }\n  }, {\n    key: \"renderTextItems\",\n    value: function renderTextItems() {\n      var textItems = this.state.textItems;\n\n      if (!textItems) {\n        return null;\n      }\n\n      return textItems.map(function (textItem, itemIndex) {\n        return /*#__PURE__*/React.createElement(TextLayerItem // eslint-disable-next-line react/no-array-index-key\n        , _extends({\n          key: itemIndex,\n          itemIndex: itemIndex\n        }, textItem));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var viewport = this.unrotatedViewport,\n          rotate = this.rotate;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"react-pdf__Page__textContent\",\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          width: \"\".concat(viewport.width, \"px\"),\n          height: \"\".concat(viewport.height, \"px\"),\n          color: 'transparent',\n          transform: \"translate(-50%, -50%) rotate(\".concat(rotate, \"deg)\"),\n          WebkitTransform: \"translate(-50%, -50%) rotate(\".concat(rotate, \"deg)\"),\n          pointerEvents: 'none'\n        }\n      }, this.renderTextItems());\n    }\n  }]);\n\n  return TextLayerInternal;\n}(PureComponent);\nTextLayerInternal.propTypes = {\n  onGetTextError: PropTypes.func,\n  onGetTextSuccess: PropTypes.func,\n  page: isPage.isRequired,\n  rotate: isRotate,\n  scale: PropTypes.number\n};\nexport default function TextLayer(props) {\n  return /*#__PURE__*/React.createElement(PageContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(TextLayerInternal, _extends({}, context, props));\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { createRef, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist/legacy/build/pdf';\nimport DocumentContext from '../DocumentContext';\nimport PageContext from '../PageContext';\nimport { cancelRunningTask } from '../shared/utils';\nimport { isLinkService, isPage, isRotate } from '../shared/propTypes';\nexport var AnnotationLayerInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(AnnotationLayerInternal, _PureComponent);\n\n  var _super = _createSuper(AnnotationLayerInternal);\n\n  function AnnotationLayerInternal() {\n    var _this;\n\n    _classCallCheck(this, AnnotationLayerInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      annotations: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"layerElement\", /*#__PURE__*/createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"loadAnnotations\", function () {\n      var page = _this.props.page;\n      var cancellable = makeCancellable(page.getAnnotations());\n      _this.runningTask = cancellable;\n      cancellable.promise.then(function (annotations) {\n        _this.setState({\n          annotations: annotations\n        }, _this.onLoadSuccess);\n      })[\"catch\"](function (error) {\n        _this.onLoadError(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadSuccess\", function () {\n      var onGetAnnotationsSuccess = _this.props.onGetAnnotationsSuccess;\n      var annotations = _this.state.annotations;\n      if (onGetAnnotationsSuccess) onGetAnnotationsSuccess(annotations);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadError\", function (error) {\n      _this.setState({\n        annotations: false\n      });\n\n      warning(error);\n      var onGetAnnotationsError = _this.props.onGetAnnotationsError;\n      if (onGetAnnotationsError) onGetAnnotationsError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRenderSuccess\", function () {\n      var onRenderAnnotationLayerSuccess = _this.props.onRenderAnnotationLayerSuccess;\n      if (onRenderAnnotationLayerSuccess) onRenderAnnotationLayerSuccess();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRenderError\", function (error) {\n      warning(error);\n      var onRenderAnnotationLayerError = _this.props.onRenderAnnotationLayerError;\n      if (onRenderAnnotationLayerError) onRenderAnnotationLayerError(error);\n    });\n\n    return _this;\n  }\n\n  _createClass(AnnotationLayerInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var page = this.props.page;\n      invariant(page, 'Attempted to load page annotations, but no page was specified.');\n      this.loadAnnotations();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          page = _this$props.page,\n          renderForms = _this$props.renderForms;\n\n      if (prevProps.page && page !== prevProps.page || renderForms !== prevProps.renderForms) {\n        this.loadAnnotations();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      cancelRunningTask(this.runningTask);\n    }\n  }, {\n    key: \"viewport\",\n    get: function get() {\n      var _this$props2 = this.props,\n          page = _this$props2.page,\n          rotate = _this$props2.rotate,\n          scale = _this$props2.scale;\n      return page.getViewport({\n        scale: scale,\n        rotation: rotate\n      });\n    }\n  }, {\n    key: \"renderAnnotationLayer\",\n    value: function renderAnnotationLayer() {\n      var annotations = this.state.annotations;\n\n      if (!annotations) {\n        return;\n      }\n\n      var _this$props3 = this.props,\n          imageResourcesPath = _this$props3.imageResourcesPath,\n          linkService = _this$props3.linkService,\n          page = _this$props3.page,\n          renderForms = _this$props3.renderForms;\n      var viewport = this.viewport.clone({\n        dontFlip: true\n      });\n      var parameters = {\n        annotations: annotations,\n        div: this.layerElement.current,\n        imageResourcesPath: imageResourcesPath,\n        linkService: linkService,\n        page: page,\n        renderForms: renderForms,\n        viewport: viewport\n      };\n      this.layerElement.current.innerHTML = '';\n\n      try {\n        pdfjs.AnnotationLayer.render(parameters);\n        this.onRenderSuccess();\n      } catch (error) {\n        this.onRenderError(error);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"react-pdf__Page__annotations annotationLayer\",\n        ref: this.layerElement\n      }, this.renderAnnotationLayer());\n    }\n  }]);\n\n  return AnnotationLayerInternal;\n}(PureComponent);\nAnnotationLayerInternal.propTypes = {\n  imageResourcesPath: PropTypes.string,\n  linkService: isLinkService.isRequired,\n  onGetAnnotationsError: PropTypes.func,\n  onGetAnnotationsSuccess: PropTypes.func,\n  onRenderAnnotationLayerError: PropTypes.func,\n  onRenderAnnotationLayerSuccess: PropTypes.func,\n  page: isPage,\n  renderForms: PropTypes.bool,\n  rotate: isRotate,\n  scale: PropTypes.number\n};\n\nvar AnnotationLayer = function AnnotationLayer(props) {\n  return /*#__PURE__*/React.createElement(DocumentContext.Consumer, null, function (documentContext) {\n    return /*#__PURE__*/React.createElement(PageContext.Consumer, null, function (pageContext) {\n      return /*#__PURE__*/React.createElement(AnnotationLayerInternal, _extends({}, documentContext, pageContext, props));\n    });\n  });\n};\n\nexport default AnnotationLayer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { createRef, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport makeCancellable from 'make-cancellable-promise';\nimport makeEventProps from 'make-event-props';\nimport mergeClassNames from 'merge-class-names';\nimport mergeRefs from 'merge-refs';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport DocumentContext from './DocumentContext';\nimport PageContext from './PageContext';\nimport Message from './Message';\nimport PageCanvas from './Page/PageCanvas';\nimport PageSVG from './Page/PageSVG';\nimport TextLayer from './Page/TextLayer';\nimport AnnotationLayer from './Page/AnnotationLayer';\nimport { cancelRunningTask, isProvided, makePageCallback } from './shared/utils';\nimport { eventProps, isClassName, isPageIndex, isPageNumber, isPdf, isRef, isRenderMode, isRotate } from './shared/propTypes';\nvar defaultScale = 1;\nexport var PageInternal = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PageInternal, _PureComponent);\n\n  var _super = _createSuper(PageInternal);\n\n  function PageInternal() {\n    var _this;\n\n    _classCallCheck(this, PageInternal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      page: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pageElement\", /*#__PURE__*/createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadSuccess\", function () {\n      var _this$props = _this.props,\n          onLoadSuccess = _this$props.onLoadSuccess,\n          registerPage = _this$props.registerPage;\n      var page = _this.state.page;\n      if (onLoadSuccess) onLoadSuccess(makePageCallback(page, _this.scale));\n      if (registerPage) registerPage(_this.pageIndex, _this.pageElement.current);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoadError\", function (error) {\n      _this.setState({\n        page: false\n      });\n\n      warning(error);\n      var onLoadError = _this.props.onLoadError;\n      if (onLoadError) onLoadError(error);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadPage\", function () {\n      var pdf = _this.props.pdf;\n\n      var pageNumber = _this.getPageNumber();\n\n      if (!pageNumber) {\n        return;\n      }\n\n      _this.setState(function (prevState) {\n        if (!prevState.page) {\n          return null;\n        }\n\n        return {\n          page: null\n        };\n      });\n\n      var cancellable = makeCancellable(pdf.getPage(pageNumber));\n      _this.runningTask = cancellable;\n      cancellable.promise.then(function (page) {\n        _this.setState({\n          page: page\n        }, _this.onLoadSuccess);\n      })[\"catch\"](function (error) {\n        _this.onLoadError(error);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PageInternal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var pdf = this.props.pdf;\n      invariant(pdf, 'Attempted to load a page, but no document was specified.');\n      this.loadPage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var pdf = this.props.pdf;\n\n      if (prevProps.pdf && pdf !== prevProps.pdf || this.getPageNumber() !== this.getPageNumber(prevProps)) {\n        var unregisterPage = this.props.unregisterPage;\n        if (unregisterPage) unregisterPage(this.getPageIndex(prevProps));\n        this.loadPage();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var unregisterPage = this.props.unregisterPage;\n      if (unregisterPage) unregisterPage(this.pageIndex);\n      cancelRunningTask(this.runningTask);\n    }\n  }, {\n    key: \"childContext\",\n    get: function get() {\n      var page = this.state.page;\n\n      if (!page) {\n        return {};\n      }\n\n      var _this$props2 = this.props,\n          canvasBackground = _this$props2.canvasBackground,\n          customTextRenderer = _this$props2.customTextRenderer,\n          onGetAnnotationsError = _this$props2.onGetAnnotationsError,\n          onGetAnnotationsSuccess = _this$props2.onGetAnnotationsSuccess,\n          onGetTextError = _this$props2.onGetTextError,\n          onGetTextSuccess = _this$props2.onGetTextSuccess,\n          onRenderAnnotationLayerError = _this$props2.onRenderAnnotationLayerError,\n          onRenderAnnotationLayerSuccess = _this$props2.onRenderAnnotationLayerSuccess,\n          onRenderError = _this$props2.onRenderError,\n          onRenderSuccess = _this$props2.onRenderSuccess,\n          renderForms = _this$props2.renderForms,\n          renderInteractiveForms = _this$props2.renderInteractiveForms;\n      return {\n        canvasBackground: canvasBackground,\n        customTextRenderer: customTextRenderer,\n        onGetAnnotationsError: onGetAnnotationsError,\n        onGetAnnotationsSuccess: onGetAnnotationsSuccess,\n        onGetTextError: onGetTextError,\n        onGetTextSuccess: onGetTextSuccess,\n        onRenderAnnotationLayerError: onRenderAnnotationLayerError,\n        onRenderAnnotationLayerSuccess: onRenderAnnotationLayerSuccess,\n        onRenderError: onRenderError,\n        onRenderSuccess: onRenderSuccess,\n        page: page,\n        renderForms: renderForms !== null && renderForms !== void 0 ? renderForms : renderInteractiveForms,\n        // For backward compatibility\n        rotate: this.rotate,\n        scale: this.scale\n      };\n    }\n    /**\n     * Called when a page is loaded successfully\n     */\n\n  }, {\n    key: \"getPageIndex\",\n    value: function getPageIndex() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (isProvided(props.pageNumber)) {\n        return props.pageNumber - 1;\n      }\n\n      if (isProvided(props.pageIndex)) {\n        return props.pageIndex;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getPageNumber\",\n    value: function getPageNumber() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (isProvided(props.pageNumber)) {\n        return props.pageNumber;\n      }\n\n      if (isProvided(props.pageIndex)) {\n        return props.pageIndex + 1;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"pageIndex\",\n    get: function get() {\n      return this.getPageIndex();\n    }\n  }, {\n    key: \"pageNumber\",\n    get: function get() {\n      return this.getPageNumber();\n    }\n  }, {\n    key: \"rotate\",\n    get: function get() {\n      var rotate = this.props.rotate;\n\n      if (isProvided(rotate)) {\n        return rotate;\n      }\n\n      var page = this.state.page;\n\n      if (!page) {\n        return null;\n      }\n\n      return page.rotate;\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      var page = this.state.page;\n\n      if (!page) {\n        return null;\n      }\n\n      var _this$props3 = this.props,\n          scale = _this$props3.scale,\n          width = _this$props3.width,\n          height = _this$props3.height;\n      var rotate = this.rotate; // Be default, we'll render page at 100% * scale width.\n\n      var pageScale = 1; // Passing scale explicitly null would cause the page not to render\n\n      var scaleWithDefault = scale === null ? defaultScale : scale; // If width/height is defined, calculate the scale of the page so it could be of desired width.\n\n      if (width || height) {\n        var viewport = page.getViewport({\n          scale: 1,\n          rotation: rotate\n        });\n        pageScale = width ? width / viewport.width : height / viewport.height;\n      }\n\n      return scaleWithDefault * pageScale;\n    }\n  }, {\n    key: \"eventProps\",\n    get: function get() {\n      var _this2 = this;\n\n      return makeEventProps(this.props, function () {\n        var page = _this2.state.page;\n\n        if (!page) {\n          return page;\n        }\n\n        return makePageCallback(page, _this2.scale);\n      });\n    }\n  }, {\n    key: \"pageKey\",\n    get: function get() {\n      var page = this.state.page;\n      return \"\".concat(page.pageIndex, \"@\").concat(this.scale, \"/\").concat(this.rotate);\n    }\n  }, {\n    key: \"pageKeyNoScale\",\n    get: function get() {\n      var page = this.state.page;\n      return \"\".concat(page.pageIndex, \"/\").concat(this.rotate);\n    }\n  }, {\n    key: \"renderMainLayer\",\n    value: function renderMainLayer() {\n      var _this$props4 = this.props,\n          canvasRef = _this$props4.canvasRef,\n          renderMode = _this$props4.renderMode;\n\n      switch (renderMode) {\n        case 'none':\n          return null;\n\n        case 'svg':\n          return /*#__PURE__*/React.createElement(PageSVG, {\n            key: \"\".concat(this.pageKeyNoScale, \"_svg\")\n          });\n\n        case 'canvas':\n        default:\n          return /*#__PURE__*/React.createElement(PageCanvas, {\n            key: \"\".concat(this.pageKey, \"_canvas\"),\n            canvasRef: canvasRef\n          });\n      }\n    }\n  }, {\n    key: \"renderTextLayer\",\n    value: function renderTextLayer() {\n      var renderTextLayer = this.props.renderTextLayer;\n\n      if (!renderTextLayer) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(TextLayer, {\n        key: \"\".concat(this.pageKey, \"_text\")\n      });\n    }\n  }, {\n    key: \"renderAnnotationLayer\",\n    value: function renderAnnotationLayer() {\n      var renderAnnotationLayer = this.props.renderAnnotationLayer;\n\n      if (!renderAnnotationLayer) {\n        return null;\n      }\n      /**\n       * As of now, PDF.js 2.0.943 returns warnings on unimplemented annotations in SVG mode.\n       * Therefore, as a fallback, we render \"traditional\" AnnotationLayer component.\n       */\n\n\n      return /*#__PURE__*/React.createElement(AnnotationLayer, {\n        key: \"\".concat(this.pageKey, \"_annotations\")\n      });\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var children = this.props.children;\n      return /*#__PURE__*/React.createElement(PageContext.Provider, {\n        value: this.childContext\n      }, this.renderMainLayer(), this.renderTextLayer(), this.renderAnnotationLayer(), children);\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var pageNumber = this.pageNumber;\n      var pdf = this.props.pdf;\n      var page = this.state.page;\n\n      if (!pageNumber) {\n        var noData = this.props.noData;\n        return /*#__PURE__*/React.createElement(Message, {\n          type: \"no-data\"\n        }, typeof noData === 'function' ? noData() : noData);\n      }\n\n      if (pdf === null || page === null) {\n        var loading = this.props.loading;\n        return /*#__PURE__*/React.createElement(Message, {\n          type: \"loading\"\n        }, typeof loading === 'function' ? loading() : loading);\n      }\n\n      if (pdf === false || page === false) {\n        var error = this.props.error;\n        return /*#__PURE__*/React.createElement(Message, {\n          type: \"error\"\n        }, typeof error === 'function' ? error() : error);\n      }\n\n      return this.renderChildren();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pageNumber = this.pageNumber;\n      var _this$props5 = this.props,\n          className = _this$props5.className,\n          inputRef = _this$props5.inputRef;\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: mergeClassNames('react-pdf__Page', className),\n        \"data-page-number\": pageNumber,\n        ref: mergeRefs(inputRef, this.pageElement),\n        style: {\n          position: 'relative'\n        }\n      }, this.eventProps), this.renderContent());\n    }\n  }]);\n\n  return PageInternal;\n}(PureComponent);\nPageInternal.defaultProps = {\n  error: 'Failed to load the page.',\n  loading: 'Loading page…',\n  noData: 'No page specified.',\n  renderAnnotationLayer: true,\n  renderForms: false,\n  renderMode: 'canvas',\n  renderTextLayer: true,\n  scale: defaultScale\n};\nvar isFunctionOrNode = PropTypes.oneOfType([PropTypes.func, PropTypes.node]);\nPageInternal.propTypes = _objectSpread(_objectSpread({}, eventProps), {}, {\n  canvasBackground: PropTypes.string,\n  children: PropTypes.node,\n  className: isClassName,\n  customTextRenderer: PropTypes.func,\n  error: isFunctionOrNode,\n  height: PropTypes.number,\n  imageResourcesPath: PropTypes.string,\n  inputRef: isRef,\n  loading: isFunctionOrNode,\n  noData: isFunctionOrNode,\n  onGetTextError: PropTypes.func,\n  onGetTextSuccess: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onLoadSuccess: PropTypes.func,\n  onRenderError: PropTypes.func,\n  onRenderSuccess: PropTypes.func,\n  pageIndex: isPageIndex,\n  pageNumber: isPageNumber,\n  pdf: isPdf,\n  registerPage: PropTypes.func,\n  renderAnnotationLayer: PropTypes.bool,\n  renderForms: PropTypes.bool,\n  renderInteractiveForms: PropTypes.bool,\n  // For backward compatibility\n  renderMode: isRenderMode,\n  renderTextLayer: PropTypes.bool,\n  rotate: isRotate,\n  scale: PropTypes.number,\n  unregisterPage: PropTypes.func,\n  width: PropTypes.number\n});\n\nfunction Page(props, ref) {\n  return /*#__PURE__*/React.createElement(DocumentContext.Consumer, null, function (context) {\n    return /*#__PURE__*/React.createElement(PageInternal, _extends({\n      ref: ref\n    }, context, props));\n  });\n}\n\nexport default /*#__PURE__*/React.forwardRef(Page);","import * as pdfjs from 'pdfjs-dist/legacy/build/pdf';\nimport Document from './Document';\nimport Outline from './Outline';\nimport Page from './Page';\nimport { displayWorkerWarning } from './shared/utils';\ndisplayWorkerWarning();\npdfjs.GlobalWorkerOptions.workerSrc = 'pdf.worker.js';\nexport { pdfjs, Document, Outline, Page };","function clamp(v, min, max) {\n  return Math.max(min, Math.min(v, max));\n}\nconst V = {\n  toVector(v, fallback) {\n    if (v === undefined) v = fallback;\n    return Array.isArray(v) ? v : [v, v];\n  },\n  add(v1, v2) {\n    return [v1[0] + v2[0], v1[1] + v2[1]];\n  },\n  sub(v1, v2) {\n    return [v1[0] - v2[0], v1[1] - v2[1]];\n  },\n  addTo(v1, v2) {\n    v1[0] += v2[0];\n    v1[1] += v2[1];\n  },\n  subTo(v1, v2) {\n    v1[0] -= v2[0];\n    v1[1] -= v2[1];\n  }\n};\nfunction rubberband(distance, dimension, constant) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);\n  return distance * dimension * constant / (dimension + constant * distance);\n}\nfunction rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {\n  if (constant === 0) return clamp(position, min, max);\n  if (position < min) return -rubberband(min - position, max - min, constant) + min;\n  if (position > max) return +rubberband(position - max, max - min, constant) + max;\n  return position;\n}\nfunction computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {\n  const [[X0, X1], [Y0, Y1]] = bounds;\n  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];\n}\n\nexport { V, computeRubberband as c, rubberbandIfOutOfBounds as r };\n","import { V, c as computeRubberband } from './maths-0ab39ae9.esm.js';\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\nconst EVENT_TYPE_MAP = {\n  pointer: {\n    start: 'down',\n    change: 'move',\n    end: 'up'\n  },\n  mouse: {\n    start: 'down',\n    change: 'move',\n    end: 'up'\n  },\n  touch: {\n    start: 'start',\n    change: 'move',\n    end: 'end'\n  },\n  gesture: {\n    start: 'start',\n    change: 'change',\n    end: 'end'\n  }\n};\nfunction capitalize(string) {\n  if (!string) return '';\n  return string[0].toUpperCase() + string.slice(1);\n}\nconst actionsWithoutCaptureSupported = ['enter', 'leave'];\nfunction hasCapture(capture = false, actionKey) {\n  return capture && !actionsWithoutCaptureSupported.includes(actionKey);\n}\nfunction toHandlerProp(device, action = '', capture = false) {\n  const deviceProps = EVENT_TYPE_MAP[device];\n  const actionKey = deviceProps ? deviceProps[action] || action : action;\n  return 'on' + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? 'Capture' : '');\n}\nconst pointerCaptureEvents = ['gotpointercapture', 'lostpointercapture'];\nfunction parseProp(prop) {\n  let eventKey = prop.substring(2).toLowerCase();\n  const passive = !!~eventKey.indexOf('passive');\n  if (passive) eventKey = eventKey.replace('passive', '');\n  const captureKey = pointerCaptureEvents.includes(eventKey) ? 'capturecapture' : 'capture';\n  const capture = !!~eventKey.indexOf(captureKey);\n  if (capture) eventKey = eventKey.replace('capture', '');\n  return {\n    device: eventKey,\n    capture,\n    passive\n  };\n}\nfunction toDomEventType(device, action = '') {\n  const deviceProps = EVENT_TYPE_MAP[device];\n  const actionKey = deviceProps ? deviceProps[action] || action : action;\n  return device + actionKey;\n}\nfunction isTouch(event) {\n  return 'touches' in event;\n}\nfunction getPointerType(event) {\n  if (isTouch(event)) return 'touch';\n  if ('pointerType' in event) return event.pointerType;\n  return 'mouse';\n}\nfunction getCurrentTargetTouchList(event) {\n  return Array.from(event.touches).filter(e => {\n    var _event$currentTarget, _event$currentTarget$;\n    return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));\n  });\n}\nfunction getTouchList(event) {\n  return event.type === 'touchend' || event.type === 'touchcancel' ? event.changedTouches : event.targetTouches;\n}\nfunction getValueEvent(event) {\n  return isTouch(event) ? getTouchList(event)[0] : event;\n}\nfunction distanceAngle(P1, P2) {\n  try {\n    const dx = P2.clientX - P1.clientX;\n    const dy = P2.clientY - P1.clientY;\n    const cx = (P2.clientX + P1.clientX) / 2;\n    const cy = (P2.clientY + P1.clientY) / 2;\n    const distance = Math.hypot(dx, dy);\n    const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;\n    const origin = [cx, cy];\n    return {\n      angle,\n      distance,\n      origin\n    };\n  } catch (_unused) {}\n  return null;\n}\nfunction touchIds(event) {\n  return getCurrentTargetTouchList(event).map(touch => touch.identifier);\n}\nfunction touchDistanceAngle(event, ids) {\n  const [P1, P2] = Array.from(event.touches).filter(touch => ids.includes(touch.identifier));\n  return distanceAngle(P1, P2);\n}\nfunction pointerId(event) {\n  const valueEvent = getValueEvent(event);\n  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;\n}\nfunction pointerValues(event) {\n  const valueEvent = getValueEvent(event);\n  return [valueEvent.clientX, valueEvent.clientY];\n}\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\nfunction wheelValues(event) {\n  let {\n    deltaX,\n    deltaY,\n    deltaMode\n  } = event;\n  if (deltaMode === 1) {\n    deltaX *= LINE_HEIGHT;\n    deltaY *= LINE_HEIGHT;\n  } else if (deltaMode === 2) {\n    deltaX *= PAGE_HEIGHT;\n    deltaY *= PAGE_HEIGHT;\n  }\n  return [deltaX, deltaY];\n}\nfunction scrollValues(event) {\n  var _ref, _ref2;\n  const {\n    scrollX,\n    scrollY,\n    scrollLeft,\n    scrollTop\n  } = event.currentTarget;\n  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];\n}\nfunction getEventDetails(event) {\n  const payload = {};\n  if ('buttons' in event) payload.buttons = event.buttons;\n  if ('shiftKey' in event) {\n    const {\n      shiftKey,\n      altKey,\n      metaKey,\n      ctrlKey\n    } = event;\n    Object.assign(payload, {\n      shiftKey,\n      altKey,\n      metaKey,\n      ctrlKey\n    });\n  }\n  return payload;\n}\n\nfunction call(v, ...args) {\n  if (typeof v === 'function') {\n    return v(...args);\n  } else {\n    return v;\n  }\n}\nfunction noop() {}\nfunction chain(...fns) {\n  if (fns.length === 0) return noop;\n  if (fns.length === 1) return fns[0];\n  return function () {\n    let result;\n    for (const fn of fns) {\n      result = fn.apply(this, arguments) || result;\n    }\n    return result;\n  };\n}\nfunction assignDefault(value, fallback) {\n  return Object.assign({}, fallback, value || {});\n}\n\nconst BEFORE_LAST_KINEMATICS_DELAY = 32;\nclass Engine {\n  constructor(ctrl, args, key) {\n    this.ctrl = ctrl;\n    this.args = args;\n    this.key = key;\n    if (!this.state) {\n      this.state = {};\n      this.computeValues([0, 0]);\n      this.computeInitial();\n      if (this.init) this.init();\n      this.reset();\n    }\n  }\n  get state() {\n    return this.ctrl.state[this.key];\n  }\n  set state(state) {\n    this.ctrl.state[this.key] = state;\n  }\n  get shared() {\n    return this.ctrl.state.shared;\n  }\n  get eventStore() {\n    return this.ctrl.gestureEventStores[this.key];\n  }\n  get timeoutStore() {\n    return this.ctrl.gestureTimeoutStores[this.key];\n  }\n  get config() {\n    return this.ctrl.config[this.key];\n  }\n  get sharedConfig() {\n    return this.ctrl.config.shared;\n  }\n  get handler() {\n    return this.ctrl.handlers[this.key];\n  }\n  reset() {\n    const {\n      state,\n      shared,\n      ingKey,\n      args\n    } = this;\n    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;\n    state._step = [false, false];\n    state.intentional = false;\n    state._movement = [0, 0];\n    state._distance = [0, 0];\n    state._direction = [0, 0];\n    state._delta = [0, 0];\n    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];\n    state.args = args;\n    state.axis = undefined;\n    state.memo = undefined;\n    state.elapsedTime = state.timeDelta = 0;\n    state.direction = [0, 0];\n    state.distance = [0, 0];\n    state.overflow = [0, 0];\n    state._movementBound = [false, false];\n    state.velocity = [0, 0];\n    state.movement = [0, 0];\n    state.delta = [0, 0];\n    state.timeStamp = 0;\n  }\n  start(event) {\n    const state = this.state;\n    const config = this.config;\n    if (!state._active) {\n      this.reset();\n      this.computeInitial();\n      state._active = true;\n      state.target = event.target;\n      state.currentTarget = event.currentTarget;\n      state.lastOffset = config.from ? call(config.from, state) : state.offset;\n      state.offset = state.lastOffset;\n      state.startTime = state.timeStamp = event.timeStamp;\n    }\n  }\n  computeValues(values) {\n    const state = this.state;\n    state._values = values;\n    state.values = this.config.transform(values);\n  }\n  computeInitial() {\n    const state = this.state;\n    state._initial = state._values;\n    state.initial = state.values;\n  }\n  compute(event) {\n    const {\n      state,\n      config,\n      shared\n    } = this;\n    state.args = this.args;\n    let dt = 0;\n    if (event) {\n      state.event = event;\n      if (config.preventDefault && event.cancelable) state.event.preventDefault();\n      state.type = event.type;\n      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;\n      shared.locked = !!document.pointerLockElement;\n      Object.assign(shared, getEventDetails(event));\n      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;\n      dt = event.timeStamp - state.timeStamp;\n      state.timeStamp = event.timeStamp;\n      state.elapsedTime = state.timeStamp - state.startTime;\n    }\n    if (state._active) {\n      const _absoluteDelta = state._delta.map(Math.abs);\n      V.addTo(state._distance, _absoluteDelta);\n    }\n    if (this.axisIntent) this.axisIntent(event);\n    const [_m0, _m1] = state._movement;\n    const [t0, t1] = config.threshold;\n    const {\n      _step,\n      values\n    } = state;\n    if (config.hasCustomTransform) {\n      if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && values[0];\n      if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && values[1];\n    } else {\n      if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;\n      if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;\n    }\n    state.intentional = _step[0] !== false || _step[1] !== false;\n    if (!state.intentional) return;\n    const movement = [0, 0];\n    if (config.hasCustomTransform) {\n      const [v0, v1] = values;\n      movement[0] = _step[0] !== false ? v0 - _step[0] : 0;\n      movement[1] = _step[1] !== false ? v1 - _step[1] : 0;\n    } else {\n      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;\n      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;\n    }\n    if (this.restrictToAxis && !state._blocked) this.restrictToAxis(movement);\n    const previousOffset = state.offset;\n    const gestureIsActive = state._active && !state._blocked || state.active;\n    if (gestureIsActive) {\n      state.first = state._active && !state.active;\n      state.last = !state._active && state.active;\n      state.active = shared[this.ingKey] = state._active;\n      if (event) {\n        if (state.first) {\n          if ('bounds' in config) state._bounds = call(config.bounds, state);\n          if (this.setup) this.setup();\n        }\n        state.movement = movement;\n        this.computeOffset();\n      }\n    }\n    const [ox, oy] = state.offset;\n    const [[x0, x1], [y0, y1]] = state._bounds;\n    state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];\n    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;\n    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;\n    const rubberband = state._active ? config.rubberband || [0, 0] : [0, 0];\n    state.offset = computeRubberband(state._bounds, state.offset, rubberband);\n    state.delta = V.sub(state.offset, previousOffset);\n    this.computeMovement();\n    if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {\n      state.delta = V.sub(state.offset, previousOffset);\n      const absoluteDelta = state.delta.map(Math.abs);\n      V.addTo(state.distance, absoluteDelta);\n      state.direction = state.delta.map(Math.sign);\n      state._direction = state._delta.map(Math.sign);\n      if (!state.first && dt > 0) {\n        state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];\n        state.timeDelta = dt;\n      }\n    }\n  }\n  emit() {\n    const state = this.state;\n    const shared = this.shared;\n    const config = this.config;\n    if (!state._active) this.clean();\n    if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents) return;\n    const memo = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {\n      [this.aliasKey]: state.values\n    }));\n    if (memo !== undefined) state.memo = memo;\n  }\n  clean() {\n    this.eventStore.clean();\n    this.timeoutStore.clean();\n  }\n}\n\nfunction selectAxis([dx, dy], threshold) {\n  const absDx = Math.abs(dx);\n  const absDy = Math.abs(dy);\n  if (absDx > absDy && absDx > threshold) {\n    return 'x';\n  }\n  if (absDy > absDx && absDy > threshold) {\n    return 'y';\n  }\n  return undefined;\n}\nclass CoordinatesEngine extends Engine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"aliasKey\", 'xy');\n  }\n  reset() {\n    super.reset();\n    this.state.axis = undefined;\n  }\n  init() {\n    this.state.offset = [0, 0];\n    this.state.lastOffset = [0, 0];\n  }\n  computeOffset() {\n    this.state.offset = V.add(this.state.lastOffset, this.state.movement);\n  }\n  computeMovement() {\n    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);\n  }\n  axisIntent(event) {\n    const state = this.state;\n    const config = this.config;\n    if (!state.axis && event) {\n      const threshold = typeof config.axisThreshold === 'object' ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;\n      state.axis = selectAxis(state._movement, threshold);\n    }\n    state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;\n  }\n  restrictToAxis(v) {\n    if (this.config.axis || this.config.lockDirection) {\n      switch (this.state.axis) {\n        case 'x':\n          v[1] = 0;\n          break;\n        case 'y':\n          v[0] = 0;\n          break;\n      }\n    }\n  }\n}\n\nconst identity = v => v;\nconst DEFAULT_RUBBERBAND = 0.15;\nconst commonConfigResolver = {\n  enabled(value = true) {\n    return value;\n  },\n  eventOptions(value, _k, config) {\n    return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);\n  },\n  preventDefault(value = false) {\n    return value;\n  },\n  triggerAllEvents(value = false) {\n    return value;\n  },\n  rubberband(value = 0) {\n    switch (value) {\n      case true:\n        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];\n      case false:\n        return [0, 0];\n      default:\n        return V.toVector(value);\n    }\n  },\n  from(value) {\n    if (typeof value === 'function') return value;\n    if (value != null) return V.toVector(value);\n  },\n  transform(value, _k, config) {\n    const transform = value || config.shared.transform;\n    this.hasCustomTransform = !!transform;\n    if (process.env.NODE_ENV === 'development') {\n      const originalTransform = transform || identity;\n      return v => {\n        const r = originalTransform(v);\n        if (!isFinite(r[0]) || !isFinite(r[1])) {\n          console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r[0]},${[1]}]`);\n        }\n        return r;\n      };\n    }\n    return transform || identity;\n  },\n  threshold(value) {\n    return V.toVector(value, 0);\n  }\n};\nif (process.env.NODE_ENV === 'development') {\n  Object.assign(commonConfigResolver, {\n    domTarget(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`domTarget\\` option has been renamed to \\`target\\`.`);\n      }\n      return NaN;\n    },\n    lockDirection(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`lockDirection\\` option has been merged with \\`axis\\`. Use it as in \\`{ axis: 'lock' }\\``);\n      }\n      return NaN;\n    },\n    initial(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`initial\\` option has been renamed to \\`from\\`.`);\n      }\n      return NaN;\n    }\n  });\n}\n\nconst DEFAULT_AXIS_THRESHOLD = 0;\nconst coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {\n  axis(_v, _k, {\n    axis\n  }) {\n    this.lockDirection = axis === 'lock';\n    if (!this.lockDirection) return axis;\n  },\n  axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {\n    return value;\n  },\n  bounds(value = {}) {\n    if (typeof value === 'function') {\n      return state => coordinatesConfigResolver.bounds(value(state));\n    }\n    if ('current' in value) {\n      return () => value.current;\n    }\n    if (typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return value;\n    }\n    const {\n      left = -Infinity,\n      right = Infinity,\n      top = -Infinity,\n      bottom = Infinity\n    } = value;\n    return [[left, right], [top, bottom]];\n  }\n});\n\nconst KEYS_DELTA_MAP = {\n  ArrowRight: (displacement, factor = 1) => [displacement * factor, 0],\n  ArrowLeft: (displacement, factor = 1) => [-1 * displacement * factor, 0],\n  ArrowUp: (displacement, factor = 1) => [0, -1 * displacement * factor],\n  ArrowDown: (displacement, factor = 1) => [0, displacement * factor]\n};\nclass DragEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"ingKey\", 'dragging');\n  }\n  reset() {\n    super.reset();\n    const state = this.state;\n    state._pointerId = undefined;\n    state._pointerActive = false;\n    state._keyboardActive = false;\n    state._preventScroll = false;\n    state._delayed = false;\n    state.swipe = [0, 0];\n    state.tap = false;\n    state.canceled = false;\n    state.cancel = this.cancel.bind(this);\n  }\n  setup() {\n    const state = this.state;\n    if (state._bounds instanceof HTMLElement) {\n      const boundRect = state._bounds.getBoundingClientRect();\n      const targetRect = state.currentTarget.getBoundingClientRect();\n      const _bounds = {\n        left: boundRect.left - targetRect.left + state.offset[0],\n        right: boundRect.right - targetRect.right + state.offset[0],\n        top: boundRect.top - targetRect.top + state.offset[1],\n        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]\n      };\n      state._bounds = coordinatesConfigResolver.bounds(_bounds);\n    }\n  }\n  cancel() {\n    const state = this.state;\n    if (state.canceled) return;\n    state.canceled = true;\n    state._active = false;\n    setTimeout(() => {\n      this.compute();\n      this.emit();\n    }, 0);\n  }\n  setActive() {\n    this.state._active = this.state._pointerActive || this.state._keyboardActive;\n  }\n  clean() {\n    this.pointerClean();\n    this.state._pointerActive = false;\n    this.state._keyboardActive = false;\n    super.clean();\n  }\n  pointerDown(event) {\n    const config = this.config;\n    const state = this.state;\n    if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons)) return;\n    const ctrlIds = this.ctrl.setEventIds(event);\n    if (config.pointerCapture) {\n      event.target.setPointerCapture(event.pointerId);\n    }\n    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive) return;\n    this.start(event);\n    this.setupPointer(event);\n    state._pointerId = pointerId(event);\n    state._pointerActive = true;\n    this.computeValues(pointerValues(event));\n    this.computeInitial();\n    if (config.preventScrollAxis && getPointerType(event) !== 'mouse') {\n      state._active = false;\n      this.setupScrollPrevention(event);\n    } else if (config.delay > 0) {\n      this.setupDelayTrigger(event);\n      if (config.triggerAllEvents) {\n        this.compute(event);\n        this.emit();\n      }\n    } else {\n      this.startPointerDrag(event);\n    }\n  }\n  startPointerDrag(event) {\n    const state = this.state;\n    state._active = true;\n    state._preventScroll = true;\n    state._delayed = false;\n    this.compute(event);\n    this.emit();\n  }\n  pointerMove(event) {\n    const state = this.state;\n    const config = this.config;\n    if (!state._pointerActive) return;\n    const id = pointerId(event);\n    if (state._pointerId !== undefined && id !== state._pointerId) return;\n    const _values = pointerValues(event);\n    if (document.pointerLockElement === event.target) {\n      state._delta = [event.movementX, event.movementY];\n    } else {\n      state._delta = V.sub(_values, state._values);\n      this.computeValues(_values);\n    }\n    V.addTo(state._movement, state._delta);\n    this.compute(event);\n    if (state._delayed && state.intentional) {\n      this.timeoutStore.remove('dragDelay');\n      state.active = false;\n      this.startPointerDrag(event);\n      return;\n    }\n    if (config.preventScrollAxis && !state._preventScroll) {\n      if (state.axis) {\n        if (state.axis === config.preventScrollAxis || config.preventScrollAxis === 'xy') {\n          state._active = false;\n          this.clean();\n          return;\n        } else {\n          this.timeoutStore.remove('startPointerDrag');\n          this.startPointerDrag(event);\n          return;\n        }\n      } else {\n        return;\n      }\n    }\n    this.emit();\n  }\n  pointerUp(event) {\n    this.ctrl.setEventIds(event);\n    try {\n      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {\n        ;\n        event.target.releasePointerCapture(event.pointerId);\n      }\n    } catch (_unused) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \\`@react-three/fiber\\`. \\n\\nPlease upgrade to the latest version.`);\n      }\n    }\n    const state = this.state;\n    const config = this.config;\n    if (!state._active || !state._pointerActive) return;\n    const id = pointerId(event);\n    if (state._pointerId !== undefined && id !== state._pointerId) return;\n    this.state._pointerActive = false;\n    this.setActive();\n    this.compute(event);\n    const [dx, dy] = state._distance;\n    state.tap = dx <= config.tapsThreshold && dy <= config.tapsThreshold;\n    if (state.tap && config.filterTaps) {\n      state._force = true;\n    } else {\n      const [_dx, _dy] = state._delta;\n      const [_mx, _my] = state._movement;\n      const [svx, svy] = config.swipe.velocity;\n      const [sx, sy] = config.swipe.distance;\n      const sdt = config.swipe.duration;\n      if (state.elapsedTime < sdt) {\n        const _vx = Math.abs(_dx / state.timeDelta);\n        const _vy = Math.abs(_dy / state.timeDelta);\n        if (_vx > svx && Math.abs(_mx) > sx) state.swipe[0] = Math.sign(_dx);\n        if (_vy > svy && Math.abs(_my) > sy) state.swipe[1] = Math.sign(_dy);\n      }\n    }\n    this.emit();\n  }\n  pointerClick(event) {\n    if (!this.state.tap && event.detail > 0) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  setupPointer(event) {\n    const config = this.config;\n    const device = config.device;\n    if (process.env.NODE_ENV === 'development') {\n      try {\n        if (device === 'pointer' && config.preventScrollDelay === undefined) {\n          const currentTarget = 'uv' in event ? event.sourceEvent.currentTarget : event.currentTarget;\n          const style = window.getComputedStyle(currentTarget);\n          if (style.touchAction === 'auto') {\n            console.warn(`[@use-gesture]: The drag target has its \\`touch-action\\` style property set to \\`auto\\`. It is recommended to add \\`touch-action: 'none'\\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.\\n\\nThis message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);\n          }\n        }\n      } catch (_unused2) {}\n    }\n    if (config.pointerLock) {\n      event.currentTarget.requestPointerLock();\n    }\n    if (!config.pointerCapture) {\n      this.eventStore.add(this.sharedConfig.window, device, 'change', this.pointerMove.bind(this));\n      this.eventStore.add(this.sharedConfig.window, device, 'end', this.pointerUp.bind(this));\n      this.eventStore.add(this.sharedConfig.window, device, 'cancel', this.pointerUp.bind(this));\n    }\n  }\n  pointerClean() {\n    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {\n      document.exitPointerLock();\n    }\n  }\n  preventScroll(event) {\n    if (this.state._preventScroll && event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  setupScrollPrevention(event) {\n    this.state._preventScroll = false;\n    persistEvent(event);\n    const remove = this.eventStore.add(this.sharedConfig.window, 'touch', 'change', this.preventScroll.bind(this), {\n      passive: false\n    });\n    this.eventStore.add(this.sharedConfig.window, 'touch', 'end', remove);\n    this.eventStore.add(this.sharedConfig.window, 'touch', 'cancel', remove);\n    this.timeoutStore.add('startPointerDrag', this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);\n  }\n  setupDelayTrigger(event) {\n    this.state._delayed = true;\n    this.timeoutStore.add('dragDelay', () => {\n      this.state._step = [0, 0];\n      this.startPointerDrag(event);\n    }, this.config.delay);\n  }\n  keyDown(event) {\n    const deltaFn = KEYS_DELTA_MAP[event.key];\n    if (deltaFn) {\n      const state = this.state;\n      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;\n      this.start(event);\n      state._delta = deltaFn(this.config.keyboardDisplacement, factor);\n      state._keyboardActive = true;\n      V.addTo(state._movement, state._delta);\n      this.compute(event);\n      this.emit();\n    }\n  }\n  keyUp(event) {\n    if (!(event.key in KEYS_DELTA_MAP)) return;\n    this.state._keyboardActive = false;\n    this.setActive();\n    this.compute(event);\n    this.emit();\n  }\n  bind(bindFunction) {\n    const device = this.config.device;\n    bindFunction(device, 'start', this.pointerDown.bind(this));\n    if (this.config.pointerCapture) {\n      bindFunction(device, 'change', this.pointerMove.bind(this));\n      bindFunction(device, 'end', this.pointerUp.bind(this));\n      bindFunction(device, 'cancel', this.pointerUp.bind(this));\n      bindFunction('lostPointerCapture', '', this.pointerUp.bind(this));\n    }\n    if (this.config.keys) {\n      bindFunction('key', 'down', this.keyDown.bind(this));\n      bindFunction('key', 'up', this.keyUp.bind(this));\n    }\n    if (this.config.filterTaps) {\n      bindFunction('click', '', this.pointerClick.bind(this), {\n        capture: true,\n        passive: false\n      });\n    }\n  }\n}\nfunction persistEvent(event) {\n  'persist' in event && typeof event.persist === 'function' && event.persist();\n}\n\nconst isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;\nfunction supportsTouchEvents() {\n  return isBrowser && 'ontouchstart' in window;\n}\nfunction isTouchScreen() {\n  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;\n}\nfunction supportsPointerEvents() {\n  return isBrowser && 'onpointerdown' in window;\n}\nfunction supportsPointerLock() {\n  return isBrowser && 'exitPointerLock' in window.document;\n}\nfunction supportsGestureEvents() {\n  try {\n    return 'constructor' in GestureEvent;\n  } catch (e) {\n    return false;\n  }\n}\nconst SUPPORT = {\n  isBrowser,\n  gesture: supportsGestureEvents(),\n  touch: supportsTouchEvents(),\n  touchscreen: isTouchScreen(),\n  pointer: supportsPointerEvents(),\n  pointerLock: supportsPointerLock()\n};\n\nconst DEFAULT_PREVENT_SCROLL_DELAY = 250;\nconst DEFAULT_DRAG_DELAY = 180;\nconst DEFAULT_SWIPE_VELOCITY = 0.5;\nconst DEFAULT_SWIPE_DISTANCE = 50;\nconst DEFAULT_SWIPE_DURATION = 250;\nconst DEFAULT_KEYBOARD_DISPLACEMENT = 10;\nconst DEFAULT_DRAG_AXIS_THRESHOLD = {\n  mouse: 0,\n  touch: 0,\n  pen: 8\n};\nconst dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n  device(_v, _k, {\n    pointer: {\n      touch = false,\n      lock = false,\n      mouse = false\n    } = {}\n  }) {\n    this.pointerLock = lock && SUPPORT.pointerLock;\n    if (SUPPORT.touch && touch) return 'touch';\n    if (this.pointerLock) return 'mouse';\n    if (SUPPORT.pointer && !mouse) return 'pointer';\n    if (SUPPORT.touch) return 'touch';\n    return 'mouse';\n  },\n  preventScrollAxis(value, _k, {\n    preventScroll\n  }) {\n    this.preventScrollDelay = typeof preventScroll === 'number' ? preventScroll : preventScroll || preventScroll === undefined && value ? DEFAULT_PREVENT_SCROLL_DELAY : undefined;\n    if (!SUPPORT.touchscreen || preventScroll === false) return undefined;\n    return value ? value : preventScroll !== undefined ? 'y' : undefined;\n  },\n  pointerCapture(_v, _k, {\n    pointer: {\n      capture = true,\n      buttons = 1,\n      keys = true\n    } = {}\n  }) {\n    this.pointerButtons = buttons;\n    this.keys = keys;\n    return !this.pointerLock && this.device === 'pointer' && capture;\n  },\n  threshold(value, _k, {\n    filterTaps = false,\n    tapsThreshold = 3,\n    axis = undefined\n  }) {\n    const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);\n    this.filterTaps = filterTaps;\n    this.tapsThreshold = tapsThreshold;\n    return threshold;\n  },\n  swipe({\n    velocity = DEFAULT_SWIPE_VELOCITY,\n    distance = DEFAULT_SWIPE_DISTANCE,\n    duration = DEFAULT_SWIPE_DURATION\n  } = {}) {\n    return {\n      velocity: this.transform(V.toVector(velocity)),\n      distance: this.transform(V.toVector(distance)),\n      duration\n    };\n  },\n  delay(value = 0) {\n    switch (value) {\n      case true:\n        return DEFAULT_DRAG_DELAY;\n      case false:\n        return 0;\n      default:\n        return value;\n    }\n  },\n  axisThreshold(value) {\n    if (!value) return DEFAULT_DRAG_AXIS_THRESHOLD;\n    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);\n  },\n  keyboardDisplacement(value = DEFAULT_KEYBOARD_DISPLACEMENT) {\n    return value;\n  }\n});\nif (process.env.NODE_ENV === 'development') {\n  Object.assign(dragConfigResolver, {\n    useTouch(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`useTouch\\` option has been renamed to \\`pointer.touch\\`. Use it as in \\`{ pointer: { touch: true } }\\`.`);\n      }\n      return NaN;\n    },\n    experimental_preventWindowScrollY(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`experimental_preventWindowScrollY\\` option has been renamed to \\`preventScroll\\`.`);\n      }\n      return NaN;\n    },\n    swipeVelocity(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`swipeVelocity\\` option has been renamed to \\`swipe.velocity\\`. Use it as in \\`{ swipe: { velocity: 0.5 } }\\`.`);\n      }\n      return NaN;\n    },\n    swipeDistance(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`swipeDistance\\` option has been renamed to \\`swipe.distance\\`. Use it as in \\`{ swipe: { distance: 50 } }\\`.`);\n      }\n      return NaN;\n    },\n    swipeDuration(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`swipeDuration\\` option has been renamed to \\`swipe.duration\\`. Use it as in \\`{ swipe: { duration: 250 } }\\`.`);\n      }\n      return NaN;\n    }\n  });\n}\n\nfunction clampStateInternalMovementToBounds(state) {\n  const [ox, oy] = state.overflow;\n  const [dx, dy] = state._delta;\n  const [dirx, diry] = state._direction;\n  if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {\n    state._movement[0] = state._movementBound[0];\n  }\n  if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {\n    state._movement[1] = state._movementBound[1];\n  }\n}\n\nconst SCALE_ANGLE_RATIO_INTENT_DEG = 30;\nconst PINCH_WHEEL_RATIO = 100;\nclass PinchEngine extends Engine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"ingKey\", 'pinching');\n    _defineProperty(this, \"aliasKey\", 'da');\n  }\n  init() {\n    this.state.offset = [1, 0];\n    this.state.lastOffset = [1, 0];\n    this.state._pointerEvents = new Map();\n  }\n  reset() {\n    super.reset();\n    const state = this.state;\n    state._touchIds = [];\n    state.canceled = false;\n    state.cancel = this.cancel.bind(this);\n    state.turns = 0;\n  }\n  computeOffset() {\n    const {\n      type,\n      movement,\n      lastOffset\n    } = this.state;\n    if (type === 'wheel') {\n      this.state.offset = V.add(movement, lastOffset);\n    } else {\n      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];\n    }\n  }\n  computeMovement() {\n    const {\n      offset,\n      lastOffset\n    } = this.state;\n    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];\n  }\n  axisIntent() {\n    const state = this.state;\n    const [_m0, _m1] = state._movement;\n    if (!state.axis) {\n      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);\n      if (axisMovementDifference < 0) state.axis = 'angle';else if (axisMovementDifference > 0) state.axis = 'scale';\n    }\n  }\n  restrictToAxis(v) {\n    if (this.config.lockDirection) {\n      if (this.state.axis === 'scale') v[1] = 0;else if (this.state.axis === 'angle') v[0] = 0;\n    }\n  }\n  cancel() {\n    const state = this.state;\n    if (state.canceled) return;\n    setTimeout(() => {\n      state.canceled = true;\n      state._active = false;\n      this.compute();\n      this.emit();\n    }, 0);\n  }\n  touchStart(event) {\n    this.ctrl.setEventIds(event);\n    const state = this.state;\n    const ctrlTouchIds = this.ctrl.touchIds;\n    if (state._active) {\n      if (state._touchIds.every(id => ctrlTouchIds.has(id))) return;\n    }\n    if (ctrlTouchIds.size < 2) return;\n    this.start(event);\n    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);\n    const payload = touchDistanceAngle(event, state._touchIds);\n    if (!payload) return;\n    this.pinchStart(event, payload);\n  }\n  pointerStart(event) {\n    if (event.buttons != null && event.buttons % 2 !== 1) return;\n    this.ctrl.setEventIds(event);\n    event.target.setPointerCapture(event.pointerId);\n    const state = this.state;\n    const _pointerEvents = state._pointerEvents;\n    const ctrlPointerIds = this.ctrl.pointerIds;\n    if (state._active) {\n      if (Array.from(_pointerEvents.keys()).every(id => ctrlPointerIds.has(id))) return;\n    }\n    if (_pointerEvents.size < 2) {\n      _pointerEvents.set(event.pointerId, event);\n    }\n    if (state._pointerEvents.size < 2) return;\n    this.start(event);\n    const payload = distanceAngle(...Array.from(_pointerEvents.values()));\n    if (!payload) return;\n    this.pinchStart(event, payload);\n  }\n  pinchStart(event, payload) {\n    const state = this.state;\n    state.origin = payload.origin;\n    this.computeValues([payload.distance, payload.angle]);\n    this.computeInitial();\n    this.compute(event);\n    this.emit();\n  }\n  touchMove(event) {\n    if (!this.state._active) return;\n    const payload = touchDistanceAngle(event, this.state._touchIds);\n    if (!payload) return;\n    this.pinchMove(event, payload);\n  }\n  pointerMove(event) {\n    const _pointerEvents = this.state._pointerEvents;\n    if (_pointerEvents.has(event.pointerId)) {\n      _pointerEvents.set(event.pointerId, event);\n    }\n    if (!this.state._active) return;\n    const payload = distanceAngle(...Array.from(_pointerEvents.values()));\n    if (!payload) return;\n    this.pinchMove(event, payload);\n  }\n  pinchMove(event, payload) {\n    const state = this.state;\n    const prev_a = state._values[1];\n    const delta_a = payload.angle - prev_a;\n    let delta_turns = 0;\n    if (Math.abs(delta_a) > 270) delta_turns += Math.sign(delta_a);\n    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);\n    state.origin = payload.origin;\n    state.turns = delta_turns;\n    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];\n    this.compute(event);\n    this.emit();\n  }\n  touchEnd(event) {\n    this.ctrl.setEventIds(event);\n    if (!this.state._active) return;\n    if (this.state._touchIds.some(id => !this.ctrl.touchIds.has(id))) {\n      this.state._active = false;\n      this.compute(event);\n      this.emit();\n    }\n  }\n  pointerEnd(event) {\n    const state = this.state;\n    this.ctrl.setEventIds(event);\n    try {\n      event.target.releasePointerCapture(event.pointerId);\n    } catch (_unused) {}\n    if (state._pointerEvents.has(event.pointerId)) {\n      state._pointerEvents.delete(event.pointerId);\n    }\n    if (!state._active) return;\n    if (state._pointerEvents.size < 2) {\n      state._active = false;\n      this.compute(event);\n      this.emit();\n    }\n  }\n  gestureStart(event) {\n    if (event.cancelable) event.preventDefault();\n    const state = this.state;\n    if (state._active) return;\n    this.start(event);\n    this.computeValues([event.scale, event.rotation]);\n    state.origin = [event.clientX, event.clientY];\n    this.compute(event);\n    this.emit();\n  }\n  gestureMove(event) {\n    if (event.cancelable) event.preventDefault();\n    if (!this.state._active) return;\n    const state = this.state;\n    this.computeValues([event.scale, event.rotation]);\n    state.origin = [event.clientX, event.clientY];\n    const _previousMovement = state._movement;\n    state._movement = [event.scale - 1, event.rotation];\n    state._delta = V.sub(state._movement, _previousMovement);\n    this.compute(event);\n    this.emit();\n  }\n  gestureEnd(event) {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute(event);\n    this.emit();\n  }\n  wheel(event) {\n    const modifierKey = this.config.modifierKey;\n    if (modifierKey && (Array.isArray(modifierKey) ? !modifierKey.find(k => event[k]) : !event[modifierKey])) return;\n    if (!this.state._active) this.wheelStart(event);else this.wheelChange(event);\n    this.timeoutStore.add('wheelEnd', this.wheelEnd.bind(this));\n  }\n  wheelStart(event) {\n    this.start(event);\n    this.wheelChange(event);\n  }\n  wheelChange(event) {\n    const isR3f = ('uv' in event);\n    if (!isR3f) {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n      if (process.env.NODE_ENV === 'development' && !event.defaultPrevented) {\n        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \\`target\\` option.\\n\\nThis message will only appear in development mode.`);\n      }\n    }\n    const state = this.state;\n    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];\n    V.addTo(state._movement, state._delta);\n    clampStateInternalMovementToBounds(state);\n    this.state.origin = [event.clientX, event.clientY];\n    this.compute(event);\n    this.emit();\n  }\n  wheelEnd() {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute();\n    this.emit();\n  }\n  bind(bindFunction) {\n    const device = this.config.device;\n    if (!!device) {\n      bindFunction(device, 'start', this[device + 'Start'].bind(this));\n      bindFunction(device, 'change', this[device + 'Move'].bind(this));\n      bindFunction(device, 'end', this[device + 'End'].bind(this));\n      bindFunction(device, 'cancel', this[device + 'End'].bind(this));\n      bindFunction('lostPointerCapture', '', this[device + 'End'].bind(this));\n    }\n    if (this.config.pinchOnWheel) {\n      bindFunction('wheel', '', this.wheel.bind(this), {\n        passive: false\n      });\n    }\n  }\n}\n\nconst pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {\n  device(_v, _k, {\n    shared,\n    pointer: {\n      touch = false\n    } = {}\n  }) {\n    const sharedConfig = shared;\n    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture) return 'gesture';\n    if (SUPPORT.touch && touch) return 'touch';\n    if (SUPPORT.touchscreen) {\n      if (SUPPORT.pointer) return 'pointer';\n      if (SUPPORT.touch) return 'touch';\n    }\n  },\n  bounds(_v, _k, {\n    scaleBounds = {},\n    angleBounds = {}\n  }) {\n    const _scaleBounds = state => {\n      const D = assignDefault(call(scaleBounds, state), {\n        min: -Infinity,\n        max: Infinity\n      });\n      return [D.min, D.max];\n    };\n    const _angleBounds = state => {\n      const A = assignDefault(call(angleBounds, state), {\n        min: -Infinity,\n        max: Infinity\n      });\n      return [A.min, A.max];\n    };\n    if (typeof scaleBounds !== 'function' && typeof angleBounds !== 'function') return [_scaleBounds(), _angleBounds()];\n    return state => [_scaleBounds(state), _angleBounds(state)];\n  },\n  threshold(value, _k, config) {\n    this.lockDirection = config.axis === 'lock';\n    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);\n    return threshold;\n  },\n  modifierKey(value) {\n    if (value === undefined) return 'ctrlKey';\n    return value;\n  },\n  pinchOnWheel(value = true) {\n    return value;\n  }\n});\n\nclass MoveEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"ingKey\", 'moving');\n  }\n  move(event) {\n    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;\n    if (!this.state._active) this.moveStart(event);else this.moveChange(event);\n    this.timeoutStore.add('moveEnd', this.moveEnd.bind(this));\n  }\n  moveStart(event) {\n    this.start(event);\n    this.computeValues(pointerValues(event));\n    this.compute(event);\n    this.computeInitial();\n    this.emit();\n  }\n  moveChange(event) {\n    if (!this.state._active) return;\n    const values = pointerValues(event);\n    const state = this.state;\n    state._delta = V.sub(values, state._values);\n    V.addTo(state._movement, state._delta);\n    this.computeValues(values);\n    this.compute(event);\n    this.emit();\n  }\n  moveEnd(event) {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute(event);\n    this.emit();\n  }\n  bind(bindFunction) {\n    bindFunction('pointer', 'change', this.move.bind(this));\n    bindFunction('pointer', 'leave', this.moveEnd.bind(this));\n  }\n}\n\nconst moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n  mouseOnly: (value = true) => value\n});\n\nclass ScrollEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"ingKey\", 'scrolling');\n  }\n  scroll(event) {\n    if (!this.state._active) this.start(event);\n    this.scrollChange(event);\n    this.timeoutStore.add('scrollEnd', this.scrollEnd.bind(this));\n  }\n  scrollChange(event) {\n    if (event.cancelable) event.preventDefault();\n    const state = this.state;\n    const values = scrollValues(event);\n    state._delta = V.sub(values, state._values);\n    V.addTo(state._movement, state._delta);\n    this.computeValues(values);\n    this.compute(event);\n    this.emit();\n  }\n  scrollEnd() {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute();\n    this.emit();\n  }\n  bind(bindFunction) {\n    bindFunction('scroll', '', this.scroll.bind(this));\n  }\n}\n\nconst scrollConfigResolver = coordinatesConfigResolver;\n\nclass WheelEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"ingKey\", 'wheeling');\n  }\n  wheel(event) {\n    if (!this.state._active) this.start(event);\n    this.wheelChange(event);\n    this.timeoutStore.add('wheelEnd', this.wheelEnd.bind(this));\n  }\n  wheelChange(event) {\n    const state = this.state;\n    state._delta = wheelValues(event);\n    V.addTo(state._movement, state._delta);\n    clampStateInternalMovementToBounds(state);\n    this.compute(event);\n    this.emit();\n  }\n  wheelEnd() {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute();\n    this.emit();\n  }\n  bind(bindFunction) {\n    bindFunction('wheel', '', this.wheel.bind(this));\n  }\n}\n\nconst wheelConfigResolver = coordinatesConfigResolver;\n\nclass HoverEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"ingKey\", 'hovering');\n  }\n  enter(event) {\n    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;\n    this.start(event);\n    this.computeValues(pointerValues(event));\n    this.compute(event);\n    this.emit();\n  }\n  leave(event) {\n    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;\n    const state = this.state;\n    if (!state._active) return;\n    state._active = false;\n    const values = pointerValues(event);\n    state._movement = state._delta = V.sub(values, state._values);\n    this.computeValues(values);\n    this.compute(event);\n    state.delta = state.movement;\n    this.emit();\n  }\n  bind(bindFunction) {\n    bindFunction('pointer', 'enter', this.enter.bind(this));\n    bindFunction('pointer', 'leave', this.leave.bind(this));\n  }\n}\n\nconst hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n  mouseOnly: (value = true) => value\n});\n\nconst EngineMap = new Map();\nconst ConfigResolverMap = new Map();\nfunction registerAction(action) {\n  EngineMap.set(action.key, action.engine);\n  ConfigResolverMap.set(action.key, action.resolver);\n}\nconst dragAction = {\n  key: 'drag',\n  engine: DragEngine,\n  resolver: dragConfigResolver\n};\nconst hoverAction = {\n  key: 'hover',\n  engine: HoverEngine,\n  resolver: hoverConfigResolver\n};\nconst moveAction = {\n  key: 'move',\n  engine: MoveEngine,\n  resolver: moveConfigResolver\n};\nconst pinchAction = {\n  key: 'pinch',\n  engine: PinchEngine,\n  resolver: pinchConfigResolver\n};\nconst scrollAction = {\n  key: 'scroll',\n  engine: ScrollEngine,\n  resolver: scrollConfigResolver\n};\nconst wheelAction = {\n  key: 'wheel',\n  engine: WheelEngine,\n  resolver: wheelConfigResolver\n};\n\nexport { ConfigResolverMap as C, EngineMap as E, SUPPORT as S, _objectSpread2 as _, _defineProperty as a, touchIds as b, chain as c, toHandlerProp as d, dragAction as e, pinchAction as f, hoverAction as h, isTouch as i, moveAction as m, parseProp as p, registerAction as r, scrollAction as s, toDomEventType as t, wheelAction as w };\n","import { S as SUPPORT, C as ConfigResolverMap, _ as _objectSpread2, a as _defineProperty, t as toDomEventType, i as isTouch, b as touchIds, E as EngineMap, c as chain, p as parseProp, d as toHandlerProp } from './actions-fe213e88.esm.js';\nimport './maths-0ab39ae9.esm.js';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nconst sharedConfigResolver = {\n  target(value) {\n    if (value) {\n      return () => 'current' in value ? value.current : value;\n    }\n    return undefined;\n  },\n  enabled(value = true) {\n    return value;\n  },\n  window(value = SUPPORT.isBrowser ? window : undefined) {\n    return value;\n  },\n  eventOptions({\n    passive = true,\n    capture = false\n  } = {}) {\n    return {\n      passive,\n      capture\n    };\n  },\n  transform(value) {\n    return value;\n  }\n};\n\nconst _excluded = [\"target\", \"eventOptions\", \"window\", \"enabled\", \"transform\"];\nfunction resolveWith(config = {}, resolvers) {\n  const result = {};\n  for (const [key, resolver] of Object.entries(resolvers)) {\n    switch (typeof resolver) {\n      case 'function':\n        if (process.env.NODE_ENV === 'development') {\n          const r = resolver.call(result, config[key], key, config);\n          if (!Number.isNaN(r)) result[key] = r;\n        } else {\n          result[key] = resolver.call(result, config[key], key, config);\n        }\n        break;\n      case 'object':\n        result[key] = resolveWith(config[key], resolver);\n        break;\n      case 'boolean':\n        if (resolver) result[key] = config[key];\n        break;\n    }\n  }\n  return result;\n}\nfunction parse(newConfig, gestureKey, _config = {}) {\n  const _ref = newConfig,\n    {\n      target,\n      eventOptions,\n      window,\n      enabled,\n      transform\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  _config.shared = resolveWith({\n    target,\n    eventOptions,\n    window,\n    enabled,\n    transform\n  }, sharedConfigResolver);\n  if (gestureKey) {\n    const resolver = ConfigResolverMap.get(gestureKey);\n    _config[gestureKey] = resolveWith(_objectSpread2({\n      shared: _config.shared\n    }, rest), resolver);\n  } else {\n    for (const key in rest) {\n      const resolver = ConfigResolverMap.get(key);\n      if (resolver) {\n        _config[key] = resolveWith(_objectSpread2({\n          shared: _config.shared\n        }, rest[key]), resolver);\n      } else if (process.env.NODE_ENV === 'development') {\n        if (!['drag', 'pinch', 'scroll', 'wheel', 'move', 'hover'].includes(key)) {\n          if (key === 'domTarget') {\n            throw Error(`[@use-gesture]: \\`domTarget\\` option has been renamed to \\`target\\`.`);\n          }\n          console.warn(`[@use-gesture]: Unknown config key \\`${key}\\` was used. Please read the documentation for further information.`);\n        }\n      }\n    }\n  }\n  return _config;\n}\n\nclass EventStore {\n  constructor(ctrl, gestureKey) {\n    _defineProperty(this, \"_listeners\", new Set());\n    this._ctrl = ctrl;\n    this._gestureKey = gestureKey;\n  }\n  add(element, device, action, handler, options) {\n    const listeners = this._listeners;\n    const type = toDomEventType(device, action);\n    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};\n    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);\n    element.addEventListener(type, handler, eventOptions);\n    const remove = () => {\n      element.removeEventListener(type, handler, eventOptions);\n      listeners.delete(remove);\n    };\n    listeners.add(remove);\n    return remove;\n  }\n  clean() {\n    this._listeners.forEach(remove => remove());\n    this._listeners.clear();\n  }\n}\n\nclass TimeoutStore {\n  constructor() {\n    _defineProperty(this, \"_timeouts\", new Map());\n  }\n  add(key, callback, ms = 140, ...args) {\n    this.remove(key);\n    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));\n  }\n  remove(key) {\n    const timeout = this._timeouts.get(key);\n    if (timeout) window.clearTimeout(timeout);\n  }\n  clean() {\n    this._timeouts.forEach(timeout => void window.clearTimeout(timeout));\n    this._timeouts.clear();\n  }\n}\n\nclass Controller {\n  constructor(handlers) {\n    _defineProperty(this, \"gestures\", new Set());\n    _defineProperty(this, \"_targetEventStore\", new EventStore(this));\n    _defineProperty(this, \"gestureEventStores\", {});\n    _defineProperty(this, \"gestureTimeoutStores\", {});\n    _defineProperty(this, \"handlers\", {});\n    _defineProperty(this, \"config\", {});\n    _defineProperty(this, \"pointerIds\", new Set());\n    _defineProperty(this, \"touchIds\", new Set());\n    _defineProperty(this, \"state\", {\n      shared: {\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }\n    });\n    resolveGestures(this, handlers);\n  }\n  setEventIds(event) {\n    if (isTouch(event)) {\n      this.touchIds = new Set(touchIds(event));\n      return this.touchIds;\n    } else if ('pointerId' in event) {\n      if (event.type === 'pointerup' || event.type === 'pointercancel') this.pointerIds.delete(event.pointerId);else if (event.type === 'pointerdown') this.pointerIds.add(event.pointerId);\n      return this.pointerIds;\n    }\n  }\n  applyHandlers(handlers, nativeHandlers) {\n    this.handlers = handlers;\n    this.nativeHandlers = nativeHandlers;\n  }\n  applyConfig(config, gestureKey) {\n    this.config = parse(config, gestureKey, this.config);\n  }\n  clean() {\n    this._targetEventStore.clean();\n    for (const key of this.gestures) {\n      this.gestureEventStores[key].clean();\n      this.gestureTimeoutStores[key].clean();\n    }\n  }\n  effect() {\n    if (this.config.shared.target) this.bind();\n    return () => this._targetEventStore.clean();\n  }\n  bind(...args) {\n    const sharedConfig = this.config.shared;\n    const props = {};\n    let target;\n    if (sharedConfig.target) {\n      target = sharedConfig.target();\n      if (!target) return;\n    }\n    if (sharedConfig.enabled) {\n      for (const gestureKey of this.gestures) {\n        const gestureConfig = this.config[gestureKey];\n        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);\n        if (gestureConfig.enabled) {\n          const Engine = EngineMap.get(gestureKey);\n          new Engine(this, args, gestureKey).bind(bindFunction);\n        }\n      }\n      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);\n      for (const eventKey in this.nativeHandlers) {\n        nativeBindFunction(eventKey, '', event => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {\n          event,\n          args\n        })), undefined, true);\n      }\n    }\n    for (const handlerProp in props) {\n      props[handlerProp] = chain(...props[handlerProp]);\n    }\n    if (!target) return props;\n    for (const handlerProp in props) {\n      const {\n        device,\n        capture,\n        passive\n      } = parseProp(handlerProp);\n      this._targetEventStore.add(target, device, '', props[handlerProp], {\n        capture,\n        passive\n      });\n    }\n  }\n}\nfunction setupGesture(ctrl, gestureKey) {\n  ctrl.gestures.add(gestureKey);\n  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);\n  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();\n}\nfunction resolveGestures(ctrl, internalHandlers) {\n  if (internalHandlers.drag) setupGesture(ctrl, 'drag');\n  if (internalHandlers.wheel) setupGesture(ctrl, 'wheel');\n  if (internalHandlers.scroll) setupGesture(ctrl, 'scroll');\n  if (internalHandlers.move) setupGesture(ctrl, 'move');\n  if (internalHandlers.pinch) setupGesture(ctrl, 'pinch');\n  if (internalHandlers.hover) setupGesture(ctrl, 'hover');\n}\nconst bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {\n  var _options$capture, _options$passive;\n  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;\n  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;\n  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);\n  if (withPassiveOption && passive) handlerProp += 'Passive';\n  props[handlerProp] = props[handlerProp] || [];\n  props[handlerProp].push(handler);\n};\n\nconst RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;\nfunction sortHandlers(_handlers) {\n  const native = {};\n  const handlers = {};\n  const actions = new Set();\n  for (let key in _handlers) {\n    if (RE_NOT_NATIVE.test(key)) {\n      actions.add(RegExp.lastMatch);\n      handlers[key] = _handlers[key];\n    } else {\n      native[key] = _handlers[key];\n    }\n  }\n  return [handlers, native, actions];\n}\nfunction registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {\n  if (!actions.has(handlerKey)) return;\n  if (!EngineMap.has(key)) {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \\`${key}\\` gesture but isn't properly configured.\\n\\nPlease add \\`${key}Action\\` when creating your handler.`);\n    }\n    return;\n  }\n  const startKey = handlerKey + 'Start';\n  const endKey = handlerKey + 'End';\n  const fn = state => {\n    let memo = undefined;\n    if (state.first && startKey in handlers) handlers[startKey](state);\n    if (handlerKey in handlers) memo = handlers[handlerKey](state);\n    if (state.last && endKey in handlers) handlers[endKey](state);\n    return memo;\n  };\n  internalHandlers[key] = fn;\n  config[key] = config[key] || {};\n}\nfunction parseMergedHandlers(mergedHandlers, mergedConfig) {\n  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);\n  const internalHandlers = {};\n  registerGesture(actions, handlers, 'onDrag', 'drag', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onWheel', 'wheel', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onScroll', 'scroll', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onPinch', 'pinch', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onMove', 'move', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onHover', 'hover', internalHandlers, mergedConfig);\n  return {\n    handlers: internalHandlers,\n    config: mergedConfig,\n    nativeHandlers\n  };\n}\n\nexport { Controller, parseMergedHandlers };\n","import { registerAction, dragAction, pinchAction, wheelAction, scrollAction, moveAction, hoverAction } from '@use-gesture/core/actions';\nexport * from '@use-gesture/core/actions';\nimport React from 'react';\nimport { Controller, parseMergedHandlers } from '@use-gesture/core';\nexport * from '@use-gesture/core/utils';\nexport * from '@use-gesture/core/types';\n\nfunction useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {\n  const ctrl = React.useMemo(() => new Controller(handlers), []);\n  ctrl.applyHandlers(handlers, nativeHandlers);\n  ctrl.applyConfig(config, gestureKey);\n  React.useEffect(ctrl.effect.bind(ctrl));\n  React.useEffect(() => {\n    return ctrl.clean.bind(ctrl);\n  }, []);\n  if (config.target === undefined) {\n    return ctrl.bind.bind(ctrl);\n  }\n  return undefined;\n}\n\nfunction useDrag(handler, config) {\n  registerAction(dragAction);\n  return useRecognizers({\n    drag: handler\n  }, config || {}, 'drag');\n}\n\nfunction usePinch(handler, config) {\n  registerAction(pinchAction);\n  return useRecognizers({\n    pinch: handler\n  }, config || {}, 'pinch');\n}\n\nfunction useWheel(handler, config) {\n  registerAction(wheelAction);\n  return useRecognizers({\n    wheel: handler\n  }, config || {}, 'wheel');\n}\n\nfunction useScroll(handler, config) {\n  registerAction(scrollAction);\n  return useRecognizers({\n    scroll: handler\n  }, config || {}, 'scroll');\n}\n\nfunction useMove(handler, config) {\n  registerAction(moveAction);\n  return useRecognizers({\n    move: handler\n  }, config || {}, 'move');\n}\n\nfunction useHover(handler, config) {\n  registerAction(hoverAction);\n  return useRecognizers({\n    hover: handler\n  }, config || {}, 'hover');\n}\n\nfunction createUseGesture(actions) {\n  actions.forEach(registerAction);\n  return function useGesture(_handlers, _config) {\n    const {\n      handlers,\n      nativeHandlers,\n      config\n    } = parseMergedHandlers(_handlers, _config || {});\n    return useRecognizers(handlers, config, undefined, nativeHandlers);\n  };\n}\n\nfunction useGesture(handlers, config) {\n  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);\n  return hook(handlers, config || {});\n}\n\nexport { createUseGesture, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };\n","\r\n\r\nimport React, { useState } from 'react';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\nimport { useDrag, usePinch } from '@use-gesture/react';\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nconst PDFViewerWithGesture = ({ filePath }) => {\r\n    const [scale, setScale] = useState(1);  // 初始缩放比例\r\n    const [numPages, setNumPages] = useState(null);  // PDF的页数\r\n    const [position, setPosition] = useState([0, 0]);  // 用于拖动页面的位置\r\n\r\n    // Pinch手势：用于缩放\r\n    const bindPinch = usePinch((state) => {\r\n        setScale(state.offset[0]);  // 更新缩放比例\r\n    });\r\n\r\n    // Drag手势：用于拖动页面\r\n    const bindDrag = useDrag((state) => {\r\n        setPosition([state.offset[0], state.offset[1]]);  // 更新拖动的位置\r\n    });\r\n\r\n    // PDF加载完成后，获取页面数\r\n    const onLoadSuccess = ({ numPages }) => {\r\n        setNumPages(numPages);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            {...bindPinch()}  // 将 pinch 手势绑定到容器\r\n            {...bindDrag()}   // 将 drag 手势绑定到容器\r\n            style={{\r\n                width: '100%',\r\n                height: '100%',\r\n                // overflow: 'hidden',\r\n                cursor: 'grab',\r\n                transform: `translate(${position[0]}px, ${position[1]}px)`,  // 设置拖动的位移\r\n                touchAction: 'auto',  // 禁止默认的触摸事件行为\r\n            }}\r\n        >\r\n            <Document file={filePath} onLoadSuccess={onLoadSuccess}>\r\n                   {new Array(numPages).fill(\"\").map((item, index) =>\r\n                              <Page\r\n                                key={index}\r\n                                pageNumber={index + 1}\r\n                                scale={scale}\r\n                                width={window.innerWidth}\r\n                                renderAnnotationLayer={false}\r\n                                renderTextLayer={false}\r\n                        />)}\r\n            </Document>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PDFViewerWithGesture;\r\n","import React,{ useState, useEffect } from 'react';\r\nimport Pdf from './component/PDF';\r\n\r\n\r\n const Index = () => {\r\n\r\n   return <div>\r\n     <h2>version:7</h2>version:\r\n     <><Pdf filePath=\"data:application/pdf;base64,\" /></></div>\r\n}\r\n\r\nexport default Index;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <App />\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"names":["ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","aa","ca","p","a","b","c","arguments","length","encodeURIComponent","da","Set","ea","fa","ha","add","ia","window","document","createElement","ja","Object","prototype","hasOwnProperty","ka","la","ma","v","d","e","f","g","this","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","z","split","forEach","toLowerCase","ra","sa","toUpperCase","ta","slice","pa","isNaN","qa","call","test","oa","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","assign","Ma","stack","trim","match","Na","Oa","prepareStackTrace","defineProperty","set","Reflect","construct","l","h","k","displayName","includes","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","value","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","Array","isArray","fb","options","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","toString","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","style","indexOf","setProperty","keys","charAt","substring","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","ub","vb","is","wb","xb","target","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","push","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","apply","m","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","Math","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","key","String","fromCharCode","code","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","password","range","search","tel","text","time","url","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","start","end","selectionStart","selectionEnd","min","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","concat","nf","Ub","instance","listener","D","of","has","pf","qf","rf","random","sf","bind","capture","passive","n","t","J","x","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","setTimeout","Gf","clearTimeout","Hf","Promise","Jf","queueMicrotask","resolve","then","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","defaultProps","Mg","Ng","Og","Pg","Qg","Rg","_currentValue","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","context","memoizedValue","next","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","eventTime","lane","payload","callback","dh","K","eh","fh","gh","q","r","y","hh","ih","jh","Component","refs","kh","nh","isMounted","_reactInternals","enqueueSetState","L","lh","mh","enqueueReplaceState","enqueueForceUpdate","oh","shouldComponentUpdate","isPureReactComponent","ph","contextType","state","updater","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","ref","_owner","_stringRef","th","join","uh","vh","index","wh","xh","yh","implementation","zh","Ah","done","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","tagName","Jh","Kh","Lh","M","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","ReactCurrentDispatcher","Qh","Rh","N","O","P","Sh","Th","Uh","Vh","Q","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","gi","hi","ii","ji","ki","getSnapshot","li","mi","R","ni","lastEffect","stores","oi","pi","qi","ri","create","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","message","digest","Li","Mi","console","error","Ni","WeakMap","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","ReactCurrentOwner","Yi","Zi","$i","aj","bj","compare","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Bj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","yj","Ej","S","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","size","createElementNS","autoFocus","createTextNode","T","Hj","Ij","Jj","Kj","U","Lj","WeakSet","V","Mj","W","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","insertBefore","_reactRootContainer","Xj","X","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","src","Wk","mk","ceil","nk","ok","pk","Y","Z","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","isReactComponent","pendingChildren","bl","mutableSourceEagerHydrationData","cl","cache","pendingSuspenseBoundaries","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","tl","usingClientEntryPoint","Events","ul","findFiberByHostInstance","bundleType","version","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","createPortal","dl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","factory","_ref4","undefined","rel","_ref4$enabled","enabled","_util","assert","urlNullRemoved","removeNullCharacters","title","targetStr","LinkTarget","NONE","SELF","BLANK","PARENT","TOP","DEFAULT_LINK_REL","details","anchor","query","lastIndexOf","defaultFilename","isDataScheme","warn","reFilename","splitURI","exec","suggestedFilename","decodeURIComponent","ex","xfaPage","_ref6","_ref6$scale","scale","_ref6$rotation","rotation","_xfaPage$attributes$s","attributes","viewBox","parseInt","PageViewport","filename","removeScriptElement","reject","script","onload","evt","remove","onerror","head","__w_pdfjs_require__","_base_factory","PixelsPerInch","CSS","PDF","PDF_TO_CSS_UNITS","shadow","DOMCanvasFactory","_BaseCanvasFactory","_this","_ref$ownerDocument","globalThis","_classCallCheck","_super","_document","canvas","BaseCanvasFactory","fetchData","_x","_callee","asTypedArray","response","_args","_regenerator","wrap","prev","isValidFetchUrl","baseURI","fetch","sent","statusText","t1","Uint8Array","arrayBuffer","t2","t0","t3","stringToBytes","t4","abrupt","request","XMLHttpRequest","open","responseType","onreadystatechange","readyState","DONE","status","responseText","send","stop","DOMCMapReaderFactory","_BaseCMapReaderFactor","compressionType","isCompressed","cMapData","BaseCMapReaderFactory","DOMStandardFontDataFactory","_BaseStandardFontData","BaseStandardFontDataFactory","DOMSVGFactory","_BaseSVGFactory","BaseSVGFactory","_ref2","_ref2$offsetX","offsetX","_ref2$offsetY","offsetY","_ref2$dontFlip","dontFlip","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","offsetCanvasY","centerX","centerY","abs","transform","_ref3","_ref3$scale","_ref3$rotation","_ref3$offsetX","_ref3$offsetY","_ref3$dontFlip","Util","applyTransform","rect","topLeft","bottomRight","applyInverseTransform","RenderingCancelledException","_BaseException","msg","_this2","_super5","BaseException","i","pdfDateStringRegex","StatTimer","started","times","_step","outBuf","longest","_iterator","_createForOfIteratorHelper","s","_step2","_iterator2","_time","duration","padEnd","baseUrl","protocol","URL","PDFDateString","isString","RegExp","matches","year","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","UTC","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","writable","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","Context","_invoke","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","result","_typeof","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","reverse","pop","skipTempReset","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","arr","resultLength","arrayByteLength","pos","_i","item","itemLength","byteLength","bytes","MAX_ARGUMENT_COUNT","strBuf","chunkEnd","chunk","subarray","contentType","forceDataSchema","createObjectURL","Blob","digits","buffer","b1","b2","b3","capability","isSettled","promise","reason","addDefaultProtocol","startsWith","dots","tryConvertEncoding","stringToUTF8String","absoluteUrl","_isValidProtocol","str","getUTCFullYear","getUTCMonth","padStart","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","verbosity","VerbosityLevel","INFOS","arr1","arr2","otherUrl","origin","other","map","_step$value","replaceInvisible","InvisibleCharactersRegExp","NullCharactersRegExp","level","Number","isInteger","charCodeAt","_i2","_i3","PDFStringTranslateTable","buf","_char","unescape","ANY","DISPLAY","PRINT","ANNOTATIONS_FORMS","ANNOTATIONS_STORAGE","ANNOTATIONS_DISABLE","OPLIST","DISABLE","ENABLE","ENABLE_FORMS","ENABLE_STORAGE","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","MARKED","REVIEW","UNMARKED","ACCEPTED","REJECTED","CANCELLED","COMPLETED","GROUP","REPLY","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","SOLID","DASHED","BEVELED","INSET","Fo","Bl","PO","PC","PV","PI","WC","WS","DS","WP","DP","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","TYPE1","TYPE1STANDARD","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","ERRORS","WARNINGS","BINARY","STREAM","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","unknown","forms","javaScript","signatures","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontBuildPath","errorFontGetPath","errorMarkedContent","errorContentSubStream","NEED_PASSWORD","INCORRECT_PASSWORD","unreachable","cond","prop","PasswordException","UnknownErrorException","_BaseException2","_super2","InvalidPDFException","_BaseException3","_super3","MissingPDFException","_BaseException4","_super4","UnexpectedResponseException","_BaseException5","_this3","FormatError","_BaseException6","_super6","AbortException","_BaseException7","_super7","IsLittleEndianCached","buffer8","Uint32Array","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","_toConsumableArray","m1","m2","p1","p2","p3","p4","max","transpose","first","sqrt","pow","sx","sy","rect1","rect2","orderedX","sort","orderedY","normalizeRect","x0","y0","x1","y1","x2","y2","x3","y3","b2ac","sqrtb2ac","tvalues","bounds","mt","j","jlen","escape","_is_node","_pdfjsCompatibilityChecked","btoa","isNodeJS","chars","Buffer","from","atob","DOMMatrix","fromEntries","allSettled","ReadableStream","process","versions","nw","electron","$","global","createNonEnumerableProperty","redefine","setGlobal","copyConstructorProperties","isForced","targetProperty","sourceProperty","descriptor","TARGET","GLOBAL","STATIC","stat","noTargetGet","forced","sham","check","it","DESCRIPTORS","propertyIsEnumerableModule","createPropertyDescriptor","toIndexedObject","toPropertyKey","IE8_DOM_DEFINE","$getOwnPropertyDescriptor","fails","$propertyIsEnumerable","propertyIsEnumerable","NASHORN_BUG","bitmap","IndexedObject","requireObjectCoercible","uncurryThis","classof","FunctionPrototype","callBind","stringSlice","toPrimitive","isSymbol","argument","isObject","getMethod","ordinaryToPrimitive","wellKnownSymbol","TO_PRIMITIVE","pref","exoticToPrim","isCallable","getBuiltIn","isPrototypeOf","USE_SYMBOL_AS_UID","namespace","NATIVE_SYMBOL","V8_VERSION","getOwnPropertySymbols","userAgent","Deno","v8","aCallable","tryToString","val","uid","WellKnownSymbolsStore","symbolFor","createWellKnownSymbol","withoutSetter","description","IS_PURE","store","copyright","SHARED","toObject","postfix","EXISTS","definePropertyModule","anObject","$defineProperty","Attributes","inspectSource","InternalStateModule","CONFIGURABLE_FUNCTION_NAME","CONFIGURABLE","getInternalState","enforceInternalState","enforce","TEMPLATE","unsafe","simple","functionToString","NATIVE_WEAK_MAP","sharedKey","hiddenKeys","OBJECT_ALREADY_INITIALIZED","wmget","wmhas","wmset","metadata","facade","STATE","getterFor","TYPE","getDescriptor","PROPER","ownKeys","getOwnPropertyDescriptorModule","getOwnPropertyNamesModule","getOwnPropertySymbolsModule","internalObjectKeys","getOwnPropertyNames","names","toAbsoluteIndex","lengthOfArrayLike","createMethod","IS_INCLUDES","$this","fromIndex","toIntegerOrInfinity","integer","floor","toLength","replacement","feature","detection","normalize","POLYFILL","NATIVE","fromArray","CSSMatrix","every","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","M11","M12","M21","M22","M41","M42","fromMatrix","fromString","invalidStringError","filter","components","parseFloat","xyz","xyza","multiply","translate","rotateAxisAngle","rotate","some","skewX","skewY","axis","idx","axeValues","Translate","Rotate","rx","ry","rz","degToRad","radX","radY","radZ","cosx","cos","sinx","sin","cosy","siny","cosz","sinz","RotateAxisAngle","alpha","angle","sinA","cosA","sinA2","z2","Scale","SkewX","radA","tan","SkewY","Multiply","args","len","ARGS","setMatrixValue","prototypeAccessors","isIdentity","is2D","Float64Array","Float32Array","toArray","toJSON","RX","RY","RZ","transformPoint","defineProperties","Version","__WEBPACK_AMD_DEFINE_RESULT__","__WEBPACK_AMD_DEFINE_FACTORY__","path","addToUnscopables","Iterators","defineIterator","ARRAY_ITERATOR","setInternalState","iterated","kind","Arguments","UNSCOPABLES","ArrayPrototype","activeXDocument","enumBugKeys","html","documentCreateElement","PROTOTYPE","SCRIPT","IE_PROTO","EmptyConstructor","scriptTag","content","LT","NullProtoObjectViaActiveX","write","close","temp","NullProtoObject","ActiveXObject","domain","iframeDocument","iframe","JS","NullProtoObjectViaIFrame","Properties","objectKeys","FunctionName","createIteratorConstructor","setToStringTag","IteratorsCore","PROPER_FUNCTION_NAME","BUGGY_SAFARI_ITERATORS","ITERATOR","KEYS","VALUES","ENTRIES","returnThis","Iterable","NAME","IteratorConstructor","DEFAULT","IS_SET","FORCED","CurrentIteratorPrototype","methods","KEY","getIterationMethod","KIND","defaultIterator","IterablePrototype","TO_STRING_TAG","INCORRECT_VALUES_NAME","nativeIterator","anyNativeIterator","entries","proto","ENUMERABLE_NEXT","PrototypeOfArrayIteratorPrototype","arrayIterator","CORRECT_PROTOTYPE_GETTER","ObjectPrototype","TAG","aPossiblePrototype","setter","CORRECT_SETTER","iterate","createProperty","AS_ENTRIES","isArrayIteratorMethod","getIterator","getIteratorMethod","iteratorClose","Result","stopped","ResultPrototype","unboundFunction","iterFn","step","that","IS_ITERATOR","INTERRUPTED","condition","callFn","usingIterator","TO_STRING_TAG_SUPPORT","classofRaw","CORRECT_ARGUMENTS","tryGet","callee","innerResult","innerError","propertyKey","clearErrorStack","installErrorCause","normalizeStringArgument","ERROR_STACK_INSTALLABLE","$AggregateError","errors","isInstance","AggregateErrorPrototype","errorsArray","AggregateError","arraySlice","TEST","V8_OR_CHAKRA_STACK_ENTRY","IS_V8_OR_CHAKRA_STACK","IS_FIREFOX_OR_SAFARI_STACK","dropEntries","fin","cause","$default","Internal","OwnPromiseCapability","PromiseWrapper","nativeThen","NativePromise","redefineAll","setSpecies","anInstance","checkCorrectnessOfIteration","speciesConstructor","task","microtask","promiseResolve","hostReportErrors","newPromiseCapabilityModule","perform","IS_BROWSER","IS_NODE","SPECIES","PROMISE","getInternalPromiseState","NativePromisePrototype","PromiseConstructor","PromisePrototype","newPromiseCapability","newGenericPromiseCapability","DISPATCH_EVENT","createEvent","NATIVE_REJECTION_EVENT","PromiseRejectionEvent","UNHANDLED_REJECTION","SUBCLASSING","PROMISE_CONSTRUCTOR_SOURCE","GLOBAL_CORE_JS_PROMISE","FakePromise","INCORRECT_ITERATION","all","isThenable","notify","isReject","notified","chain","reactions","exited","reaction","handler","fail","rejection","onHandleUnhandled","enter","exit","onUnhandled","initEvent","isUnhandled","emit","parent","unwrap","internalReject","internalResolve","wrapper","executor","onFulfilled","onRejected","$promiseResolve","counter","remaining","alreadyCalled","race","CONSTRUCTOR_NAME","Constructor","Prototype","SAFE_CLOSING","called","iteratorWithReturn","SKIP_CLOSING","ITERATION_SUPPORT","aConstructor","defaultConstructor","isConstructor","noop","empty","constructorRegExp","INCORRECT_TO_STRING","isConstructorModern","defer","channel","port","IS_IOS","setImmediate","clear","clearImmediate","Dispatch","MessageChannel","ONREADYSTATECHANGE","run","runner","post","postMessage","host","nextTick","port2","port1","onmessage","importScripts","flush","toggle","macrotask","IS_IOS_PEBBLE","IS_WEBOS_WEBKIT","MutationObserver","WebKitMutationObserver","queueMicrotaskDescriptor","observe","characterData","Pebble","promiseCapability","PromiseCapability","$$resolve","$$reject","PROMISE_ANY_ERROR","alreadyResolved","alreadyRejected","real","onFinally","isFunction","STRING_ITERATOR","point","CONVERT_TO_STRING","position","codeAt","SymbolPolyfill","getGlobals","globals","typeIsObject","rethrowAssertionErrorRejection","originalPromise","originalPromiseThen","originalPromiseResolve","originalPromiseReject","newPromise","promiseResolvedWith","promiseRejectedWith","PerformPromiseThen","uponPromise","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","globalQueueMicrotask","resolvedPromise","reflectCall","promiseCall","QUEUE_MAX_ARRAY_SIZE","SimpleQueue","_cursor","_size","_front","_elements","_next","_back","oldBack","newBack","oldFront","newFront","oldCursor","newCursor","elements","peek","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","_closedPromise","_closedPromise_resolve","_closedPromise_reject","defaultReaderClosedPromiseResolve","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","isFinite","MathTrunc","trunc","isDictionary","assertDictionary","assertFunction","assertObject","assertRequiredArgument","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","integerPart","convertUnsignedLongLongWithEnforceRange","lowerBound","upperBound","MAX_SAFE_INTEGER","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","_a","AsyncIteratorPrototype","IsReadableStreamLocked","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","releaseLock","_disturbed","_readableStreamController","closed","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","nextSteps","_nextSteps","returnSteps","_returnSteps","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","AcquireReadableStreamAsyncIterator","impl","NumberIsNaN","CreateArrayFromList","CopyDataBlockBytes","dest","destOffset","srcOffset","TransferArrayBuffer","IsDetachedBuffer","ArrayBufferSlice","begin","ArrayBuffer","IsNonNegativeNumber","CloneAsUint8Array","byteOffset","DequeueValue","container","pair","_queue","_queueTotalSize","EnqueueValueWithSize","RangeError","PeekQueueValue","ResetQueue","ReadableStreamBYOBRequest","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","isView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","ReadableByteStreamControllerGetDesiredSize","_closeRequested","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","controller","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerPullInto","readIntoRequest","DataView","BYTES_PER_ELEMENT","ReadableStreamAddReadIntoRequest","emptyView","ReadableByteStreamControllerRespondInClosedState","firstDescriptor","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerRespondInReadableState","remainderSize","remainder","ReadableByteStreamControllerRespondInternal","_started","transferredBuffer","firstPendingPullInto","ReadableStreamError","byobRequest","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","pull","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","_readIntoRequests","IsReadableStreamBYOBReader","desiredSize","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSink","original","abort","convertUnderlyingSinkAbortCallback","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","isAbortSignal","aborted","supportsAbortController","AbortController","createAbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","InitializeWritableStream","sizeAlgorithm","SetUpWritableStreamDefaultControllerFromUnderlyingSink","streamBrandCheckException$2","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","CreateWritableStream","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","WritableStreamDefaultController","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","WritableStreamDefaultControllerClose","WritableStreamAddWriteRequest","writeRequest","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","abortRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamFinishInFlightClose","defaultWriterClosedPromiseResolve","WritableStreamFinishInFlightCloseWithError","WritableStreamMarkCloseRequestInFlight","WritableStreamMarkFirstWriteRequestInFlight","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseReset","locked","_ownerWritableStream","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterCloseWithErrorPropagation","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","WritableStreamDefaultControllerGetDesiredSize","releasedError","chunkSize","WritableStreamDefaultControllerGetChunkSize","WritableStreamDefaultControllerWrite","closeSentinel","IsWritableStreamDefaultController","defaultControllerBrandCheckException$2","signal","_controlledWritableStream","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","_strategySizeAlgorithm","_writeAlgorithm","_closeAlgorithm","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerAdvanceQueueIfNeeded","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","enqueueE","WritableStreamDefaultControllerProcessClose","WritableStreamDefaultControllerProcessWrite","sinkClosePromise","_readyPromise_resolve","_readyPromise_reject","abortReason","NativeDOMException","DOMException","isDOMExceptionConstructor","createDOMExceptionPolyfill","captureStackTrace","DOMException$1","ReadableStreamPipeTo","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","pipeLoop","resolveLoop","rejectLoop","pipeStep","resolveRead","rejectRead","isOrBecomesErrored","shutdown","isOrBecomesClosed","destClosed_1","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","ReadableStreamDefaultController","IsReadableStreamDefaultController","defaultControllerBrandCheckException$1","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","ReadableStreamDefaultControllerHasBackpressure","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","underlyingSource","ReadableStreamTee","cloneForBranch2","ReadableByteStreamTee","ReadableStreamDefaultTee","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgain","canceled1","canceled2","cancelPromise","chunk1","chunk2","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableStream","readAgainForBranch1","readAgainForBranch2","forwardReaderError","thisReader","pullWithDefaultReader","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","clonedChunk","otherCanceled","CreateReadableByteStream","convertUnderlyingDefaultOrByteSource","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReaderOptions","convertReadableStreamReaderMode","convertIteratorOptions","Boolean","convertPipeOptions","assertAbortSignal","convertReadableWritablePair","readable","rawUnderlyingSource","InitializeReadableStream","streamBrandCheckException$1","getReader","rawOptions","pipeThrough","rawTransform","pipeTo","destination","tee","convertQueuingStrategyInit","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformer","readableType","writableType","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","startPromise_resolve","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","InitializeTransformStream","SetUpTransformStreamDefaultControllerFromTransformer","_transformStreamController","IsTransformStream","streamBrandCheckException","_readable","_writable","startPromise","TransformStreamDefaultSinkWriteAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise","_backpressureChangePromise_resolve","TransformStreamSetBackpressure","TransformStreamError","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultController","IsTransformStreamDefaultController","defaultControllerBrandCheckException","_controlledTransformStream","TransformStreamDefaultControllerEnqueue","TransformStreamDefaultControllerError","terminate","TransformStreamDefaultControllerTerminate","SetUpTransformStreamDefaultController","transformAlgorithm","flushAlgorithm","_transformAlgorithm","_flushAlgorithm","transformResultE","readableController","TransformStreamDefaultControllerPerformTransform","flushPromise","_createCanvas","getContext","canvasAndContext","_ref","_ref$baseUrl","_ref$isCompressed","CMapCompressionType","_fetchData","_ref3$baseUrl","_callee2","_context2","svg","_createSVG","_display_utils","_font_loader","_node_utils","_annotation_storage","_canvas","_worker_options","_message_handler","_metadata","_optional_content_config","_transport_stream","_xfa_text","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DefaultCanvasFactory","NodeCanvasFactory","DefaultCMapReaderFactory","NodeCMapReaderFactory","DefaultStandardFontDataFactory","NodeStandardFontDataFactory","createPDFNetworkStream","setPDFNetworkStreamFactory","pdfNetworkStreamFactory","getDocument","PDFDocumentLoadingTask","isArrayBuffer","PDFDataRangeTransport","params","rangeTransport","worker","rangeChunkSize","CMapReaderFactory","StandardFontDataFactory","ignoreErrors","stopAtErrors","fontExtraProperties","pdfBug","enableXfa","docBaseUrl","maxImageSize","useWorkerFetch","disableFontFace","useSystemFonts","disableRange","disableStream","disableAutoFetch","setVerbosityLevel","workerParams","GlobalWorkerOptions","workerPort","PDFWorker","fromPort","_worker","docId","destroyed","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","PDFDataTransportStream","initialData","progressiveDone","contentDispositionFilename","httpHeaders","withCredentials","_slicedToArray","workerId","messageHandler","MessageHandler","transport","WorkerTransport","_transport","_capability","_x2","_x3","_x4","_callee7","pdfDataRangeTransport","_context7","sendWithPromise","apiVersion","cMapUrl","standardFontDataUrl","createPromiseCapability","idCounters","doc","onPassword","onProgress","onUnsupportedFeature","_this$_transport","_rangeListeners","_progressListeners","_progressiveReadListeners","_progressiveDoneListeners","_readyCapability","loaded","total","_step3","_iterator3","_step4","_iterator4","PDFDocumentProxy","pdfInfo","_this4","_pdfInfo","deprecated","fingerprints","_value","_asyncToGenerator","stats","streamTypes","fontTypes","annotationStorage","numPages","_htmlForXfa","pageNumber","getPage","getPageIndex","getDestinations","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getDocJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","downloadInfoCapability","keepLoadedFonts","startCleanup","isPureXfa","loadingTask","loadingParams","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","PDFPageProxy","pageIndex","pageInfo","_pageIndex","_pageInfo","_ownerDocument","_stats","_pdfBug","commonObjs","objs","PDFObjects","cleanupAfterRender","pendingCleanup","_intentStates","_annotationPromises","userUnit","_ref4$intent","intent","intentArgs","getRenderingIntent","cacheKey","getAnnotations","renderingIntent","annotations","_step5","_iterator5","_loop","annotation","titleObj","contentsObj","_jsActionsPromise","getPageJSActions","_callee3","_this$_transport$_htm","_context3","_ref5","_arguments$","_arguments$2","_intentState","_this5","canvasContext","viewport","_ref5$intent","_ref5$annotationMode","annotationMode","AnnotationMode","_ref5$transform","_ref5$imageLayer","imageLayer","_ref5$canvasFactory","canvasFactory","_ref5$background","background","_ref5$optionalContent","optionalContentConfigPromise","_ref5$annotationCanva","annotationCanvasMap","renderInteractiveForms","includeAnnotationStorage","intentState","streamReaderCancelTimeout","canvasFactoryInstance","intentPrint","RenderingIntentFlag","displayReadyCapability","operatorList","fnArray","argsArray","lastChunk","_pumpOperatorList","renderTasks","internalRenderTask","_tryCleanup","_abortOperatorList","timeEnd","InternalRenderTask","useRequestAnimationFrame","renderTask","_ref7","transparency","optionalContentConfig","initializeGraphics","operatorListChanged","opListTask","_intentState2","_ref8","_ref8$intent","_ref8$annotationMode","opListReadCapability","_ref9","_ref9$normalizeWhites","normalizeWhitespace","_ref9$disableCombineT","disableCombineTextItems","_ref9$includeMarkedCo","includeMarkedContent","sendWithStream","combineTextItems","items","getXfa","xfa","XfaText","readableStream","streamTextContent","styles","pump","_ref10","_textContent$items","_structTreePromise","getStructTree","_step6","waitOn","_iterator6","force","_step7","_iterator7","completed","resetStats","_step8","_iterator8","_step8$value","operatorListChunk","_step9","_iterator9","_ref11","_this6","serializable","streamReader","_ref12","_renderPageChunk","_step10","_iterator10","_ref13","_this7","_ref13$force","_step11","_iterator11","_step11$value","curCacheKey","cleanup","LoopbackPort","_listeners","_deferred","transfers","_this8","structuredClone","cloned","fallbackCloneValue","_step12","_iterator12","_step12$value","_step13","_iterator13","_val","_value$hasOwnProperty","desc","cloneValue","_step14","_iterator14","PDFWorkerUtil","isWorkerDisabled","fallbackWorkerSrc","fakeWorkerId","_document$currentScri","pdfjsFilePath","currentScript","createCDNWrapper","_ref14","_ref14$name","_ref14$port","_ref14$verbosity","getVerbosityLevel","_workerPorts","_port","_webWorker","_messageHandler","_initializeFromPort","_initialize","on","_this9","Worker","_mainThreadWorkerMessageHandler","workerSrc","isSameOrigin","terminateEarly","onWorkerError","_setupFakeWorker","sendTest","testObj","_this10","_setupFakeWorkerGlobal","WorkerMessageHandler","workerHandler","setup","_globalThis$pdfjsWork","pdfjsWorker","_this11","loader","_ref15","_callee4","mainWorkerMessageHandler","_callee4$","_context4","eval","loadScript","getWorkerSrc","_classPrivateFieldInitSpec","_docStats","_pageCache","_pagePromises","_metadataPromise","fontLoader","FontLoader","_onUnsupportedFeature","styleElement","_params","cMapPacked","destroyCapability","_passwordCapability","_networkStream","_fullReader","_lastProgress","setupMessageHandler","AnnotationStorage","_classPrivateFieldGet","isOpList","lastModified","_this12","_step15","_iterator15","page","_destroy","resetModified","terminated","_classPrivateFieldSet","_getFieldObjectsPromise","_hasJSActionsPromise","cancelAllRequests","_this13","sink","getFullReader","onPull","_ref16","onCancel","readyReason","headersCapability","fullReader","headersReady","_loadingTask$onProgre","isStreamingSupported","isRangeSupported","_loadingTask$onProgre2","contentLength","rangeReader","getRangeReader","_ref17","_ref18","_numPages","htmlForXfa","_loadingTask$onProgre3","_startRenderPage","_ref19","_globalThis$FontInspe","_ref20","exportedData","exportedError","fontRegistry","FontInspector","registerFont","fontAdded","FontFaceObject","_ref21","_imageData$data","_ref22","imageData","pageProxy","_loadingTask$onProgre4","freeze","_ref23","_this$loadingTask$onU","_this$loadingTask","featureId","_this14","cachedPromise","_this$_fullReader$fil","_this$_fullReader","_this15","results","OptionalContentConfig","_this16","_this16$_fullReader$f","_this16$_fullReader","_this16$_fullReader$c","_this16$_fullReader2","Metadata","_callee5","_iterator16","_step16","_args5","_context5","_objs","objId","resolved","_ensureObj","RenderTask","_internalRenderTask","onContinue","_ref24","_ref24$useRequestAnim","_ref24$pdfBug","operatorListIdx","running","graphicsReadyCallback","graphicsReady","_useRequestAnimationFrame","cancelled","_cancelBound","_continueBound","_continue","_scheduleNextBound","_scheduleNext","_nextBound","_ref25","_globalThis$StepperMa","_ref25$transparency","canvasInUse","StepperManager","stepper","nextBreakPoint","getNextBreakPoint","_this$params","gfx","CanvasGraphics","beginDrawing","endDrawing","updateOperatorList","_this17","requestAnimationFrame","_callee6","_context6","executeOperatorList","build","BaseFontLoader","nativeFontFaces","nativeFontFace","fonts","rule","getElementsByTagName","styleSheet","sheet","insertRule","cssRules","attached","missingFile","isFontLoadingAPISupported","createNativeFontFace","addNativeFontFace","UNSUPPORTED_FEATURES","family","createFontFaceRule","isSyncFontLoadingSupported","_queueLoadingCallback","_prepareFontLoadEvent","_this$_document","hasFonts","rules","fontsToLoad","_BaseFontLoader","_inherits","GenericFontLoader","_createSuper","loadingContext","requests","nextRequestId","loadTestFontId","_createClass","supported","navigator","otherRequest","int32","spliceString","insert","ctx","_loadTestFont","XXXX_VALUE","checksum","string32","loadedName","div","visibility","_names","span","fontFamily","isFontReady","fillText","getImageData","translatedData","_ref2$isEvalSupported","_ref2$disableFontFace","_ref2$ignoreErrors","_ref2$fontRegistry","compiledGlyphs","cssFontInfo","css","weight","italicAngle","FontFace","bytesToString","mimetype","character","cmds","jsBuf","cmd","_current","readFile","createCanvas","_storage","_timeStamp","_modified","onSetModified","onResetModified","modified","_Object$entries","_Object$entries$_i","_setModified","objectFromMap","_pattern_helper","MAX_GROUP_SIZE","FULL_CHUNK_HEIGHT","addContextCurrentTransform","mozCurrentTransform","_originalSave","_originalRestore","_originalRotate","_originalScale","_originalTranslate","_originalTransform","_originalSetTransform","setTransform","_originalResetTransform","resetTransform","_transformMatrix","_transformStack","_setLineWidth","_getLineWidth","_","_this$_transformMatri","ad_bc","bc_ad","old","cosValue","sinValue","CachedCanvases","trackTransform","canvasEntry","CanvasExtraState","alphaIsShape","fontSize","fontSizeScale","textMatrix","IDENTITY_MATRIX","textMatrixScale","fontMatrix","FONT_IDENTITY_MATRIX","leading","lineX","lineY","charSpacing","wordSpacing","textHScale","textRenderingMode","TextRenderingMode","textRise","fillColor","strokeColor","patternFill","fillAlpha","strokeAlpha","lineWidth","activeSMask","transferMaps","startNewPathAndClipBox","clone","clipBox","_Util$applyTransform2","minX","minY","maxX","maxY","box","bezierBoundingBox","updatePathMinMax","pathType","PathType","singularValueDecompose2dScale","xStrokePad","yStrokePad","intersect","getPathBoundingBox","putBinaryImageData","imgData","ImageData","putImageData","destPos","thisChunkHeight","elemsInThisChunk","transferMapRed","transferMapGreen","transferMapBlue","transferMapGray","partialChunkHeight","fullChunks","totalChunks","chunkImgData","createImageData","srcPos","ImageKind","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","srcDiff","kEnd","kEndUnrolled","mask","srcByte","hasTransferMaps","_k","_k2","_hasTransferMaps","_k3","putBinaryImageMask","elem","copyCtxState","sourceCtx","destCtx","properties","property","setLineDash","getLineDash","lineDashOffset","resetCtxToDefault","strokeStyle","fillStyle","fillRule","globalAlpha","lineCap","lineJoin","miterLimit","globalCompositeOperation","composeSMaskBackdrop","r0","g0","b0","alpha_","composeSMaskAlpha","maskData","layerData","transferMap","composeSMaskLuminosity","composeSMask","layerCtx","layerBox","layerOffsetX","layerOffsetY","layerWidth","layerHeight","maskCtx","subtype","backdrop","maskOffsetX","maskOffsetY","composeFn","hasBackdrop","row","chunkHeight","genericComposeSMask","drawImage","getImageSmoothingEnabled","interpolate","fround","actualScale","devicePixelRatio","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","canvasCtx","stateStack","pendingClip","pendingEOFill","res","xobjs","groupStack","processingType3","baseTransform","baseTransformStack","groupLevel","smaskStack","smaskCounter","tempSMask","suspendedCtx","contentVisible","markedContentStack","cachedCanvases","cachedPatterns","viewportScale","outputScaleX","outputScaleY","_cachedGetSinglePixelWidth","_ref2$transparency","_ref2$background","fillRect","transparentCanvas","getCanvas","compositeCtx","_combinedScaleFactor","hypot","beginLayout","executionStartIdx","continueCallback","argsArrayLen","fnId","chunkOperations","endTime","steps","breakIt","OPS","depObjId","objsPool","endLayout","inverseTransform","tmpCanvas","tmpCtx","widthScale","heightScale","paintWidth","paintHeight","tmpCanvasId","newWidth","newHeight","clearRect","isPatternFill","maskCanvas","objToCanvas","maskToCanvas","cord1","cord2","drawnWidth","drawnHeight","fillCanvas","fillCtx","scaled","_scaleImage","mozCurrentTransformInverse","imageSmoothingEnabled","inverse","getPattern","round","limit","dashArray","dashPhase","flatness","states","checkSMaskState","inSMaskMode","beginSMaskMode","endSMaskMode","cacheId","scratchCanvas","_removeMirroring","__originalSave","__originalRestore","__originalRotate","__originalScale","__originalTranslate","__originalTransform","__originalSetTransform","__originalResetTransform","__originalClip","__originalMoveTo","__originalLineTo","__originalBezierCurveTo","bezierCurveTo","__originalRect","__originalClosePath","__originalBeginPath","beginPath","cp1x","cp1y","cp2x","cp2y","mirrorContextOperations","dirtyBox","ops","startX","startY","xw","updateCurvePathMinMax","setCurrentPoint","consumePath","getSinglePixelWidth","_lineWidth","getClippedPathBoundingBox","needRestore","paths","pendingTextPaths","addToPath","spacing","fontRefName","fontObj","fontDirection","isType3Font","bold","italic","typeface","fallbackName","browserFontSize","rise","patternTransform","resetLineWidthToOne","fillStrokeMode","isAddToPathSet","getPathGenerator","strokeText","glyphs","showType3Text","glyphsLength","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","glyph","isNum","restoreNeeded","isSpace","fontChar","accent","scaledX","scaledY","vmetric","vx","vy","remeasure","measuredWidth","measureText","isFontSubpixelAAEnabled","characterScaleX","isInFont","paintChar","scaledAccentX","scaledAccentY","compose","spacingLength","charProcOperatorList","operatorListId","xWidth","yWidth","llx","lly","urx","ury","IR","canvasGraphicsFactory","createCanvasGraphics","TilingPattern","_getPattern","getColorN_Pattern","makeHexColor","matrix","getShadingPattern","SHADING","inv","ur","bbox","group","currentCtx","isolated","knockout","currentTransform","getAxialAlignedBoundingBox","canvasBounds","scaleX","scaleY","groupCtx","startTransformInverse","_this$groupStack$pop","currentMtx","hasOwnCanvas","_Util$singularValueDe2","canvasWidth","canvasHeight","annotationCanvas","_this$annotationCanva","savedCtx","compiled","j0","POINT_TYPES","width1","points","lineSize","data0","count","sum","Int32Array","outlines","coords","p0","pp","o","compileType3Glyph","_createMaskCanvas","positions","trans","_Util$applyTransform4","images","image","imgToPaint","HTMLElement","getCanvasPosition","appendImage","visible","isVisible","isContentVisible","updateClipFromPath","absDet","sqNorm1","sqNorm2","pixelHeight","EPSILON","op","RadialAxialShadingPattern","MeshShadingPattern","DummyShadingPattern","applyBoundingBox","Path2D","region","BaseShadingPattern","_BaseShadingPattern","_type","_bbox","_colorStops","_p0","_p1","_r0","_r1","grad","createLinearGradient","createRadialGradient","colorStop","addColorStop","owner","ownerBBox","_createGradient","createPattern","domMatrix","drawTriangle","c1","c2","c3","tmp","colors","rowSize","car","cag","cab","cbr","cbg","cbb","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","x1_","x2_","drawFigure","figure","ps","cs","verticesPerRow","rows","cols","_BaseShadingPattern2","_coords","_colors","_figures","_bounds","_background","combinedScale","backgroundColor","boundsWidth","boundsHeight","paddedWidth","BORDER_SIZE","paddedHeight","matrixScale","temporaryPatternCanvas","_createMeshCanvas","_BaseShadingPattern3","PaintType","xstep","ystep","paintType","tilingType","curMatrixScale","dimx","getSizeAndScale","dimy","graphics","setFillAndStrokeStyleToContext","adjustedX0","adjustedY0","adjustedX1","adjustedY1","clipBbox","realOutputSize","maxSize","MAX_PATTERN_SIZE","bboxWidth","bboxHeight","cssColor","createPatternCanvas","CallbackKind","StreamKind","wrapReason","sourceName","targetName","comObj","callbackId","streamId","streamSinks","streamControllers","callbackCapabilities","actionHandler","_onComObjOnMessage","_processStreamMessage","cbSourceName","cbTargetName","_createStreamSink","actionName","queueingStrategy","startCapability","startCall","pullCall","cancelCall","isClosed","pullCapability","cancelCapability","streamSink","isCancelled","lastDesiredSize","sinkCapability","success","streamController","_deleteStreamController","parsedData","rawData","_metadataMap","_data","_classPrivateFieldGet2","OptionalContentGroup","creator","_order","_groups","groups","_group","off","operator","_evaluateVisibilityExpression","expression","policy","ids","_id","_id2","_id3","_queuedChunks","_progressiveDone","_contentDispositionFilename","_pdfDataRangeTransport","_isStreamingSupported","_isRangeSupported","_contentLength","_fullRequestReader","_rangeReaders","addRangeListener","_onReceiveData","addProgressListener","_onProgress","addProgressiveReadListener","addProgressiveDoneListener","_onProgressiveDone","transportReady","_enqueue","found","_begin","_this$_fullRequestRea","_this$_fullRequestRea2","_loaded","firstReader","queuedChunks","PDFDataTransportStreamReader","_progressiveDataLength","PDFDataTransportStreamRangeReader","requestDataRange","_stream","_done","_filename","isPdfFile","_requests","_headersReady","requestCapability","_end","_queuedChunk","_removeRangeReader","output","walk","_node$attributes","shouldBuildText","_scripting_utils","_xfa_layer","DEFAULT_TAB_INDEX","GetElementsByNameSet","AnnotationElementFactory","parameters","annotationType","AnnotationType","LinkAnnotationElement","TextAnnotationElement","fieldType","TextWidgetAnnotationElement","radioButton","RadioButtonWidgetAnnotationElement","checkBox","CheckboxWidgetAnnotationElement","PushButtonWidgetAnnotationElement","ChoiceWidgetAnnotationElement","WidgetAnnotationElement","PopupAnnotationElement","FreeTextAnnotationElement","LineAnnotationElement","SquareAnnotationElement","CircleAnnotationElement","PolylineAnnotationElement","CaretAnnotationElement","InkAnnotationElement","PolygonAnnotationElement","HighlightAnnotationElement","UnderlineAnnotationElement","SquigglyAnnotationElement","StrikeOutAnnotationElement","StampAnnotationElement","FileAttachmentAnnotationElement","AnnotationElement","_ref$isRenderable","isRenderable","_ref$ignoreBorder","ignoreBorder","_ref$createQuadrilate","createQuadrilaterals","layer","linkService","downloadManager","imageResourcesPath","renderForms","svgFactory","enableScripting","_fieldObjects","fieldObjects","_mouseState","mouseState","_createContainer","quadrilaterals","_createQuadrilaterals","sign","transformOrigin","borderStyle","borderWidth","AnnotationBorderStyleType","horizontalRadius","horizontalCornerRadius","verticalRadius","verticalCornerRadius","radius","borderRadius","borderBottomStyle","borderColor","quadPoints","savedRect","quadPoint","trigger","popup","PopupElement","modificationDate","richText","hideWrapper","className","skipId","fields","fieldObj","_step3$value","exportValues","exportValue","domElement","getElementById","getElementsByName","_domElement","_exportValue","platform","isWin","isMac","_AnnotationElement","isTooltipOnly","resetForm","Action","_linkService$addLinkA","addLinkAttributes","newWindow","_bindNamedAction","_bindLink","hasClickAction","_bindJSAction","_bindResetFormAction","_renderQuadrilaterals","quadrilateral","linkElement","cloneNode","getDestinationHash","goToDestination","getAnchorUrl","executeNamedAction","_Object$keys","jsName","_this3$linkService$ev","eventBus","otherClickAction","resetFormFields","resetFormRefs","include","allFields","fieldIds","fieldName","_Object$values","_i4","_Object$values2","_fields2","_this4$linkService$ev","storage","allIds","_i5","_allFields","_field","valueAsString","_value2","Event","_AnnotationElement2","_parameters$data$titl","_parameters$data$cont","_parameters$data$rich","hasPopup","alt","l10nId","l10nArgs","_createPopup","_AnnotationElement3","alternativeText","_AnnotationElement$pl","baseName","eventName","valueGetter","_this5$linkService$ev","modifier","_getKeyModifier","_this5$linkService$ev2","getter","_this$data$actions","_setEventListener","jsEvent","setColor","styleName","ColorConverters","commonActions","hidden","print","preventScroll","userName","readonly","required","bgColor","fgColor","textColor","_i6","_Object$keys2","_WidgetAnnotationElem","hasAppearance","fieldValue","keyInStorage","_getElementsByName","_defineProperty","storedData","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","multiLine","readOnly","tabIndex","setPropertyOnSiblings","defaultFieldValue","blurListener","_this$data$actions2","selRange","_event$detail$selRang","selStart","selEnd","setSelectionRange","_dispatchEventFromSandbox","_this7$linkService$ev","commitKey","willCommit","_blurListener","_this7$linkService$ev2","isDown","Keystroke","_this7$linkService$ev3","_elementData$beforeIn","change","_setEventListeners","maxLen","maxLength","comb","combWidth","classList","letterSpacing","verticalAlign","_setTextStyle","_setBackgroundColor","_this$data$defaultApp","defaultAppearanceData","fontColor","textAlignment","textAlign","_WidgetAnnotationElem2","_event$target","checkbox","curChecked","_WidgetAnnotationElem3","buttonValue","_event$target2","radio","pdfButtonValue","_LinkAnnotationElemen","_get","_getPrototypeOf","_WidgetAnnotationElem4","_super8","fontSizeStyle","selectElement","combo","multiSelect","option","optionElement","displayValue","isExport","selectedIndex","getItems","multipleSelection","findIndex","_event$detail$insert","indices","_step17","_iterator17","editable","_this10$linkService$e","changeEx","keyDown","_AnnotationElement4","_parameters$data$titl2","_parameters$data$cont2","_parameters$data$rich2","_super9","parentType","selector","parentId","parentElements","parentRect","popupLeft","popupTop","pinned","_this$richText","_this$contentsObj","hideElement","dir","dateObject","toDateObject","toLocaleDateString","toLocaleTimeString","contents","_formatContents","XfaLayer","xfaHtml","_step18","_iterator18","_toggle","_show","_hide","lines","line","_AnnotationElement5","_parameters$data$titl3","_parameters$data$cont3","_parameters$data$rich3","_super10","_AnnotationElement6","_parameters$data$titl4","_parameters$data$cont4","_parameters$data$rich4","_super11","lineCoordinates","append","_AnnotationElement7","_parameters$data$titl5","_parameters$data$cont5","_parameters$data$rich5","_super12","square","_AnnotationElement8","_parameters$data$titl6","_parameters$data$cont6","_parameters$data$rich6","_super13","circle","_AnnotationElement9","_parameters$data$titl7","_parameters$data$cont7","_parameters$data$rich7","_super14","containerClassName","svgElementName","_step19","_iterator19","vertices","coordinate","polyline","_PolylineAnnotationEl","_super15","_AnnotationElement10","_parameters$data$titl8","_parameters$data$cont8","_parameters$data$rich8","_super16","_AnnotationElement11","_parameters$data$titl9","_parameters$data$cont9","_parameters$data$rich9","_super17","_step20","_iterator20","inkLists","_step21","inkList","_iterator21","_AnnotationElement12","_parameters$data$titl10","_parameters$data$cont10","_parameters$data$rich10","_super18","_AnnotationElement13","_parameters$data$titl11","_parameters$data$cont11","_parameters$data$rich11","_super19","_AnnotationElement14","_parameters$data$titl12","_parameters$data$cont12","_parameters$data$rich12","_super20","_AnnotationElement15","_parameters$data$titl13","_parameters$data$cont13","_parameters$data$rich13","_super21","_AnnotationElement16","_parameters$data$titl14","_parameters$data$cont14","_parameters$data$rich14","_super22","_AnnotationElement17","_this14$linkService$e","_this14$data$file","_super23","file","getFilenameFromUrl","_assertThisInitialized","stringToPDFString","_this$data$titleObj","_this$data$contentsOb","_download","_this$downloadManager","openOrDownloadData","AnnotationLayer","_step22","sortedAnnotations","popupAnnotations","_iterator22","_i7","_sortedAnnotations","rendered","_step23","_iterator23","renderedElement","prepend","_classStaticPrivateMethodGet","_setAnnotationCanvasMap","ownMatrix","_step24","_iterator24","_step25","_iterator25","ownTransform","_step26","_iterator26","_step26$value","querySelector","replaceChild","makeColorComp","RGB_HTML","CMYK_RGB","xfaOn","xfaOff","getAttribute","_ref$storage","isHTMLAnchorElement","HTMLAnchorElement","dataId","setupStorage","root","rootHtml","setAttributes","rootDiv","textDivs","_child$attributes","_stack","childHtml","xmlns","_node","renderParameters","TextLayerRenderTask","textContentStream","textContentItemsStr","enhanceTextSelection","_render","timeout","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","AllWhitespaceRegexp","appendText","geom","textDiv","textDivProperties","_enhanceTextSelection","hasText","hasEOL","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","_textDivs","tx","_viewport","atan2","fontName","fontHeight","fontAscent","cachedAscent","metrics","ascent","fontBoundingBoxAscent","descent","fontBoundingBoxDescent","ratio","pixels","_ratio","getAscent","_fontInspectorEnabled","shouldScaleText","absScaleX","absScaleY","_textDivProperties","_textContentStream","_layoutText","angleCos","angleSin","divWidth","divHeight","right","bottom","_canceled","textDivsLength","_renderingDone","findPositiveMin","ts","expand","expanded","boxes","x1New","x2New","expandBoundsLTR","_b","expandBounds","divProperties","boxScale","horizon","boundary","_horizonPart","_affectedBoundary","maxXNew","xNew","changedHorizon","lastBoundary","useBoundary","used","_horizon","affectedBoundary","_textContent","_container","_textContentItemsStr","_layoutTextLastFontSize","_layoutTextLastFontFamily","_layoutTextCtx","_renderTimer","styleCache","_textDiv$style","mozOpaque","textItems","textStyles","_processItems","expandDivs","transformBuf","paddingBuf","divProps","padding","SVGGraphics","toFixed","pm","acos","SVG_DEFAULTS","fontStyle","convertImgDataToPng","PNG_HEADER","crcTable","writePngChunk","crc","crc32","deflateSyncUncompressed","literals","maxBlockLength","deflateBlocks","idat","adler","adler32","encode","isMask","bitDepth","colorType","offsetLiterals","offsetBytes","_y","ihdr","deflateSync","pngLength","CHUNK_WRAPPER_SIZE","SVGExtraState","activeClipUrl","clipGroup","maskId","clipCount","maskCount","shadingCount","transformMatrix","transformStack","extraStack","embedFonts","embeddedFonts","cssStyle","_operatorIdMapping","tgrp","executeOpTree","svgElement","loadDependencies","convertOpList","operatorIdMapping","opList","opTree","opListElement","opListToTree","opTreeElement","lineMatrix","xcoords","ycoords","tspan","txtElement","txtgrp","lineWidthScale","_setStrokeAttributes","_ensureTransformGroup","defs","addFontStyle","_current$txtElement","hasChildNodes","_makeColorN_Pattern","_makeShadingPattern","_makeTilingPattern","_args$","tilingId","_Util$normalizeRect2","tx0","ty0","tx1","ty1","txstep","tystep","tiling","childNodes","gradient","shadingId","colorStops","point0","point1","focalPoint","circlePoint","focalRadius","circleRadius","getAttributeNS","clipId","clipPath","clipElement","setStrokeAlpha","setFillAlpha","imgSrc","cliprect","imgEl","definitions","rootGroup","_ensureClipGroup","_network_utils","fs","http","https","fileUriRegex","PDFNodeStream","sourceUrl","parsedUrl","parse","parseUrl","isHttp","isFsUrl","_rangeRequestReaders","PDFNodeStreamFsFullReader","PDFNodeStreamFullReader","PDFNodeStreamFsRangeReader","PDFNodeStreamRangeReader","BaseFullReader","_url","_disableRange","_rangeChunkSize","_readableStream","_readCapability","_headersCapability","_error","BaseRangeReader","createRequestOptions","headers","auth","hostname","_BaseFullReader","handleResponse","statusCode","_setReadableStream","getResponseHeader","_validateRangeRequest","validateRangeRequestCapabilities","allowRangeRequests","suggestedLength","extractFilenameFromHeader","_request","_BaseRangeReader","_httpHeaders","Range","_BaseFullReader2","lstat","createReadStream","_BaseRangeReader2","contentDisposition","_content_disposition","getFilenameFromContentDispositionHeader","returnValues","needsEncodingFixup","toParamRegExp","rfc2616unquote","fixupEncoding","rfc2047decode","rfc5987decode","contentDispositionStr","_match2","quot","part","parts","_n2","_matches$_n","_quot","_part","rfc2231getparam","_filename2","attributePattern","textdecode","encoding","decoder","TextDecoder","fatal","decode","quotindex","extvalue","encodingend","charset","hex","NetworkManager","getXhr","currXhrId","pendingRequests","xhr","xhrId","pendingRequest","setRequestHeader","expectedStatus","onStateChange","onprogress","onHeadersReceived","onDone","_pendingRequest$onPro","_pendingRequest$onErr","xhrStatus","getArrayBuffer","rangeHeader","_pendingRequest$onErr3","_pendingRequest$onErr2","PDFNetworkStream","_manager","PDFNetworkStreamFullRequestReader","PDFNetworkStreamRangeRequestReader","onClosed","_onRangeRequestReaderClosed","manager","_onHeadersReceived","_onDone","_onError","_fullRequestId","requestFull","_headersReceivedCapability","_cachedChunks","fullRequestXhrId","fullRequestXhr","getRequestXhr","createResponseStatusError","_this$onProgress","lengthComputable","isPendingRequest","_requestId","requestRange","_this$onClosed","_close","_this$onProgress2","createFetchOptions","abortController","credentials","redirect","createHeaders","Headers","PDFFetchStream","PDFFetchStreamReader","PDFFetchStreamRangeReader","_withCredentials","_headers","validateResponseStatus","_yield$this$_reader$r","_yield$this$_reader$r2","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","nmd","_api","_annotation_layer","_text_layer","_svg","__self","__source","Fragment","jsx","jsxs","setState","forceUpdate","_status","_result","default","Children","only","Profiler","PureComponent","StrictMode","Suspense","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","sortIndex","performance","startTime","expirationTime","priorityLevel","scheduling","isInputPending","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","__webpack_require__","__esModule","definition","chunkId","reduce","promises","miniCssF","inProgress","dataWebpackPrefix","needAttach","scripts","nc","onScriptComplete","doneFns","installedChunks","installedChunkData","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","chunkLoadingGlobal","_objectWithoutProperties","_defineProperties","ReferenceError","_setPrototypeOf","_possibleConstructorReturn","__spreadArray","to","pack","ar","keyboardEvents","mouseEvents","touchEvents","allEvents","makeEventProps","getArgs","eventProps","eventHandler","makeCancellablePromise","mergeClassNames","isProduction","prefix","invariant","provided","Message","React","propTypes","LinkService","externalLinkTarget","externalLinkRel","pdfDocument","pdfViewer","currentPageNumber","explicitDest","destRef","pagesCount","scrollPageIntoView","_arrayLikeToArray","_unsupportedIterableToArray","isBrowser","isLocalFileSystem","isDefined","variable","isProvided","isDataURI","dataURItoByteString","dataURI","_dataURI$split2","headersString","dataString","allowFileAccessFromFilesTip","displayCORSWarning","warning","cancelRunningTask","runningTask","makePageCallback","isCancelException","fileTypes","File","isClassName","isFile","isLinkService","isPage","getTextContent","getViewport","isPdf","isRef","isRenderMode","isRotate","_excluded","enumerableOnly","symbols","sym","_objectSpread","getOwnPropertyDescriptors","Derived","hasNativeReflectConstruct","Proxy","_isNativeReflectConstruct","Super","NewTarget","pdfjs","Document","_PureComponent","_len","_key","pdf","onItemClick","pages","scrollIntoView","cancellable","makeCancellable","findDocumentSource","onSourceSuccess","prevState","_this$props","onLoadProgress","fingerprint","onLoadSuccess","onLoadError","onSourceError","_this$props2","setViewer","viewer","setExternalLinkRel","setExternalLinkTarget","setDocument","fileByteString","isBlob","FileReader","NOT_FOUND_ERR","NOT_READABLE_ERR","SECURITY_ERR","ABORT_ERR","readAsArrayBuffer","loadFromFile","otherParams","_fileByteString","loadDocument","setupLinkService","prevProps","registerPage","unregisterPage","_this$props3","renderMode","DocumentContext","childContext","noData","loading","renderChildren","_this$props4","inputRef","_extends","renderContent","PasswordResponses","prompt","isFunctionOrNode","isFileProp","Ref","num","gen","OutlineItemInternal","getPageNumber","otherProps","subitems","subitem","subitemIndex","renderSubitems","isDestination","documentContext","OutlineContext","outlineContext","OutlineInternal","outline","loadOutline","itemIndex","OutlineItem","renderOutline","mergeRefs","inputRefs","filteredInputRefs","ANNOTATION_MODE","PageCanvasInternal","renderer","onRenderSuccess","onRenderError","canvasElement","_assertThisInitialize","renderViewport","canvasBackground","renderContext","cancelRenderingTask","drawPageOnCanvas","pixelRatio","_this$props5","canvasRef","userSelect","PageCanvas","PageContext","PageSVGInternal","getOperatorList","svgGfx","getSVG","firstElementChild","_this$viewport","renderSVG","_this$viewport2","drawPageOnContainer","PageSVG","TextLayerItemInternal","sideways","getBoundingClientRect","alignTextItem","unrotatedViewport","defaultSideways","_transform","fontHeightPx","fontWidthPx","_transform2","_viewport$viewBox","yMin","yMax","_transform3","xMin","itemElement","getFontData","fontData","fallbackFontName","targetWidth","actualWidth","getElementWidth","WebkitTransform","customTextRenderer","whiteSpace","pointerEvents","TextLayerItem","TextLayerInternal","onGetTextSuccess","onGetTextError","loadTextItems","textItem","renderTextItems","TextLayer","AnnotationLayerInternal","onGetAnnotationsSuccess","onGetAnnotationsError","onRenderAnnotationLayerSuccess","onRenderAnnotationLayerError","loadAnnotations","layerElement","renderAnnotationLayer","pageContext","PageInternal","pageElement","loadPage","pageScale","scaleWithDefault","pageKeyNoScale","pageKey","renderTextLayer","renderMainLayer","Page","toVector","v1","v2","sub","addTo","subTo","rubberband","distance","dimension","constant","rubberbandIfOutOfBounds","clamp","_toPropertyKey","hint","prim","_toPrimitive","_objectSpread2","EVENT_TYPE_MAP","pointer","mouse","touch","gesture","capitalize","actionsWithoutCaptureSupported","toHandlerProp","device","deviceProps","actionKey","hasCapture","pointerCaptureEvents","parseProp","eventKey","captureKey","isTouch","getPointerType","getValueEvent","getTouchList","distanceAngle","P1","P2","dx","dy","cx","cy","_unused","touchIds","_event$currentTarget","_event$currentTarget$","getCurrentTargetTouchList","identifier","touchDistanceAngle","valueEvent","pointerValues","wheelValues","_len2","fns","_key2","assignDefault","Engine","ctrl","computeValues","computeInitial","eventStore","gestureEventStores","timeoutStore","gestureTimeoutStores","config","sharedConfig","handlers","ingKey","_active","active","_blocked","_force","intentional","_movement","_distance","_direction","_delta","timeDelta","direction","_movementBound","velocity","movement","delta","lastOffset","_values","_initial","initial","compute","dt","pointerIds","pointerLockElement","getEventDetails","down","pressed","_absoluteDelta","axisIntent","_m0","_m1","threshold","hasCustomTransform","v0","restrictToAxis","previousOffset","gestureIsActive","computeOffset","ox","oy","Vx","Vy","Rx","Ry","X0","X1","Y0","Y1","computeRubberband","computeMovement","absoluteDelta","clean","triggerAllEvents","aliasKey","CoordinatesEngine","super","axisThreshold","absDx","absDy","selectAxis","lockDirection","identity","commonConfigResolver","eventOptions","coordinatesConfigResolver","_v","KEYS_DELTA_MAP","ArrowRight","displacement","ArrowLeft","ArrowUp","ArrowDown","supportsTouchEvents","SUPPORT","GestureEvent","supportsGestureEvents","touchscreen","maxTouchPoints","pointerLock","DEFAULT_SWIPE_VELOCITY","DEFAULT_SWIPE_DISTANCE","DEFAULT_SWIPE_DURATION","DEFAULT_DRAG_AXIS_THRESHOLD","pen","dragConfigResolver","lock","preventScrollAxis","preventScrollDelay","pointerCapture","pointerButtons","filterTaps","tapsThreshold","swipe","keyboardDisplacement","clampStateInternalMovementToBounds","dirx","diry","pinchConfigResolver","scaleBounds","angleBounds","_scaleBounds","_angleBounds","modifierKey","pinchOnWheel","mouseOnly","EngineMap","ConfigResolverMap","registerAction","engine","resolver","dragAction","_pointerId","_pointerActive","_keyboardActive","_preventScroll","_delayed","tap","canceled","boundRect","targetRect","setActive","pointerClean","pointerDown","ctrlIds","setEventIds","setPointerCapture","setupPointer","setupScrollPrevention","setupDelayTrigger","startPointerDrag","pointerMove","pointerUp","hasPointerCapture","releasePointerCapture","_dx","_dy","_mx","_my","svx","svy","sdt","_vx","_vy","pointerClick","requestPointerLock","exitPointerLock","persistEvent","deltaFn","factor","keyUp","bindFunction","pinchAction","_pointerEvents","_touchIds","turns","axisMovementDifference","touchStart","ctrlTouchIds","pinchStart","pointerStart","ctrlPointerIds","touchMove","pinchMove","prev_a","delta_a","delta_turns","touchEnd","pointerEnd","gestureStart","gestureMove","_previousMovement","gestureEnd","wheel","find","wheelChange","wheelStart","wheelEnd","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","sharedConfigResolver","resolveWith","resolvers","EventStore","gestureKey","_ctrl","_gestureKey","toDomEventType","TimeoutStore","ms","_timeouts","Controller","internalHandlers","drag","setupGesture","scroll","move","pinch","hover","resolveGestures","applyHandlers","nativeHandlers","applyConfig","newConfig","_config","rest","_targetEventStore","gestures","effect","gestureConfig","bindToProps","nativeBindFunction","handlerProp","withPassiveOption","isNative","_options$capture","_options$passive","useRecognizers","filePath","setScale","setNumPages","setPosition","bindPinch","bindDrag","useDrag","_jsx","touchAction","innerWidth","Index","_jsxs","_Fragment","Pdf","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","App","reportWebVitals"],"sourceRoot":""}